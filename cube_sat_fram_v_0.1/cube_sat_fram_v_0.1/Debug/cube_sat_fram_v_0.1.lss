
cube_sat_fram_v_0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004378  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000002c  20000000  00004378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0002002c  2**0
                  CONTENTS
  3 .bss          0000006c  2000002c  000043a4  0002002c  2**2
                  ALLOC
  4 .stack        00002000  20000098  00004410  0002002c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
  7 .debug_info   000169ce  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000024d4  00000000  00000000  00036a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006276  00000000  00000000  00038f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001048  00000000  00000000  0003f1c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000f00  00000000  00000000  0004020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001abd3  00000000  00000000  0004110d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000115ec  00000000  00000000  0005bce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00087bb1  00000000  00000000  0006d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003bbc  00000000  00000000  000f4e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 20 00 20 29 01 00 00 bd 01 00 00 bd 01 00 00     . . )...........
	...
      2c:	bd 01 00 00 00 00 00 00 00 00 00 00 bd 01 00 00     ................
      3c:	bd 01 00 00 bd 01 00 00 bd 01 00 00 bd 01 00 00     ................
      4c:	bd 01 00 00 bd 01 00 00 bd 01 00 00 bd 01 00 00     ................
      5c:	bd 01 00 00 bd 01 00 00 bd 01 00 00 bd 01 00 00     ................
      6c:	bd 01 00 00 bd 01 00 00 bd 01 00 00 bd 01 00 00     ................
      7c:	bd 01 00 00 bd 01 00 00 bd 27 00 00 bd 01 00 00     .........'......
	...
      94:	bd 01 00 00 bd 01 00 00 bd 01 00 00 bd 01 00 00     ................
      a4:	bd 01 00 00 bd 01 00 00 bd 01 00 00 00 00 00 00     ................

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000002c 	.word	0x2000002c
      d4:	00000000 	.word	0x00000000
      d8:	00004378 	.word	0x00004378

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000030 	.word	0x20000030
     108:	00004378 	.word	0x00004378
     10c:	00004378 	.word	0x00004378
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	system_init();
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11a:	4798      	blx	r3
}
     11c:	46c0      	nop			; (mov r8, r8)
     11e:	46bd      	mov	sp, r7
     120:	bd80      	pop	{r7, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	00000805 	.word	0x00000805

00000128 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     128:	b580      	push	{r7, lr}
     12a:	b082      	sub	sp, #8
     12c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     12e:	4b19      	ldr	r3, [pc, #100]	; (194 <Reset_Handler+0x6c>)
     130:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     132:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x70>)
     134:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     136:	687a      	ldr	r2, [r7, #4]
     138:	683b      	ldr	r3, [r7, #0]
     13a:	429a      	cmp	r2, r3
     13c:	d00c      	beq.n	158 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     13e:	e007      	b.n	150 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     140:	683b      	ldr	r3, [r7, #0]
     142:	1d1a      	adds	r2, r3, #4
     144:	603a      	str	r2, [r7, #0]
     146:	687a      	ldr	r2, [r7, #4]
     148:	1d11      	adds	r1, r2, #4
     14a:	6079      	str	r1, [r7, #4]
     14c:	6812      	ldr	r2, [r2, #0]
     14e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     150:	683a      	ldr	r2, [r7, #0]
     152:	4b12      	ldr	r3, [pc, #72]	; (19c <Reset_Handler+0x74>)
     154:	429a      	cmp	r2, r3
     156:	d3f3      	bcc.n	140 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     158:	4b11      	ldr	r3, [pc, #68]	; (1a0 <Reset_Handler+0x78>)
     15a:	603b      	str	r3, [r7, #0]
     15c:	e004      	b.n	168 <Reset_Handler+0x40>
                *pDest++ = 0;
     15e:	683b      	ldr	r3, [r7, #0]
     160:	1d1a      	adds	r2, r3, #4
     162:	603a      	str	r2, [r7, #0]
     164:	2200      	movs	r2, #0
     166:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     168:	683a      	ldr	r2, [r7, #0]
     16a:	4b0e      	ldr	r3, [pc, #56]	; (1a4 <Reset_Handler+0x7c>)
     16c:	429a      	cmp	r2, r3
     16e:	d3f6      	bcc.n	15e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     170:	4b0d      	ldr	r3, [pc, #52]	; (1a8 <Reset_Handler+0x80>)
     172:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x84>)
     176:	687a      	ldr	r2, [r7, #4]
     178:	21ff      	movs	r1, #255	; 0xff
     17a:	438a      	bics	r2, r1
     17c:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	4a0c      	ldr	r2, [pc, #48]	; (1b0 <Reset_Handler+0x88>)
     180:	6853      	ldr	r3, [r2, #4]
     182:	2180      	movs	r1, #128	; 0x80
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     188:	4b0a      	ldr	r3, [pc, #40]	; (1b4 <Reset_Handler+0x8c>)
     18a:	4798      	blx	r3

        /* Branch to main function */
        main();
     18c:	4b0a      	ldr	r3, [pc, #40]	; (1b8 <Reset_Handler+0x90>)
     18e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     190:	e7fe      	b.n	190 <Reset_Handler+0x68>
     192:	46c0      	nop			; (mov r8, r8)
     194:	00004378 	.word	0x00004378
     198:	20000000 	.word	0x20000000
     19c:	2000002c 	.word	0x2000002c
     1a0:	2000002c 	.word	0x2000002c
     1a4:	20000098 	.word	0x20000098
     1a8:	00000000 	.word	0x00000000
     1ac:	e000ed00 	.word	0xe000ed00
     1b0:	41004000 	.word	0x41004000
     1b4:	00004165 	.word	0x00004165
     1b8:	000028bd 	.word	0x000028bd

000001bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1bc:	b580      	push	{r7, lr}
     1be:	af00      	add	r7, sp, #0
        while (1) {
     1c0:	e7fe      	b.n	1c0 <Dummy_Handler+0x4>

000001c2 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1c2:	b580      	push	{r7, lr}
     1c4:	b084      	sub	sp, #16
     1c6:	af00      	add	r7, sp, #0
     1c8:	60f8      	str	r0, [r7, #12]
     1ca:	607a      	str	r2, [r7, #4]
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	1c0a      	adds	r2, r1, #0
     1d2:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1d4:	230b      	movs	r3, #11
     1d6:	18fb      	adds	r3, r7, r3
     1d8:	781a      	ldrb	r2, [r3, #0]
     1da:	68fb      	ldr	r3, [r7, #12]
     1dc:	3220      	adds	r2, #32
     1de:	0092      	lsls	r2, r2, #2
     1e0:	6879      	ldr	r1, [r7, #4]
     1e2:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1e4:	46c0      	nop			; (mov r8, r8)
     1e6:	46bd      	mov	sp, r7
     1e8:	b004      	add	sp, #16
     1ea:	bd80      	pop	{r7, pc}

000001ec <hri_mclk_set_APBCMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	b082      	sub	sp, #8
     1f0:	af00      	add	r7, sp, #0
     1f2:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     1f4:	687b      	ldr	r3, [r7, #4]
     1f6:	69db      	ldr	r3, [r3, #28]
     1f8:	2208      	movs	r2, #8
     1fa:	431a      	orrs	r2, r3
     1fc:	687b      	ldr	r3, [r7, #4]
     1fe:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     200:	46c0      	nop			; (mov r8, r8)
     202:	46bd      	mov	sp, r7
     204:	b002      	add	sp, #8
     206:	bd80      	pop	{r7, pc}

00000208 <hri_mclk_set_APBCMASK_TC0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
     208:	b580      	push	{r7, lr}
     20a:	b082      	sub	sp, #8
     20c:	af00      	add	r7, sp, #0
     20e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     210:	687b      	ldr	r3, [r7, #4]
     212:	69db      	ldr	r3, [r3, #28]
     214:	2280      	movs	r2, #128	; 0x80
     216:	0052      	lsls	r2, r2, #1
     218:	431a      	orrs	r2, r3
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	b002      	add	sp, #8
     224:	bd80      	pop	{r7, pc}

00000226 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     226:	b580      	push	{r7, lr}
     228:	b084      	sub	sp, #16
     22a:	af00      	add	r7, sp, #0
     22c:	60f8      	str	r0, [r7, #12]
     22e:	607a      	str	r2, [r7, #4]
     230:	230b      	movs	r3, #11
     232:	18fb      	adds	r3, r7, r3
     234:	1c0a      	adds	r2, r1, #0
     236:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     238:	230b      	movs	r3, #11
     23a:	18fb      	adds	r3, r7, r3
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	68fa      	ldr	r2, [r7, #12]
     240:	01db      	lsls	r3, r3, #7
     242:	18d3      	adds	r3, r2, r3
     244:	3304      	adds	r3, #4
     246:	687a      	ldr	r2, [r7, #4]
     248:	601a      	str	r2, [r3, #0]
}
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	46bd      	mov	sp, r7
     24e:	b004      	add	sp, #16
     250:	bd80      	pop	{r7, pc}

00000252 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     252:	b580      	push	{r7, lr}
     254:	b084      	sub	sp, #16
     256:	af00      	add	r7, sp, #0
     258:	60f8      	str	r0, [r7, #12]
     25a:	607a      	str	r2, [r7, #4]
     25c:	230b      	movs	r3, #11
     25e:	18fb      	adds	r3, r7, r3
     260:	1c0a      	adds	r2, r1, #0
     262:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     264:	230b      	movs	r3, #11
     266:	18fb      	adds	r3, r7, r3
     268:	781b      	ldrb	r3, [r3, #0]
     26a:	68fa      	ldr	r2, [r7, #12]
     26c:	01db      	lsls	r3, r3, #7
     26e:	18d3      	adds	r3, r2, r3
     270:	3318      	adds	r3, #24
     272:	687a      	ldr	r2, [r7, #4]
     274:	601a      	str	r2, [r3, #0]
}
     276:	46c0      	nop			; (mov r8, r8)
     278:	46bd      	mov	sp, r7
     27a:	b004      	add	sp, #16
     27c:	bd80      	pop	{r7, pc}

0000027e <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     27e:	b580      	push	{r7, lr}
     280:	b084      	sub	sp, #16
     282:	af00      	add	r7, sp, #0
     284:	60f8      	str	r0, [r7, #12]
     286:	607a      	str	r2, [r7, #4]
     288:	230b      	movs	r3, #11
     28a:	18fb      	adds	r3, r7, r3
     28c:	1c0a      	adds	r2, r1, #0
     28e:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     290:	230b      	movs	r3, #11
     292:	18fb      	adds	r3, r7, r3
     294:	781b      	ldrb	r3, [r3, #0]
     296:	68fa      	ldr	r2, [r7, #12]
     298:	01db      	lsls	r3, r3, #7
     29a:	18d3      	adds	r3, r2, r3
     29c:	3314      	adds	r3, #20
     29e:	687a      	ldr	r2, [r7, #4]
     2a0:	601a      	str	r2, [r3, #0]
}
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	46bd      	mov	sp, r7
     2a6:	b004      	add	sp, #16
     2a8:	bd80      	pop	{r7, pc}

000002aa <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     2aa:	b590      	push	{r4, r7, lr}
     2ac:	b085      	sub	sp, #20
     2ae:	af00      	add	r7, sp, #0
     2b0:	6078      	str	r0, [r7, #4]
     2b2:	000c      	movs	r4, r1
     2b4:	0010      	movs	r0, r2
     2b6:	0019      	movs	r1, r3
     2b8:	1cfb      	adds	r3, r7, #3
     2ba:	1c22      	adds	r2, r4, #0
     2bc:	701a      	strb	r2, [r3, #0]
     2be:	1cbb      	adds	r3, r7, #2
     2c0:	1c02      	adds	r2, r0, #0
     2c2:	701a      	strb	r2, [r3, #0]
     2c4:	1c7b      	adds	r3, r7, #1
     2c6:	1c0a      	adds	r2, r1, #0
     2c8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2ca:	1cfb      	adds	r3, r7, #3
     2cc:	7819      	ldrb	r1, [r3, #0]
     2ce:	1cbb      	adds	r3, r7, #2
     2d0:	781a      	ldrb	r2, [r3, #0]
     2d2:	230f      	movs	r3, #15
     2d4:	18fb      	adds	r3, r7, r3
     2d6:	6878      	ldr	r0, [r7, #4]
     2d8:	2430      	movs	r4, #48	; 0x30
     2da:	01c9      	lsls	r1, r1, #7
     2dc:	1841      	adds	r1, r0, r1
     2de:	188a      	adds	r2, r1, r2
     2e0:	1912      	adds	r2, r2, r4
     2e2:	7812      	ldrb	r2, [r2, #0]
     2e4:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2e6:	230f      	movs	r3, #15
     2e8:	18fb      	adds	r3, r7, r3
     2ea:	220f      	movs	r2, #15
     2ec:	18ba      	adds	r2, r7, r2
     2ee:	7812      	ldrb	r2, [r2, #0]
     2f0:	210f      	movs	r1, #15
     2f2:	438a      	bics	r2, r1
     2f4:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     2f6:	1c7b      	adds	r3, r7, #1
     2f8:	781b      	ldrb	r3, [r3, #0]
     2fa:	220f      	movs	r2, #15
     2fc:	4013      	ands	r3, r2
     2fe:	b2d9      	uxtb	r1, r3
     300:	230f      	movs	r3, #15
     302:	18fb      	adds	r3, r7, r3
     304:	220f      	movs	r2, #15
     306:	18ba      	adds	r2, r7, r2
     308:	7812      	ldrb	r2, [r2, #0]
     30a:	430a      	orrs	r2, r1
     30c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     30e:	1cfb      	adds	r3, r7, #3
     310:	781a      	ldrb	r2, [r3, #0]
     312:	1cbb      	adds	r3, r7, #2
     314:	781b      	ldrb	r3, [r3, #0]
     316:	6879      	ldr	r1, [r7, #4]
     318:	2030      	movs	r0, #48	; 0x30
     31a:	01d2      	lsls	r2, r2, #7
     31c:	188a      	adds	r2, r1, r2
     31e:	18d3      	adds	r3, r2, r3
     320:	181b      	adds	r3, r3, r0
     322:	220f      	movs	r2, #15
     324:	18ba      	adds	r2, r7, r2
     326:	7812      	ldrb	r2, [r2, #0]
     328:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	46bd      	mov	sp, r7
     32e:	b005      	add	sp, #20
     330:	bd90      	pop	{r4, r7, pc}

00000332 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     332:	b590      	push	{r4, r7, lr}
     334:	b085      	sub	sp, #20
     336:	af00      	add	r7, sp, #0
     338:	6078      	str	r0, [r7, #4]
     33a:	000c      	movs	r4, r1
     33c:	0010      	movs	r0, r2
     33e:	0019      	movs	r1, r3
     340:	1cfb      	adds	r3, r7, #3
     342:	1c22      	adds	r2, r4, #0
     344:	701a      	strb	r2, [r3, #0]
     346:	1cbb      	adds	r3, r7, #2
     348:	1c02      	adds	r2, r0, #0
     34a:	701a      	strb	r2, [r3, #0]
     34c:	1c7b      	adds	r3, r7, #1
     34e:	1c0a      	adds	r2, r1, #0
     350:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     352:	1cfb      	adds	r3, r7, #3
     354:	7819      	ldrb	r1, [r3, #0]
     356:	1cbb      	adds	r3, r7, #2
     358:	781a      	ldrb	r2, [r3, #0]
     35a:	230f      	movs	r3, #15
     35c:	18fb      	adds	r3, r7, r3
     35e:	6878      	ldr	r0, [r7, #4]
     360:	2430      	movs	r4, #48	; 0x30
     362:	01c9      	lsls	r1, r1, #7
     364:	1841      	adds	r1, r0, r1
     366:	188a      	adds	r2, r1, r2
     368:	1912      	adds	r2, r2, r4
     36a:	7812      	ldrb	r2, [r2, #0]
     36c:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     36e:	230f      	movs	r3, #15
     370:	18fb      	adds	r3, r7, r3
     372:	220f      	movs	r2, #15
     374:	18ba      	adds	r2, r7, r2
     376:	7812      	ldrb	r2, [r2, #0]
     378:	210f      	movs	r1, #15
     37a:	400a      	ands	r2, r1
     37c:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     37e:	1c7b      	adds	r3, r7, #1
     380:	781b      	ldrb	r3, [r3, #0]
     382:	011b      	lsls	r3, r3, #4
     384:	b2d9      	uxtb	r1, r3
     386:	230f      	movs	r3, #15
     388:	18fb      	adds	r3, r7, r3
     38a:	220f      	movs	r2, #15
     38c:	18ba      	adds	r2, r7, r2
     38e:	7812      	ldrb	r2, [r2, #0]
     390:	430a      	orrs	r2, r1
     392:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     394:	1cfb      	adds	r3, r7, #3
     396:	781a      	ldrb	r2, [r3, #0]
     398:	1cbb      	adds	r3, r7, #2
     39a:	781b      	ldrb	r3, [r3, #0]
     39c:	6879      	ldr	r1, [r7, #4]
     39e:	2030      	movs	r0, #48	; 0x30
     3a0:	01d2      	lsls	r2, r2, #7
     3a2:	188a      	adds	r2, r1, r2
     3a4:	18d3      	adds	r3, r2, r3
     3a6:	181b      	adds	r3, r3, r0
     3a8:	220f      	movs	r2, #15
     3aa:	18ba      	adds	r2, r7, r2
     3ac:	7812      	ldrb	r2, [r2, #0]
     3ae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3b0:	46c0      	nop			; (mov r8, r8)
     3b2:	46bd      	mov	sp, r7
     3b4:	b005      	add	sp, #20
     3b6:	bd90      	pop	{r4, r7, pc}

000003b8 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     3b8:	b590      	push	{r4, r7, lr}
     3ba:	b085      	sub	sp, #20
     3bc:	af00      	add	r7, sp, #0
     3be:	6078      	str	r0, [r7, #4]
     3c0:	000c      	movs	r4, r1
     3c2:	0010      	movs	r0, r2
     3c4:	0019      	movs	r1, r3
     3c6:	1cfb      	adds	r3, r7, #3
     3c8:	1c22      	adds	r2, r4, #0
     3ca:	701a      	strb	r2, [r3, #0]
     3cc:	1cbb      	adds	r3, r7, #2
     3ce:	1c02      	adds	r2, r0, #0
     3d0:	701a      	strb	r2, [r3, #0]
     3d2:	1c7b      	adds	r3, r7, #1
     3d4:	1c0a      	adds	r2, r1, #0
     3d6:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d8:	1cfb      	adds	r3, r7, #3
     3da:	7819      	ldrb	r1, [r3, #0]
     3dc:	1cbb      	adds	r3, r7, #2
     3de:	781a      	ldrb	r2, [r3, #0]
     3e0:	230f      	movs	r3, #15
     3e2:	18fb      	adds	r3, r7, r3
     3e4:	6878      	ldr	r0, [r7, #4]
     3e6:	2440      	movs	r4, #64	; 0x40
     3e8:	01c9      	lsls	r1, r1, #7
     3ea:	1841      	adds	r1, r0, r1
     3ec:	188a      	adds	r2, r1, r2
     3ee:	1912      	adds	r2, r2, r4
     3f0:	7812      	ldrb	r2, [r2, #0]
     3f2:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f4:	230f      	movs	r3, #15
     3f6:	18fb      	adds	r3, r7, r3
     3f8:	220f      	movs	r2, #15
     3fa:	18ba      	adds	r2, r7, r2
     3fc:	7812      	ldrb	r2, [r2, #0]
     3fe:	2101      	movs	r1, #1
     400:	438a      	bics	r2, r1
     402:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     404:	1c7b      	adds	r3, r7, #1
     406:	7819      	ldrb	r1, [r3, #0]
     408:	230f      	movs	r3, #15
     40a:	18fb      	adds	r3, r7, r3
     40c:	220f      	movs	r2, #15
     40e:	18ba      	adds	r2, r7, r2
     410:	7812      	ldrb	r2, [r2, #0]
     412:	430a      	orrs	r2, r1
     414:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     416:	1cfb      	adds	r3, r7, #3
     418:	781a      	ldrb	r2, [r3, #0]
     41a:	1cbb      	adds	r3, r7, #2
     41c:	781b      	ldrb	r3, [r3, #0]
     41e:	6879      	ldr	r1, [r7, #4]
     420:	2040      	movs	r0, #64	; 0x40
     422:	01d2      	lsls	r2, r2, #7
     424:	188a      	adds	r2, r1, r2
     426:	18d3      	adds	r3, r2, r3
     428:	181b      	adds	r3, r3, r0
     42a:	220f      	movs	r2, #15
     42c:	18ba      	adds	r2, r7, r2
     42e:	7812      	ldrb	r2, [r2, #0]
     430:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     432:	46c0      	nop			; (mov r8, r8)
     434:	46bd      	mov	sp, r7
     436:	b005      	add	sp, #20
     438:	bd90      	pop	{r4, r7, pc}

0000043a <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     43a:	b5b0      	push	{r4, r5, r7, lr}
     43c:	b082      	sub	sp, #8
     43e:	af00      	add	r7, sp, #0
     440:	6078      	str	r0, [r7, #4]
     442:	0008      	movs	r0, r1
     444:	0011      	movs	r1, r2
     446:	1cfb      	adds	r3, r7, #3
     448:	1c02      	adds	r2, r0, #0
     44a:	701a      	strb	r2, [r3, #0]
     44c:	1cbb      	adds	r3, r7, #2
     44e:	1c0a      	adds	r2, r1, #0
     450:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     452:	1cfb      	adds	r3, r7, #3
     454:	781a      	ldrb	r2, [r3, #0]
     456:	1cbb      	adds	r3, r7, #2
     458:	781b      	ldrb	r3, [r3, #0]
     45a:	1cf9      	adds	r1, r7, #3
     45c:	7808      	ldrb	r0, [r1, #0]
     45e:	1cb9      	adds	r1, r7, #2
     460:	7809      	ldrb	r1, [r1, #0]
     462:	687c      	ldr	r4, [r7, #4]
     464:	2540      	movs	r5, #64	; 0x40
     466:	01c0      	lsls	r0, r0, #7
     468:	1820      	adds	r0, r4, r0
     46a:	1841      	adds	r1, r0, r1
     46c:	1949      	adds	r1, r1, r5
     46e:	7809      	ldrb	r1, [r1, #0]
     470:	b2c9      	uxtb	r1, r1
     472:	2004      	movs	r0, #4
     474:	4301      	orrs	r1, r0
     476:	b2cc      	uxtb	r4, r1
     478:	6879      	ldr	r1, [r7, #4]
     47a:	2040      	movs	r0, #64	; 0x40
     47c:	01d2      	lsls	r2, r2, #7
     47e:	188a      	adds	r2, r1, r2
     480:	18d3      	adds	r3, r2, r3
     482:	181b      	adds	r3, r3, r0
     484:	1c22      	adds	r2, r4, #0
     486:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     488:	46c0      	nop			; (mov r8, r8)
     48a:	46bd      	mov	sp, r7
     48c:	b002      	add	sp, #8
     48e:	bdb0      	pop	{r4, r5, r7, pc}

00000490 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     490:	b5b0      	push	{r4, r5, r7, lr}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
     498:	0008      	movs	r0, r1
     49a:	0011      	movs	r1, r2
     49c:	1cfb      	adds	r3, r7, #3
     49e:	1c02      	adds	r2, r0, #0
     4a0:	701a      	strb	r2, [r3, #0]
     4a2:	1cbb      	adds	r3, r7, #2
     4a4:	1c0a      	adds	r2, r1, #0
     4a6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4a8:	1cfb      	adds	r3, r7, #3
     4aa:	781a      	ldrb	r2, [r3, #0]
     4ac:	1cbb      	adds	r3, r7, #2
     4ae:	781b      	ldrb	r3, [r3, #0]
     4b0:	1cf9      	adds	r1, r7, #3
     4b2:	7808      	ldrb	r0, [r1, #0]
     4b4:	1cb9      	adds	r1, r7, #2
     4b6:	7809      	ldrb	r1, [r1, #0]
     4b8:	687c      	ldr	r4, [r7, #4]
     4ba:	2540      	movs	r5, #64	; 0x40
     4bc:	01c0      	lsls	r0, r0, #7
     4be:	1820      	adds	r0, r4, r0
     4c0:	1841      	adds	r1, r0, r1
     4c2:	1949      	adds	r1, r1, r5
     4c4:	7809      	ldrb	r1, [r1, #0]
     4c6:	b2c9      	uxtb	r1, r1
     4c8:	2004      	movs	r0, #4
     4ca:	4381      	bics	r1, r0
     4cc:	b2cc      	uxtb	r4, r1
     4ce:	6879      	ldr	r1, [r7, #4]
     4d0:	2040      	movs	r0, #64	; 0x40
     4d2:	01d2      	lsls	r2, r2, #7
     4d4:	188a      	adds	r2, r1, r2
     4d6:	18d3      	adds	r3, r2, r3
     4d8:	181b      	adds	r3, r3, r0
     4da:	1c22      	adds	r2, r4, #0
     4dc:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	46bd      	mov	sp, r7
     4e2:	b002      	add	sp, #8
     4e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

000004e8 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     4e8:	b590      	push	{r4, r7, lr}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	0004      	movs	r4, r0
     4f0:	0008      	movs	r0, r1
     4f2:	0011      	movs	r1, r2
     4f4:	1dfb      	adds	r3, r7, #7
     4f6:	1c22      	adds	r2, r4, #0
     4f8:	701a      	strb	r2, [r3, #0]
     4fa:	1dbb      	adds	r3, r7, #6
     4fc:	1c02      	adds	r2, r0, #0
     4fe:	701a      	strb	r2, [r3, #0]
     500:	1d7b      	adds	r3, r7, #5
     502:	1c0a      	adds	r2, r1, #0
     504:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     506:	1d7b      	adds	r3, r7, #5
     508:	781b      	ldrb	r3, [r3, #0]
     50a:	2b01      	cmp	r3, #1
     50c:	d00c      	beq.n	528 <_gpio_set_pin_pull_mode+0x40>
     50e:	2b02      	cmp	r3, #2
     510:	d029      	beq.n	566 <_gpio_set_pin_pull_mode+0x7e>
     512:	2b00      	cmp	r3, #0
     514:	d146      	bne.n	5a4 <_gpio_set_pin_pull_mode+0xbc>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     516:	1dbb      	adds	r3, r7, #6
     518:	781a      	ldrb	r2, [r3, #0]
     51a:	1dfb      	adds	r3, r7, #7
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	4827      	ldr	r0, [pc, #156]	; (5bc <_gpio_set_pin_pull_mode+0xd4>)
     520:	0019      	movs	r1, r3
     522:	4b27      	ldr	r3, [pc, #156]	; (5c0 <_gpio_set_pin_pull_mode+0xd8>)
     524:	4798      	blx	r3
		break;
     526:	e044      	b.n	5b2 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     528:	1dbb      	adds	r3, r7, #6
     52a:	781b      	ldrb	r3, [r3, #0]
     52c:	2201      	movs	r2, #1
     52e:	409a      	lsls	r2, r3
     530:	1dfb      	adds	r3, r7, #7
     532:	7819      	ldrb	r1, [r3, #0]
     534:	23c0      	movs	r3, #192	; 0xc0
     536:	05db      	lsls	r3, r3, #23
     538:	0018      	movs	r0, r3
     53a:	4b22      	ldr	r3, [pc, #136]	; (5c4 <_gpio_set_pin_pull_mode+0xdc>)
     53c:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     53e:	1dbb      	adds	r3, r7, #6
     540:	781a      	ldrb	r2, [r3, #0]
     542:	1dfb      	adds	r3, r7, #7
     544:	781b      	ldrb	r3, [r3, #0]
     546:	481d      	ldr	r0, [pc, #116]	; (5bc <_gpio_set_pin_pull_mode+0xd4>)
     548:	0019      	movs	r1, r3
     54a:	4b1f      	ldr	r3, [pc, #124]	; (5c8 <_gpio_set_pin_pull_mode+0xe0>)
     54c:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     54e:	1dbb      	adds	r3, r7, #6
     550:	781b      	ldrb	r3, [r3, #0]
     552:	2201      	movs	r2, #1
     554:	409a      	lsls	r2, r3
     556:	1dfb      	adds	r3, r7, #7
     558:	7819      	ldrb	r1, [r3, #0]
     55a:	23c0      	movs	r3, #192	; 0xc0
     55c:	05db      	lsls	r3, r3, #23
     55e:	0018      	movs	r0, r3
     560:	4b1a      	ldr	r3, [pc, #104]	; (5cc <_gpio_set_pin_pull_mode+0xe4>)
     562:	4798      	blx	r3
		break;
     564:	e025      	b.n	5b2 <_gpio_set_pin_pull_mode+0xca>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     566:	1dbb      	adds	r3, r7, #6
     568:	781b      	ldrb	r3, [r3, #0]
     56a:	2201      	movs	r2, #1
     56c:	409a      	lsls	r2, r3
     56e:	1dfb      	adds	r3, r7, #7
     570:	7819      	ldrb	r1, [r3, #0]
     572:	23c0      	movs	r3, #192	; 0xc0
     574:	05db      	lsls	r3, r3, #23
     576:	0018      	movs	r0, r3
     578:	4b12      	ldr	r3, [pc, #72]	; (5c4 <_gpio_set_pin_pull_mode+0xdc>)
     57a:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     57c:	1dbb      	adds	r3, r7, #6
     57e:	781a      	ldrb	r2, [r3, #0]
     580:	1dfb      	adds	r3, r7, #7
     582:	781b      	ldrb	r3, [r3, #0]
     584:	480d      	ldr	r0, [pc, #52]	; (5bc <_gpio_set_pin_pull_mode+0xd4>)
     586:	0019      	movs	r1, r3
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <_gpio_set_pin_pull_mode+0xe0>)
     58a:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     58c:	1dbb      	adds	r3, r7, #6
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	2201      	movs	r2, #1
     592:	409a      	lsls	r2, r3
     594:	1dfb      	adds	r3, r7, #7
     596:	7819      	ldrb	r1, [r3, #0]
     598:	23c0      	movs	r3, #192	; 0xc0
     59a:	05db      	lsls	r3, r3, #23
     59c:	0018      	movs	r0, r3
     59e:	4b0c      	ldr	r3, [pc, #48]	; (5d0 <_gpio_set_pin_pull_mode+0xe8>)
     5a0:	4798      	blx	r3
		break;
     5a2:	e006      	b.n	5b2 <_gpio_set_pin_pull_mode+0xca>

	default:
		ASSERT(false);
     5a4:	4b0b      	ldr	r3, [pc, #44]	; (5d4 <_gpio_set_pin_pull_mode+0xec>)
     5a6:	2289      	movs	r2, #137	; 0x89
     5a8:	0019      	movs	r1, r3
     5aa:	2000      	movs	r0, #0
     5ac:	4b0a      	ldr	r3, [pc, #40]	; (5d8 <_gpio_set_pin_pull_mode+0xf0>)
     5ae:	4798      	blx	r3
		break;
     5b0:	46c0      	nop			; (mov r8, r8)
	}
}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	46bd      	mov	sp, r7
     5b6:	b003      	add	sp, #12
     5b8:	bd90      	pop	{r4, r7, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	40002800 	.word	0x40002800
     5c0:	00000491 	.word	0x00000491
     5c4:	00000227 	.word	0x00000227
     5c8:	0000043b 	.word	0x0000043b
     5cc:	00000253 	.word	0x00000253
     5d0:	0000027f 	.word	0x0000027f
     5d4:	000041bc 	.word	0x000041bc
     5d8:	00000cb9 	.word	0x00000cb9

000005dc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     5dc:	b590      	push	{r4, r7, lr}
     5de:	b085      	sub	sp, #20
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
     5e4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     5e6:	687b      	ldr	r3, [r7, #4]
     5e8:	095a      	lsrs	r2, r3, #5
     5ea:	230f      	movs	r3, #15
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	b2da      	uxtb	r2, r3
     5f4:	230e      	movs	r3, #14
     5f6:	18fb      	adds	r3, r7, r3
     5f8:	211f      	movs	r1, #31
     5fa:	400a      	ands	r2, r1
     5fc:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     5fe:	683b      	ldr	r3, [r7, #0]
     600:	3301      	adds	r3, #1
     602:	d10a      	bne.n	61a <_gpio_set_pin_function+0x3e>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     604:	230e      	movs	r3, #14
     606:	18fb      	adds	r3, r7, r3
     608:	781a      	ldrb	r2, [r3, #0]
     60a:	230f      	movs	r3, #15
     60c:	18fb      	adds	r3, r7, r3
     60e:	7819      	ldrb	r1, [r3, #0]
     610:	481b      	ldr	r0, [pc, #108]	; (680 <_gpio_set_pin_function+0xa4>)
     612:	2300      	movs	r3, #0
     614:	4c1b      	ldr	r4, [pc, #108]	; (684 <_gpio_set_pin_function+0xa8>)
     616:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     618:	e02e      	b.n	678 <_gpio_set_pin_function+0x9c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     61a:	230e      	movs	r3, #14
     61c:	18fb      	adds	r3, r7, r3
     61e:	781a      	ldrb	r2, [r3, #0]
     620:	230f      	movs	r3, #15
     622:	18fb      	adds	r3, r7, r3
     624:	7819      	ldrb	r1, [r3, #0]
     626:	4816      	ldr	r0, [pc, #88]	; (680 <_gpio_set_pin_function+0xa4>)
     628:	2301      	movs	r3, #1
     62a:	4c16      	ldr	r4, [pc, #88]	; (684 <_gpio_set_pin_function+0xa8>)
     62c:	47a0      	blx	r4
		if (pin & 1) {
     62e:	230e      	movs	r3, #14
     630:	18fb      	adds	r3, r7, r3
     632:	781b      	ldrb	r3, [r3, #0]
     634:	2201      	movs	r2, #1
     636:	4013      	ands	r3, r2
     638:	d00f      	beq.n	65a <_gpio_set_pin_function+0x7e>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     63a:	230e      	movs	r3, #14
     63c:	18fb      	adds	r3, r7, r3
     63e:	781b      	ldrb	r3, [r3, #0]
     640:	085b      	lsrs	r3, r3, #1
     642:	b2da      	uxtb	r2, r3
     644:	683b      	ldr	r3, [r7, #0]
     646:	b2d8      	uxtb	r0, r3
     648:	230f      	movs	r3, #15
     64a:	18fb      	adds	r3, r7, r3
     64c:	7819      	ldrb	r1, [r3, #0]
     64e:	4c0c      	ldr	r4, [pc, #48]	; (680 <_gpio_set_pin_function+0xa4>)
     650:	0003      	movs	r3, r0
     652:	0020      	movs	r0, r4
     654:	4c0c      	ldr	r4, [pc, #48]	; (688 <_gpio_set_pin_function+0xac>)
     656:	47a0      	blx	r4
}
     658:	e00e      	b.n	678 <_gpio_set_pin_function+0x9c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     65a:	230e      	movs	r3, #14
     65c:	18fb      	adds	r3, r7, r3
     65e:	781b      	ldrb	r3, [r3, #0]
     660:	085b      	lsrs	r3, r3, #1
     662:	b2da      	uxtb	r2, r3
     664:	683b      	ldr	r3, [r7, #0]
     666:	b2d8      	uxtb	r0, r3
     668:	230f      	movs	r3, #15
     66a:	18fb      	adds	r3, r7, r3
     66c:	7819      	ldrb	r1, [r3, #0]
     66e:	4c04      	ldr	r4, [pc, #16]	; (680 <_gpio_set_pin_function+0xa4>)
     670:	0003      	movs	r3, r0
     672:	0020      	movs	r0, r4
     674:	4c05      	ldr	r4, [pc, #20]	; (68c <_gpio_set_pin_function+0xb0>)
     676:	47a0      	blx	r4
}
     678:	46c0      	nop			; (mov r8, r8)
     67a:	46bd      	mov	sp, r7
     67c:	b005      	add	sp, #20
     67e:	bd90      	pop	{r4, r7, pc}
     680:	40002800 	.word	0x40002800
     684:	000003b9 	.word	0x000003b9
     688:	00000333 	.word	0x00000333
     68c:	000002ab 	.word	0x000002ab

00000690 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     690:	b580      	push	{r7, lr}
     692:	b082      	sub	sp, #8
     694:	af00      	add	r7, sp, #0
     696:	0002      	movs	r2, r0
     698:	1dfb      	adds	r3, r7, #7
     69a:	701a      	strb	r2, [r3, #0]
     69c:	1dbb      	adds	r3, r7, #6
     69e:	1c0a      	adds	r2, r1, #0
     6a0:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     6a2:	1dfb      	adds	r3, r7, #7
     6a4:	781b      	ldrb	r3, [r3, #0]
     6a6:	095b      	lsrs	r3, r3, #5
     6a8:	b2d8      	uxtb	r0, r3
     6aa:	1dfb      	adds	r3, r7, #7
     6ac:	781b      	ldrb	r3, [r3, #0]
     6ae:	221f      	movs	r2, #31
     6b0:	4013      	ands	r3, r2
     6b2:	b2d9      	uxtb	r1, r3
     6b4:	1dbb      	adds	r3, r7, #6
     6b6:	781b      	ldrb	r3, [r3, #0]
     6b8:	001a      	movs	r2, r3
     6ba:	4b03      	ldr	r3, [pc, #12]	; (6c8 <gpio_set_pin_pull_mode+0x38>)
     6bc:	4798      	blx	r3
}
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	46bd      	mov	sp, r7
     6c2:	b002      	add	sp, #8
     6c4:	bd80      	pop	{r7, pc}
     6c6:	46c0      	nop			; (mov r8, r8)
     6c8:	000004e9 	.word	0x000004e9

000006cc <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     6cc:	b580      	push	{r7, lr}
     6ce:	b082      	sub	sp, #8
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
     6d4:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     6d6:	683a      	ldr	r2, [r7, #0]
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	0011      	movs	r1, r2
     6dc:	0018      	movs	r0, r3
     6de:	4b03      	ldr	r3, [pc, #12]	; (6ec <gpio_set_pin_function+0x20>)
     6e0:	4798      	blx	r3
}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	46bd      	mov	sp, r7
     6e6:	b002      	add	sp, #8
     6e8:	bd80      	pop	{r7, pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	000005dd 	.word	0x000005dd

000006f0 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	af00      	add	r7, sp, #0
	_init_chip();
     6f4:	4b02      	ldr	r3, [pc, #8]	; (700 <init_mcu+0x10>)
     6f6:	4798      	blx	r3
}
     6f8:	46c0      	nop			; (mov r8, r8)
     6fa:	46bd      	mov	sp, r7
     6fc:	bd80      	pop	{r7, pc}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	00001065 	.word	0x00001065

00000704 <I2C_0_PORT_init>:
struct timer_descriptor TIMER_0;

struct i2c_m_sync_desc I2C_0;

void I2C_0_PORT_init(void)
{
     704:	b580      	push	{r7, lr}
     706:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PA16,
     708:	2101      	movs	r1, #1
     70a:	2010      	movs	r0, #16
     70c:	4b09      	ldr	r3, [pc, #36]	; (734 <I2C_0_PORT_init+0x30>)
     70e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA16, PINMUX_PA16D_SERCOM3_PAD0);
     710:	4b09      	ldr	r3, [pc, #36]	; (738 <I2C_0_PORT_init+0x34>)
     712:	0019      	movs	r1, r3
     714:	2010      	movs	r0, #16
     716:	4b09      	ldr	r3, [pc, #36]	; (73c <I2C_0_PORT_init+0x38>)
     718:	4798      	blx	r3

	gpio_set_pin_pull_mode(PA17,
     71a:	2101      	movs	r1, #1
     71c:	2011      	movs	r0, #17
     71e:	4b05      	ldr	r3, [pc, #20]	; (734 <I2C_0_PORT_init+0x30>)
     720:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD1);
     722:	4b07      	ldr	r3, [pc, #28]	; (740 <I2C_0_PORT_init+0x3c>)
     724:	0019      	movs	r1, r3
     726:	2011      	movs	r0, #17
     728:	4b04      	ldr	r3, [pc, #16]	; (73c <I2C_0_PORT_init+0x38>)
     72a:	4798      	blx	r3
}
     72c:	46c0      	nop			; (mov r8, r8)
     72e:	46bd      	mov	sp, r7
     730:	bd80      	pop	{r7, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	00000691 	.word	0x00000691
     738:	00100003 	.word	0x00100003
     73c:	000006cd 	.word	0x000006cd
     740:	00110003 	.word	0x00110003

00000744 <I2C_0_CLOCK_init>:

void I2C_0_CLOCK_init(void)
{
     744:	b580      	push	{r7, lr}
     746:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     748:	4b09      	ldr	r3, [pc, #36]	; (770 <I2C_0_CLOCK_init+0x2c>)
     74a:	2240      	movs	r2, #64	; 0x40
     74c:	2115      	movs	r1, #21
     74e:	0018      	movs	r0, r3
     750:	4b08      	ldr	r3, [pc, #32]	; (774 <I2C_0_CLOCK_init+0x30>)
     752:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     754:	4b06      	ldr	r3, [pc, #24]	; (770 <I2C_0_CLOCK_init+0x2c>)
     756:	2243      	movs	r2, #67	; 0x43
     758:	2111      	movs	r1, #17
     75a:	0018      	movs	r0, r3
     75c:	4b05      	ldr	r3, [pc, #20]	; (774 <I2C_0_CLOCK_init+0x30>)
     75e:	4798      	blx	r3

	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
     760:	4b05      	ldr	r3, [pc, #20]	; (778 <I2C_0_CLOCK_init+0x34>)
     762:	0018      	movs	r0, r3
     764:	4b05      	ldr	r3, [pc, #20]	; (77c <I2C_0_CLOCK_init+0x38>)
     766:	4798      	blx	r3
}
     768:	46c0      	nop			; (mov r8, r8)
     76a:	46bd      	mov	sp, r7
     76c:	bd80      	pop	{r7, pc}
     76e:	46c0      	nop			; (mov r8, r8)
     770:	40001800 	.word	0x40001800
     774:	000001c3 	.word	0x000001c3
     778:	40000400 	.word	0x40000400
     77c:	000001ed 	.word	0x000001ed

00000780 <I2C_0_init>:

void I2C_0_init(void)
{
     780:	b580      	push	{r7, lr}
     782:	af00      	add	r7, sp, #0
	I2C_0_CLOCK_init();
     784:	4b06      	ldr	r3, [pc, #24]	; (7a0 <I2C_0_init+0x20>)
     786:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM3);
     788:	4a06      	ldr	r2, [pc, #24]	; (7a4 <I2C_0_init+0x24>)
     78a:	4b07      	ldr	r3, [pc, #28]	; (7a8 <I2C_0_init+0x28>)
     78c:	0011      	movs	r1, r2
     78e:	0018      	movs	r0, r3
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <I2C_0_init+0x2c>)
     792:	4798      	blx	r3
	I2C_0_PORT_init();
     794:	4b06      	ldr	r3, [pc, #24]	; (7b0 <I2C_0_init+0x30>)
     796:	4798      	blx	r3
}
     798:	46c0      	nop			; (mov r8, r8)
     79a:	46bd      	mov	sp, r7
     79c:	bd80      	pop	{r7, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	00000745 	.word	0x00000745
     7a4:	42000c00 	.word	0x42000c00
     7a8:	20000058 	.word	0x20000058
     7ac:	00000931 	.word	0x00000931
     7b0:	00000705 	.word	0x00000705

000007b4 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
     7b4:	b580      	push	{r7, lr}
     7b6:	af00      	add	r7, sp, #0

	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
     7b8:	4b0a      	ldr	r3, [pc, #40]	; (7e4 <TIMER_0_init+0x30>)
     7ba:	0018      	movs	r0, r3
     7bc:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <TIMER_0_init+0x34>)
     7be:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     7c0:	4b0a      	ldr	r3, [pc, #40]	; (7ec <TIMER_0_init+0x38>)
     7c2:	2240      	movs	r2, #64	; 0x40
     7c4:	211b      	movs	r1, #27
     7c6:	0018      	movs	r0, r3
     7c8:	4b09      	ldr	r3, [pc, #36]	; (7f0 <TIMER_0_init+0x3c>)
     7ca:	4798      	blx	r3

	timer_init(&TIMER_0, TC0, _tc_get_timer());
     7cc:	4b09      	ldr	r3, [pc, #36]	; (7f4 <TIMER_0_init+0x40>)
     7ce:	4798      	blx	r3
     7d0:	0002      	movs	r2, r0
     7d2:	4909      	ldr	r1, [pc, #36]	; (7f8 <TIMER_0_init+0x44>)
     7d4:	4b09      	ldr	r3, [pc, #36]	; (7fc <TIMER_0_init+0x48>)
     7d6:	0018      	movs	r0, r3
     7d8:	4b09      	ldr	r3, [pc, #36]	; (800 <TIMER_0_init+0x4c>)
     7da:	4798      	blx	r3
}
     7dc:	46c0      	nop			; (mov r8, r8)
     7de:	46bd      	mov	sp, r7
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	40000400 	.word	0x40000400
     7e8:	00000209 	.word	0x00000209
     7ec:	40001800 	.word	0x40001800
     7f0:	000001c3 	.word	0x000001c3
     7f4:	00002775 	.word	0x00002775
     7f8:	42002000 	.word	0x42002000
     7fc:	20000078 	.word	0x20000078
     800:	00000acd 	.word	0x00000acd

00000804 <system_init>:

void system_init(void)
{
     804:	b580      	push	{r7, lr}
     806:	af00      	add	r7, sp, #0
	init_mcu();
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <system_init+0x18>)
     80a:	4798      	blx	r3

	I2C_0_init();
     80c:	4b04      	ldr	r3, [pc, #16]	; (820 <system_init+0x1c>)
     80e:	4798      	blx	r3

	TIMER_0_init();
     810:	4b04      	ldr	r3, [pc, #16]	; (824 <system_init+0x20>)
     812:	4798      	blx	r3
}
     814:	46c0      	nop			; (mov r8, r8)
     816:	46bd      	mov	sp, r7
     818:	bd80      	pop	{r7, pc}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	000006f1 	.word	0x000006f1
     820:	00000781 	.word	0x00000781
     824:	000007b5 	.word	0x000007b5

00000828 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     828:	b590      	push	{r4, r7, lr}
     82a:	b083      	sub	sp, #12
     82c:	af00      	add	r7, sp, #0
     82e:	0002      	movs	r2, r0
     830:	1dbb      	adds	r3, r7, #6
     832:	801a      	strh	r2, [r3, #0]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     834:	4b07      	ldr	r3, [pc, #28]	; (854 <delay_ms+0x2c>)
     836:	681c      	ldr	r4, [r3, #0]
     838:	1dbb      	adds	r3, r7, #6
     83a:	881b      	ldrh	r3, [r3, #0]
     83c:	0018      	movs	r0, r3
     83e:	4b06      	ldr	r3, [pc, #24]	; (858 <delay_ms+0x30>)
     840:	4798      	blx	r3
     842:	0003      	movs	r3, r0
     844:	0019      	movs	r1, r3
     846:	0020      	movs	r0, r4
     848:	4b04      	ldr	r3, [pc, #16]	; (85c <delay_ms+0x34>)
     84a:	4798      	blx	r3
}
     84c:	46c0      	nop			; (mov r8, r8)
     84e:	46bd      	mov	sp, r7
     850:	b003      	add	sp, #12
     852:	bd90      	pop	{r4, r7, pc}
     854:	20000048 	.word	0x20000048
     858:	00000ffd 	.word	0x00000ffd
     85c:	00001029 	.word	0x00001029

00000860 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
     860:	b580      	push	{r7, lr}
     862:	b08a      	sub	sp, #40	; 0x28
     864:	af00      	add	r7, sp, #0
     866:	60f8      	str	r0, [r7, #12]
     868:	60b9      	str	r1, [r7, #8]
     86a:	1dbb      	adds	r3, r7, #6
     86c:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
     86e:	68fb      	ldr	r3, [r7, #12]
     870:	3b14      	subs	r3, #20
     872:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     876:	8b9a      	ldrh	r2, [r3, #28]
     878:	2314      	movs	r3, #20
     87a:	18fb      	adds	r3, r7, r3
     87c:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     87e:	1dbb      	adds	r3, r7, #6
     880:	881a      	ldrh	r2, [r3, #0]
     882:	2314      	movs	r3, #20
     884:	18fb      	adds	r3, r7, r3
     886:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     888:	2314      	movs	r3, #20
     88a:	18fb      	adds	r3, r7, r3
     88c:	4a0c      	ldr	r2, [pc, #48]	; (8c0 <i2c_m_sync_read+0x60>)
     88e:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     890:	2314      	movs	r3, #20
     892:	18fb      	adds	r3, r7, r3
     894:	68ba      	ldr	r2, [r7, #8]
     896:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     89a:	2214      	movs	r2, #20
     89c:	18ba      	adds	r2, r7, r2
     89e:	0011      	movs	r1, r2
     8a0:	0018      	movs	r0, r3
     8a2:	4b08      	ldr	r3, [pc, #32]	; (8c4 <i2c_m_sync_read+0x64>)
     8a4:	4798      	blx	r3
     8a6:	0003      	movs	r3, r0
     8a8:	623b      	str	r3, [r7, #32]

	if (ret) {
     8aa:	6a3b      	ldr	r3, [r7, #32]
     8ac:	2b00      	cmp	r3, #0
     8ae:	d001      	beq.n	8b4 <i2c_m_sync_read+0x54>
		return ret;
     8b0:	6a3b      	ldr	r3, [r7, #32]
     8b2:	e001      	b.n	8b8 <i2c_m_sync_read+0x58>
	}

	return n;
     8b4:	1dbb      	adds	r3, r7, #6
     8b6:	881b      	ldrh	r3, [r3, #0]
}
     8b8:	0018      	movs	r0, r3
     8ba:	46bd      	mov	sp, r7
     8bc:	b00a      	add	sp, #40	; 0x28
     8be:	bd80      	pop	{r7, pc}
     8c0:	ffff8001 	.word	0xffff8001
     8c4:	00001e21 	.word	0x00001e21

000008c8 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     8c8:	b580      	push	{r7, lr}
     8ca:	b08a      	sub	sp, #40	; 0x28
     8cc:	af00      	add	r7, sp, #0
     8ce:	60f8      	str	r0, [r7, #12]
     8d0:	60b9      	str	r1, [r7, #8]
     8d2:	1dbb      	adds	r3, r7, #6
     8d4:	801a      	strh	r2, [r3, #0]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
     8d6:	68fb      	ldr	r3, [r7, #12]
     8d8:	3b14      	subs	r3, #20
     8da:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8de:	8b9a      	ldrh	r2, [r3, #28]
     8e0:	2314      	movs	r3, #20
     8e2:	18fb      	adds	r3, r7, r3
     8e4:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     8e6:	1dbb      	adds	r3, r7, #6
     8e8:	881a      	ldrh	r2, [r3, #0]
     8ea:	2314      	movs	r3, #20
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	605a      	str	r2, [r3, #4]
	msg.flags  = I2C_M_STOP;
     8f0:	2314      	movs	r3, #20
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	4a0c      	ldr	r2, [pc, #48]	; (928 <i2c_m_sync_write+0x60>)
     8f6:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     8f8:	2314      	movs	r3, #20
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	68ba      	ldr	r2, [r7, #8]
     8fe:	609a      	str	r2, [r3, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     902:	2214      	movs	r2, #20
     904:	18ba      	adds	r2, r7, r2
     906:	0011      	movs	r1, r2
     908:	0018      	movs	r0, r3
     90a:	4b08      	ldr	r3, [pc, #32]	; (92c <i2c_m_sync_write+0x64>)
     90c:	4798      	blx	r3
     90e:	0003      	movs	r3, r0
     910:	623b      	str	r3, [r7, #32]

	if (ret) {
     912:	6a3b      	ldr	r3, [r7, #32]
     914:	2b00      	cmp	r3, #0
     916:	d001      	beq.n	91c <i2c_m_sync_write+0x54>
		return ret;
     918:	6a3b      	ldr	r3, [r7, #32]
     91a:	e001      	b.n	920 <i2c_m_sync_write+0x58>
	}

	return n;
     91c:	1dbb      	adds	r3, r7, #6
     91e:	881b      	ldrh	r3, [r3, #0]
}
     920:	0018      	movs	r0, r3
     922:	46bd      	mov	sp, r7
     924:	b00a      	add	sp, #40	; 0x28
     926:	bd80      	pop	{r7, pc}
     928:	ffff8000 	.word	0xffff8000
     92c:	00001e21 	.word	0x00001e21

00000930 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     930:	b580      	push	{r7, lr}
     932:	b084      	sub	sp, #16
     934:	af00      	add	r7, sp, #0
     936:	6078      	str	r0, [r7, #4]
     938:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
     93a:	687b      	ldr	r3, [r7, #4]
     93c:	1e5a      	subs	r2, r3, #1
     93e:	4193      	sbcs	r3, r2
     940:	b2db      	uxtb	r3, r3
     942:	490e      	ldr	r1, [pc, #56]	; (97c <i2c_m_sync_init+0x4c>)
     944:	225e      	movs	r2, #94	; 0x5e
     946:	0018      	movs	r0, r3
     948:	4b0d      	ldr	r3, [pc, #52]	; (980 <i2c_m_sync_init+0x50>)
     94a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	683a      	ldr	r2, [r7, #0]
     950:	0011      	movs	r1, r2
     952:	0018      	movs	r0, r3
     954:	4b0b      	ldr	r3, [pc, #44]	; (984 <i2c_m_sync_init+0x54>)
     956:	4798      	blx	r3
     958:	0003      	movs	r3, r0
     95a:	60fb      	str	r3, [r7, #12]
	if (init_status) {
     95c:	68fb      	ldr	r3, [r7, #12]
     95e:	2b00      	cmp	r3, #0
     960:	d001      	beq.n	966 <i2c_m_sync_init+0x36>
		return init_status;
     962:	68fb      	ldr	r3, [r7, #12]
     964:	e006      	b.n	974 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     966:	687b      	ldr	r3, [r7, #4]
     968:	4a07      	ldr	r2, [pc, #28]	; (988 <i2c_m_sync_init+0x58>)
     96a:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	4a07      	ldr	r2, [pc, #28]	; (98c <i2c_m_sync_init+0x5c>)
     970:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
     972:	2300      	movs	r3, #0
}
     974:	0018      	movs	r0, r3
     976:	46bd      	mov	sp, r7
     978:	b004      	add	sp, #16
     97a:	bd80      	pop	{r7, pc}
     97c:	000041d8 	.word	0x000041d8
     980:	00000cb9 	.word	0x00000cb9
     984:	00001bfd 	.word	0x00001bfd
     988:	00000861 	.word	0x00000861
     98c:	000008c9 	.word	0x000008c9

00000990 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     990:	b580      	push	{r7, lr}
     992:	b082      	sub	sp, #8
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
     998:	687b      	ldr	r3, [r7, #4]
     99a:	0018      	movs	r0, r3
     99c:	4b03      	ldr	r3, [pc, #12]	; (9ac <i2c_m_sync_enable+0x1c>)
     99e:	4798      	blx	r3
     9a0:	0003      	movs	r3, r0
}
     9a2:	0018      	movs	r0, r3
     9a4:	46bd      	mov	sp, r7
     9a6:	b002      	add	sp, #8
     9a8:	bd80      	pop	{r7, pc}
     9aa:	46c0      	nop			; (mov r8, r8)
     9ac:	00001c45 	.word	0x00001c45

000009b0 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
     9b0:	b580      	push	{r7, lr}
     9b2:	b084      	sub	sp, #16
     9b4:	af00      	add	r7, sp, #0
     9b6:	60f8      	str	r0, [r7, #12]
     9b8:	607a      	str	r2, [r7, #4]
     9ba:	230a      	movs	r3, #10
     9bc:	18fb      	adds	r3, r7, r3
     9be:	1c0a      	adds	r2, r1, #0
     9c0:	801a      	strh	r2, [r3, #0]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     9c2:	230a      	movs	r3, #10
     9c4:	18fb      	adds	r3, r7, r3
     9c6:	881b      	ldrh	r3, [r3, #0]
     9c8:	059b      	lsls	r3, r3, #22
     9ca:	0d9b      	lsrs	r3, r3, #22
     9cc:	b21a      	sxth	r2, r3
     9ce:	687b      	ldr	r3, [r7, #4]
     9d0:	b219      	sxth	r1, r3
     9d2:	2380      	movs	r3, #128	; 0x80
     9d4:	00db      	lsls	r3, r3, #3
     9d6:	400b      	ands	r3, r1
     9d8:	b21b      	sxth	r3, r3
     9da:	4313      	orrs	r3, r2
     9dc:	b21b      	sxth	r3, r3
     9de:	b29a      	uxth	r2, r3
     9e0:	68fb      	ldr	r3, [r7, #12]
     9e2:	839a      	strh	r2, [r3, #28]
     9e4:	68fb      	ldr	r3, [r7, #12]
     9e6:	8b9b      	ldrh	r3, [r3, #28]
}
     9e8:	0018      	movs	r0, r3
     9ea:	46bd      	mov	sp, r7
     9ec:	b004      	add	sp, #16
     9ee:	bd80      	pop	{r7, pc}

000009f0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     9f0:	b580      	push	{r7, lr}
     9f2:	b084      	sub	sp, #16
     9f4:	af00      	add	r7, sp, #0
     9f6:	60f8      	str	r0, [r7, #12]
     9f8:	60b9      	str	r1, [r7, #8]
     9fa:	1dbb      	adds	r3, r7, #6
     9fc:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
     9fe:	68fb      	ldr	r3, [r7, #12]
     a00:	2b00      	cmp	r3, #0
     a02:	d004      	beq.n	a0e <io_write+0x1e>
     a04:	68bb      	ldr	r3, [r7, #8]
     a06:	2b00      	cmp	r3, #0
     a08:	d001      	beq.n	a0e <io_write+0x1e>
     a0a:	2301      	movs	r3, #1
     a0c:	e000      	b.n	a10 <io_write+0x20>
     a0e:	2300      	movs	r3, #0
     a10:	1c1a      	adds	r2, r3, #0
     a12:	2301      	movs	r3, #1
     a14:	4013      	ands	r3, r2
     a16:	b2db      	uxtb	r3, r3
     a18:	4908      	ldr	r1, [pc, #32]	; (a3c <io_write+0x4c>)
     a1a:	2234      	movs	r2, #52	; 0x34
     a1c:	0018      	movs	r0, r3
     a1e:	4b08      	ldr	r3, [pc, #32]	; (a40 <io_write+0x50>)
     a20:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	681b      	ldr	r3, [r3, #0]
     a26:	1dba      	adds	r2, r7, #6
     a28:	8812      	ldrh	r2, [r2, #0]
     a2a:	68b9      	ldr	r1, [r7, #8]
     a2c:	68f8      	ldr	r0, [r7, #12]
     a2e:	4798      	blx	r3
     a30:	0003      	movs	r3, r0
}
     a32:	0018      	movs	r0, r3
     a34:	46bd      	mov	sp, r7
     a36:	b004      	add	sp, #16
     a38:	bd80      	pop	{r7, pc}
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	000041f4 	.word	0x000041f4
     a40:	00000cb9 	.word	0x00000cb9

00000a44 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a44:	b580      	push	{r7, lr}
     a46:	b084      	sub	sp, #16
     a48:	af00      	add	r7, sp, #0
     a4a:	60f8      	str	r0, [r7, #12]
     a4c:	60b9      	str	r1, [r7, #8]
     a4e:	1dbb      	adds	r3, r7, #6
     a50:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	2b00      	cmp	r3, #0
     a56:	d004      	beq.n	a62 <io_read+0x1e>
     a58:	68bb      	ldr	r3, [r7, #8]
     a5a:	2b00      	cmp	r3, #0
     a5c:	d001      	beq.n	a62 <io_read+0x1e>
     a5e:	2301      	movs	r3, #1
     a60:	e000      	b.n	a64 <io_read+0x20>
     a62:	2300      	movs	r3, #0
     a64:	1c1a      	adds	r2, r3, #0
     a66:	2301      	movs	r3, #1
     a68:	4013      	ands	r3, r2
     a6a:	b2db      	uxtb	r3, r3
     a6c:	4908      	ldr	r1, [pc, #32]	; (a90 <io_read+0x4c>)
     a6e:	223d      	movs	r2, #61	; 0x3d
     a70:	0018      	movs	r0, r3
     a72:	4b08      	ldr	r3, [pc, #32]	; (a94 <io_read+0x50>)
     a74:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	685b      	ldr	r3, [r3, #4]
     a7a:	1dba      	adds	r2, r7, #6
     a7c:	8812      	ldrh	r2, [r2, #0]
     a7e:	68b9      	ldr	r1, [r7, #8]
     a80:	68f8      	ldr	r0, [r7, #12]
     a82:	4798      	blx	r3
     a84:	0003      	movs	r3, r0
}
     a86:	0018      	movs	r0, r3
     a88:	46bd      	mov	sp, r7
     a8a:	b004      	add	sp, #16
     a8c:	bd80      	pop	{r7, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	000041f4 	.word	0x000041f4
     a94:	00000cb9 	.word	0x00000cb9

00000a98 <list_get_head>:
 *
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
     a98:	b580      	push	{r7, lr}
     a9a:	b082      	sub	sp, #8
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
	return (void *)list->head;
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	681b      	ldr	r3, [r3, #0]
}
     aa4:	0018      	movs	r0, r3
     aa6:	46bd      	mov	sp, r7
     aa8:	b002      	add	sp, #8
     aaa:	bd80      	pop	{r7, pc}

00000aac <list_get_next_element>:
 *
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
	return element ? ((struct list_element *)element)->next : NULL;
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	2b00      	cmp	r3, #0
     ab8:	d002      	beq.n	ac0 <list_get_next_element+0x14>
     aba:	687b      	ldr	r3, [r7, #4]
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	e000      	b.n	ac2 <list_get_next_element+0x16>
     ac0:	2300      	movs	r3, #0
}
     ac2:	0018      	movs	r0, r3
     ac4:	46bd      	mov	sp, r7
     ac6:	b002      	add	sp, #8
     ac8:	bd80      	pop	{r7, pc}
	...

00000acc <timer_init>:

/**
 * \brief Initialize timer
 */
int32_t timer_init(struct timer_descriptor *const descr, void *const hw, struct _timer_hpl_interface *const func)
{
     acc:	b580      	push	{r7, lr}
     ace:	b084      	sub	sp, #16
     ad0:	af00      	add	r7, sp, #0
     ad2:	60f8      	str	r0, [r7, #12]
     ad4:	60b9      	str	r1, [r7, #8]
     ad6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	2b00      	cmp	r3, #0
     adc:	d004      	beq.n	ae8 <timer_init+0x1c>
     ade:	68bb      	ldr	r3, [r7, #8]
     ae0:	2b00      	cmp	r3, #0
     ae2:	d001      	beq.n	ae8 <timer_init+0x1c>
     ae4:	2301      	movs	r3, #1
     ae6:	e000      	b.n	aea <timer_init+0x1e>
     ae8:	2300      	movs	r3, #0
     aea:	1c1a      	adds	r2, r3, #0
     aec:	2301      	movs	r3, #1
     aee:	4013      	ands	r3, r2
     af0:	b2db      	uxtb	r3, r3
     af2:	490b      	ldr	r1, [pc, #44]	; (b20 <timer_init+0x54>)
     af4:	223b      	movs	r2, #59	; 0x3b
     af6:	0018      	movs	r0, r3
     af8:	4b0a      	ldr	r3, [pc, #40]	; (b24 <timer_init+0x58>)
     afa:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     afc:	68fb      	ldr	r3, [r7, #12]
     afe:	68ba      	ldr	r2, [r7, #8]
     b00:	0011      	movs	r1, r2
     b02:	0018      	movs	r0, r3
     b04:	4b08      	ldr	r3, [pc, #32]	; (b28 <timer_init+0x5c>)
     b06:	4798      	blx	r3
	descr->time                           = 0;
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	2200      	movs	r2, #0
     b0c:	611a      	str	r2, [r3, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     b0e:	68fb      	ldr	r3, [r7, #12]
     b10:	4a06      	ldr	r2, [pc, #24]	; (b2c <timer_init+0x60>)
     b12:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     b14:	2300      	movs	r3, #0
}
     b16:	0018      	movs	r0, r3
     b18:	46bd      	mov	sp, r7
     b1a:	b004      	add	sp, #16
     b1c:	bd80      	pop	{r7, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	00004208 	.word	0x00004208
     b24:	00000cb9 	.word	0x00000cb9
     b28:	00002461 	.word	0x00002461
     b2c:	00000bf5 	.word	0x00000bf5

00000b30 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     b30:	b580      	push	{r7, lr}
     b32:	b088      	sub	sp, #32
     b34:	af00      	add	r7, sp, #0
     b36:	60f8      	str	r0, [r7, #12]
     b38:	60b9      	str	r1, [r7, #8]
     b3a:	607a      	str	r2, [r7, #4]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);
     b3c:	2300      	movs	r3, #0
     b3e:	61bb      	str	r3, [r7, #24]
     b40:	68fb      	ldr	r3, [r7, #12]
     b42:	0018      	movs	r0, r3
     b44:	4b27      	ldr	r3, [pc, #156]	; (be4 <timer_add_timer_task+0xb4>)
     b46:	4798      	blx	r3
     b48:	0003      	movs	r3, r0
     b4a:	613b      	str	r3, [r7, #16]

	if (!head) {
     b4c:	693b      	ldr	r3, [r7, #16]
     b4e:	2b00      	cmp	r3, #0
     b50:	d106      	bne.n	b60 <timer_add_timer_task+0x30>
		list_insert_as_head(list, new_task);
     b52:	68ba      	ldr	r2, [r7, #8]
     b54:	68fb      	ldr	r3, [r7, #12]
     b56:	0011      	movs	r1, r2
     b58:	0018      	movs	r0, r3
     b5a:	4b23      	ldr	r3, [pc, #140]	; (be8 <timer_add_timer_task+0xb8>)
     b5c:	4798      	blx	r3
		return;
     b5e:	e03d      	b.n	bdc <timer_add_timer_task+0xac>
	}

	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     b60:	693b      	ldr	r3, [r7, #16]
     b62:	61fb      	str	r3, [r7, #28]
     b64:	e024      	b.n	bb0 <timer_add_timer_task+0x80>
		uint32_t time_left;

		if (it->time_label <= time) {
     b66:	69fb      	ldr	r3, [r7, #28]
     b68:	685a      	ldr	r2, [r3, #4]
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	429a      	cmp	r2, r3
     b6e:	d808      	bhi.n	b82 <timer_add_timer_task+0x52>
			time_left = it->interval - (time - it->time_label);
     b70:	69fb      	ldr	r3, [r7, #28]
     b72:	689a      	ldr	r2, [r3, #8]
     b74:	69fb      	ldr	r3, [r7, #28]
     b76:	6859      	ldr	r1, [r3, #4]
     b78:	687b      	ldr	r3, [r7, #4]
     b7a:	1acb      	subs	r3, r1, r3
     b7c:	18d3      	adds	r3, r2, r3
     b7e:	617b      	str	r3, [r7, #20]
     b80:	e009      	b.n	b96 <timer_add_timer_task+0x66>
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b82:	69fb      	ldr	r3, [r7, #28]
     b84:	689a      	ldr	r2, [r3, #8]
     b86:	69fb      	ldr	r3, [r7, #28]
     b88:	685b      	ldr	r3, [r3, #4]
     b8a:	18d2      	adds	r2, r2, r3
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	425b      	negs	r3, r3
     b90:	18d3      	adds	r3, r2, r3
     b92:	3301      	adds	r3, #1
     b94:	617b      	str	r3, [r7, #20]
		}
		if (time_left >= new_task->interval)
     b96:	68bb      	ldr	r3, [r7, #8]
     b98:	689a      	ldr	r2, [r3, #8]
     b9a:	697b      	ldr	r3, [r7, #20]
     b9c:	429a      	cmp	r2, r3
     b9e:	d90b      	bls.n	bb8 <timer_add_timer_task+0x88>
			break;
		prev = it;
     ba0:	69fb      	ldr	r3, [r7, #28]
     ba2:	61bb      	str	r3, [r7, #24]
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     ba4:	69fb      	ldr	r3, [r7, #28]
     ba6:	0018      	movs	r0, r3
     ba8:	4b10      	ldr	r3, [pc, #64]	; (bec <timer_add_timer_task+0xbc>)
     baa:	4798      	blx	r3
     bac:	0003      	movs	r3, r0
     bae:	61fb      	str	r3, [r7, #28]
     bb0:	69fb      	ldr	r3, [r7, #28]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d1d7      	bne.n	b66 <timer_add_timer_task+0x36>
     bb6:	e000      	b.n	bba <timer_add_timer_task+0x8a>
			break;
     bb8:	46c0      	nop			; (mov r8, r8)
	}

	if (it == head) {
     bba:	69fa      	ldr	r2, [r7, #28]
     bbc:	693b      	ldr	r3, [r7, #16]
     bbe:	429a      	cmp	r2, r3
     bc0:	d106      	bne.n	bd0 <timer_add_timer_task+0xa0>
		list_insert_as_head(list, new_task);
     bc2:	68ba      	ldr	r2, [r7, #8]
     bc4:	68fb      	ldr	r3, [r7, #12]
     bc6:	0011      	movs	r1, r2
     bc8:	0018      	movs	r0, r3
     bca:	4b07      	ldr	r3, [pc, #28]	; (be8 <timer_add_timer_task+0xb8>)
     bcc:	4798      	blx	r3
     bce:	e005      	b.n	bdc <timer_add_timer_task+0xac>
	} else {
		list_insert_after(prev, new_task);
     bd0:	68ba      	ldr	r2, [r7, #8]
     bd2:	69bb      	ldr	r3, [r7, #24]
     bd4:	0011      	movs	r1, r2
     bd6:	0018      	movs	r0, r3
     bd8:	4b05      	ldr	r3, [pc, #20]	; (bf0 <timer_add_timer_task+0xc0>)
     bda:	4798      	blx	r3
	}
}
     bdc:	46bd      	mov	sp, r7
     bde:	b008      	add	sp, #32
     be0:	bd80      	pop	{r7, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	00000a99 	.word	0x00000a99
     be8:	00000d19 	.word	0x00000d19
     bec:	00000aad 	.word	0x00000aad
     bf0:	00000d71 	.word	0x00000d71

00000bf4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     bf4:	b580      	push	{r7, lr}
     bf6:	b086      	sub	sp, #24
     bf8:	af00      	add	r7, sp, #0
     bfa:	6078      	str	r0, [r7, #4]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
     bfc:	687b      	ldr	r3, [r7, #4]
     bfe:	613b      	str	r3, [r7, #16]
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
     c00:	693b      	ldr	r3, [r7, #16]
     c02:	3314      	adds	r3, #20
     c04:	0018      	movs	r0, r3
     c06:	4b29      	ldr	r3, [pc, #164]	; (cac <timer_process_counted+0xb8>)
     c08:	4798      	blx	r3
     c0a:	0003      	movs	r3, r0
     c0c:	617b      	str	r3, [r7, #20]
	uint32_t                 time  = ++timer->time;
     c0e:	693b      	ldr	r3, [r7, #16]
     c10:	691b      	ldr	r3, [r3, #16]
     c12:	1c5a      	adds	r2, r3, #1
     c14:	693b      	ldr	r3, [r7, #16]
     c16:	611a      	str	r2, [r3, #16]
     c18:	693b      	ldr	r3, [r7, #16]
     c1a:	691b      	ldr	r3, [r3, #16]
     c1c:	60fb      	str	r3, [r7, #12]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c1e:	693b      	ldr	r3, [r7, #16]
     c20:	7e1b      	ldrb	r3, [r3, #24]
     c22:	b2db      	uxtb	r3, r3
     c24:	001a      	movs	r2, r3
     c26:	2301      	movs	r3, #1
     c28:	4013      	ands	r3, r2
     c2a:	d106      	bne.n	c3a <timer_process_counted+0x46>
     c2c:	693b      	ldr	r3, [r7, #16]
     c2e:	7e1b      	ldrb	r3, [r3, #24]
     c30:	b2db      	uxtb	r3, r3
     c32:	001a      	movs	r2, r3
     c34:	2302      	movs	r3, #2
     c36:	4013      	ands	r3, r2
     c38:	d029      	beq.n	c8e <timer_process_counted+0x9a>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c3a:	693b      	ldr	r3, [r7, #16]
     c3c:	7e1b      	ldrb	r3, [r3, #24]
     c3e:	b2db      	uxtb	r3, r3
     c40:	2202      	movs	r2, #2
     c42:	4313      	orrs	r3, r2
     c44:	b2da      	uxtb	r2, r3
     c46:	693b      	ldr	r3, [r7, #16]
     c48:	761a      	strb	r2, [r3, #24]
		return;
     c4a:	e02b      	b.n	ca4 <timer_process_counted+0xb0>
	}

	while (it && ((time - it->time_label) >= it->interval)) {
		struct timer_task *tmp = it;
     c4c:	697b      	ldr	r3, [r7, #20]
     c4e:	60bb      	str	r3, [r7, #8]

		list_remove_head(&timer->tasks);
     c50:	693b      	ldr	r3, [r7, #16]
     c52:	3314      	adds	r3, #20
     c54:	0018      	movs	r0, r3
     c56:	4b16      	ldr	r3, [pc, #88]	; (cb0 <timer_process_counted+0xbc>)
     c58:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     c5a:	68bb      	ldr	r3, [r7, #8]
     c5c:	7c1b      	ldrb	r3, [r3, #16]
     c5e:	2b01      	cmp	r3, #1
     c60:	d109      	bne.n	c76 <timer_process_counted+0x82>
			tmp->time_label = time;
     c62:	68bb      	ldr	r3, [r7, #8]
     c64:	68fa      	ldr	r2, [r7, #12]
     c66:	605a      	str	r2, [r3, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     c68:	693b      	ldr	r3, [r7, #16]
     c6a:	3314      	adds	r3, #20
     c6c:	68fa      	ldr	r2, [r7, #12]
     c6e:	68b9      	ldr	r1, [r7, #8]
     c70:	0018      	movs	r0, r3
     c72:	4b10      	ldr	r3, [pc, #64]	; (cb4 <timer_process_counted+0xc0>)
     c74:	4798      	blx	r3
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);
     c76:	693b      	ldr	r3, [r7, #16]
     c78:	3314      	adds	r3, #20
     c7a:	0018      	movs	r0, r3
     c7c:	4b0b      	ldr	r3, [pc, #44]	; (cac <timer_process_counted+0xb8>)
     c7e:	4798      	blx	r3
     c80:	0003      	movs	r3, r0
     c82:	617b      	str	r3, [r7, #20]

		tmp->cb(tmp);
     c84:	68bb      	ldr	r3, [r7, #8]
     c86:	68db      	ldr	r3, [r3, #12]
     c88:	68ba      	ldr	r2, [r7, #8]
     c8a:	0010      	movs	r0, r2
     c8c:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     c8e:	697b      	ldr	r3, [r7, #20]
     c90:	2b00      	cmp	r3, #0
     c92:	d007      	beq.n	ca4 <timer_process_counted+0xb0>
     c94:	697b      	ldr	r3, [r7, #20]
     c96:	685b      	ldr	r3, [r3, #4]
     c98:	68fa      	ldr	r2, [r7, #12]
     c9a:	1ad2      	subs	r2, r2, r3
     c9c:	697b      	ldr	r3, [r7, #20]
     c9e:	689b      	ldr	r3, [r3, #8]
     ca0:	429a      	cmp	r2, r3
     ca2:	d2d3      	bcs.n	c4c <timer_process_counted+0x58>
	}
}
     ca4:	46bd      	mov	sp, r7
     ca6:	b006      	add	sp, #24
     ca8:	bd80      	pop	{r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	00000a99 	.word	0x00000a99
     cb0:	00000d91 	.word	0x00000d91
     cb4:	00000b31 	.word	0x00000b31

00000cb8 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b084      	sub	sp, #16
     cbc:	af00      	add	r7, sp, #0
     cbe:	60b9      	str	r1, [r7, #8]
     cc0:	607a      	str	r2, [r7, #4]
     cc2:	230f      	movs	r3, #15
     cc4:	18fb      	adds	r3, r7, r3
     cc6:	1c02      	adds	r2, r0, #0
     cc8:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
     cca:	230f      	movs	r3, #15
     ccc:	18fb      	adds	r3, r7, r3
     cce:	781b      	ldrb	r3, [r3, #0]
     cd0:	2201      	movs	r2, #1
     cd2:	4053      	eors	r3, r2
     cd4:	b2db      	uxtb	r3, r3
     cd6:	2b00      	cmp	r3, #0
     cd8:	d000      	beq.n	cdc <assert+0x24>
		__asm("BKPT #0");
     cda:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     cdc:	46c0      	nop			; (mov r8, r8)
     cde:	46bd      	mov	sp, r7
     ce0:	b004      	add	sp, #16
     ce2:	bd80      	pop	{r7, pc}

00000ce4 <is_list_element>:

/**
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
     ce4:	b580      	push	{r7, lr}
     ce6:	b084      	sub	sp, #16
     ce8:	af00      	add	r7, sp, #0
     cea:	6078      	str	r0, [r7, #4]
     cec:	6039      	str	r1, [r7, #0]
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     cee:	687b      	ldr	r3, [r7, #4]
     cf0:	681b      	ldr	r3, [r3, #0]
     cf2:	60fb      	str	r3, [r7, #12]
     cf4:	e008      	b.n	d08 <is_list_element+0x24>
		if (it == element) {
     cf6:	68fa      	ldr	r2, [r7, #12]
     cf8:	683b      	ldr	r3, [r7, #0]
     cfa:	429a      	cmp	r2, r3
     cfc:	d101      	bne.n	d02 <is_list_element+0x1e>
			return true;
     cfe:	2301      	movs	r3, #1
     d00:	e006      	b.n	d10 <is_list_element+0x2c>
	for (it = list->head; it; it = it->next) {
     d02:	68fb      	ldr	r3, [r7, #12]
     d04:	681b      	ldr	r3, [r3, #0]
     d06:	60fb      	str	r3, [r7, #12]
     d08:	68fb      	ldr	r3, [r7, #12]
     d0a:	2b00      	cmp	r3, #0
     d0c:	d1f3      	bne.n	cf6 <is_list_element+0x12>
		}
	}

	return false;
     d0e:	2300      	movs	r3, #0
}
     d10:	0018      	movs	r0, r3
     d12:	46bd      	mov	sp, r7
     d14:	b004      	add	sp, #16
     d16:	bd80      	pop	{r7, pc}

00000d18 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     d18:	b580      	push	{r7, lr}
     d1a:	b082      	sub	sp, #8
     d1c:	af00      	add	r7, sp, #0
     d1e:	6078      	str	r0, [r7, #4]
     d20:	6039      	str	r1, [r7, #0]
	ASSERT(!is_list_element(list, element));
     d22:	683a      	ldr	r2, [r7, #0]
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	0011      	movs	r1, r2
     d28:	0018      	movs	r0, r3
     d2a:	4b0e      	ldr	r3, [pc, #56]	; (d64 <list_insert_as_head+0x4c>)
     d2c:	4798      	blx	r3
     d2e:	0003      	movs	r3, r0
     d30:	1e5a      	subs	r2, r3, #1
     d32:	4193      	sbcs	r3, r2
     d34:	b2db      	uxtb	r3, r3
     d36:	2201      	movs	r2, #1
     d38:	4053      	eors	r3, r2
     d3a:	b2db      	uxtb	r3, r3
     d3c:	1c1a      	adds	r2, r3, #0
     d3e:	2301      	movs	r3, #1
     d40:	4013      	ands	r3, r2
     d42:	b2db      	uxtb	r3, r3
     d44:	4908      	ldr	r1, [pc, #32]	; (d68 <list_insert_as_head+0x50>)
     d46:	2239      	movs	r2, #57	; 0x39
     d48:	0018      	movs	r0, r3
     d4a:	4b08      	ldr	r3, [pc, #32]	; (d6c <list_insert_as_head+0x54>)
     d4c:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     d4e:	687b      	ldr	r3, [r7, #4]
     d50:	681a      	ldr	r2, [r3, #0]
     d52:	683b      	ldr	r3, [r7, #0]
     d54:	601a      	str	r2, [r3, #0]
	list->head                             = (struct list_element *)element;
     d56:	687b      	ldr	r3, [r7, #4]
     d58:	683a      	ldr	r2, [r7, #0]
     d5a:	601a      	str	r2, [r3, #0]
}
     d5c:	46c0      	nop			; (mov r8, r8)
     d5e:	46bd      	mov	sp, r7
     d60:	b002      	add	sp, #8
     d62:	bd80      	pop	{r7, pc}
     d64:	00000ce5 	.word	0x00000ce5
     d68:	00004220 	.word	0x00004220
     d6c:	00000cb9 	.word	0x00000cb9

00000d70 <list_insert_after>:

/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
     d70:	b580      	push	{r7, lr}
     d72:	b082      	sub	sp, #8
     d74:	af00      	add	r7, sp, #0
     d76:	6078      	str	r0, [r7, #4]
     d78:	6039      	str	r1, [r7, #0]
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	681a      	ldr	r2, [r3, #0]
     d7e:	683b      	ldr	r3, [r7, #0]
     d80:	601a      	str	r2, [r3, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     d82:	687b      	ldr	r3, [r7, #4]
     d84:	683a      	ldr	r2, [r7, #0]
     d86:	601a      	str	r2, [r3, #0]
}
     d88:	46c0      	nop			; (mov r8, r8)
     d8a:	46bd      	mov	sp, r7
     d8c:	b002      	add	sp, #8
     d8e:	bd80      	pop	{r7, pc}

00000d90 <list_remove_head>:

/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
     d90:	b580      	push	{r7, lr}
     d92:	b084      	sub	sp, #16
     d94:	af00      	add	r7, sp, #0
     d96:	6078      	str	r0, [r7, #4]
	if (list->head) {
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	681b      	ldr	r3, [r3, #0]
     d9c:	2b00      	cmp	r3, #0
     d9e:	d009      	beq.n	db4 <list_remove_head+0x24>
		struct list_element *tmp = list->head;
     da0:	687b      	ldr	r3, [r7, #4]
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	60fb      	str	r3, [r7, #12]

		list->head = list->head->next;
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	681b      	ldr	r3, [r3, #0]
     daa:	681a      	ldr	r2, [r3, #0]
     dac:	687b      	ldr	r3, [r7, #4]
     dae:	601a      	str	r2, [r3, #0]
		return (void *)tmp;
     db0:	68fb      	ldr	r3, [r7, #12]
     db2:	e000      	b.n	db6 <list_remove_head+0x26>
	}

	return NULL;
     db4:	2300      	movs	r3, #0
}
     db6:	0018      	movs	r0, r3
     db8:	46bd      	mov	sp, r7
     dba:	b004      	add	sp, #16
     dbc:	bd80      	pop	{r7, pc}
	...

00000dc0 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
     dc0:	b590      	push	{r4, r7, lr}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6039      	str	r1, [r7, #0]
     dc8:	0011      	movs	r1, r2
     dca:	1dbb      	adds	r3, r7, #6
     dcc:	1c02      	adds	r2, r0, #0
     dce:	801a      	strh	r2, [r3, #0]
     dd0:	1d7b      	adds	r3, r7, #5
     dd2:	1c0a      	adds	r2, r1, #0
     dd4:	701a      	strb	r2, [r3, #0]
	switch (power) {
     dd6:	1d7b      	adds	r3, r7, #5
     dd8:	781b      	ldrb	r3, [r3, #0]
     dda:	3b04      	subs	r3, #4
     ddc:	2b04      	cmp	r3, #4
     dde:	d85a      	bhi.n	e96 <_get_cycles_for_us_internal+0xd6>
     de0:	009a      	lsls	r2, r3, #2
     de2:	4b34      	ldr	r3, [pc, #208]	; (eb4 <_get_cycles_for_us_internal+0xf4>)
     de4:	18d3      	adds	r3, r2, r3
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	469f      	mov	pc, r3
	case 8:
		return (us * (freq / 100000) + 29) / 30;
     dea:	1dbb      	adds	r3, r7, #6
     dec:	881c      	ldrh	r4, [r3, #0]
     dee:	683a      	ldr	r2, [r7, #0]
     df0:	4b31      	ldr	r3, [pc, #196]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     df2:	4932      	ldr	r1, [pc, #200]	; (ebc <_get_cycles_for_us_internal+0xfc>)
     df4:	0010      	movs	r0, r2
     df6:	4798      	blx	r3
     df8:	0003      	movs	r3, r0
     dfa:	4363      	muls	r3, r4
     dfc:	331d      	adds	r3, #29
     dfe:	001a      	movs	r2, r3
     e00:	4b2d      	ldr	r3, [pc, #180]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e02:	211e      	movs	r1, #30
     e04:	0010      	movs	r0, r2
     e06:	4798      	blx	r3
     e08:	0003      	movs	r3, r0
     e0a:	e04f      	b.n	eac <_get_cycles_for_us_internal+0xec>
	case 7:
		return (us * (freq / 10000) + 299) / 300;
     e0c:	1dbb      	adds	r3, r7, #6
     e0e:	881c      	ldrh	r4, [r3, #0]
     e10:	683a      	ldr	r2, [r7, #0]
     e12:	4b29      	ldr	r3, [pc, #164]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e14:	492a      	ldr	r1, [pc, #168]	; (ec0 <_get_cycles_for_us_internal+0x100>)
     e16:	0010      	movs	r0, r2
     e18:	4798      	blx	r3
     e1a:	0003      	movs	r3, r0
     e1c:	4363      	muls	r3, r4
     e1e:	332c      	adds	r3, #44	; 0x2c
     e20:	33ff      	adds	r3, #255	; 0xff
     e22:	0018      	movs	r0, r3
     e24:	4b24      	ldr	r3, [pc, #144]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e26:	2296      	movs	r2, #150	; 0x96
     e28:	0051      	lsls	r1, r2, #1
     e2a:	4798      	blx	r3
     e2c:	0003      	movs	r3, r0
     e2e:	e03d      	b.n	eac <_get_cycles_for_us_internal+0xec>
	case 6:
		return (us * (freq / 1000) + 2999) / 3000;
     e30:	1dbb      	adds	r3, r7, #6
     e32:	881c      	ldrh	r4, [r3, #0]
     e34:	6838      	ldr	r0, [r7, #0]
     e36:	4b20      	ldr	r3, [pc, #128]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e38:	22fa      	movs	r2, #250	; 0xfa
     e3a:	0091      	lsls	r1, r2, #2
     e3c:	4798      	blx	r3
     e3e:	0003      	movs	r3, r0
     e40:	4363      	muls	r3, r4
     e42:	4a20      	ldr	r2, [pc, #128]	; (ec4 <_get_cycles_for_us_internal+0x104>)
     e44:	189a      	adds	r2, r3, r2
     e46:	4b1c      	ldr	r3, [pc, #112]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e48:	491f      	ldr	r1, [pc, #124]	; (ec8 <_get_cycles_for_us_internal+0x108>)
     e4a:	0010      	movs	r0, r2
     e4c:	4798      	blx	r3
     e4e:	0003      	movs	r3, r0
     e50:	e02c      	b.n	eac <_get_cycles_for_us_internal+0xec>
	case 5:
		return (us * (freq / 100) + 29999) / 30000;
     e52:	1dbb      	adds	r3, r7, #6
     e54:	881c      	ldrh	r4, [r3, #0]
     e56:	683a      	ldr	r2, [r7, #0]
     e58:	4b17      	ldr	r3, [pc, #92]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e5a:	2164      	movs	r1, #100	; 0x64
     e5c:	0010      	movs	r0, r2
     e5e:	4798      	blx	r3
     e60:	0003      	movs	r3, r0
     e62:	4363      	muls	r3, r4
     e64:	4a19      	ldr	r2, [pc, #100]	; (ecc <_get_cycles_for_us_internal+0x10c>)
     e66:	189a      	adds	r2, r3, r2
     e68:	4b13      	ldr	r3, [pc, #76]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e6a:	4919      	ldr	r1, [pc, #100]	; (ed0 <_get_cycles_for_us_internal+0x110>)
     e6c:	0010      	movs	r0, r2
     e6e:	4798      	blx	r3
     e70:	0003      	movs	r3, r0
     e72:	e01b      	b.n	eac <_get_cycles_for_us_internal+0xec>
	case 4:
		return (us * (freq / 10) + 299999) / 300000;
     e74:	1dbb      	adds	r3, r7, #6
     e76:	881c      	ldrh	r4, [r3, #0]
     e78:	683a      	ldr	r2, [r7, #0]
     e7a:	4b0f      	ldr	r3, [pc, #60]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e7c:	210a      	movs	r1, #10
     e7e:	0010      	movs	r0, r2
     e80:	4798      	blx	r3
     e82:	0003      	movs	r3, r0
     e84:	4363      	muls	r3, r4
     e86:	4a13      	ldr	r2, [pc, #76]	; (ed4 <_get_cycles_for_us_internal+0x114>)
     e88:	189a      	adds	r2, r3, r2
     e8a:	4b0b      	ldr	r3, [pc, #44]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     e8c:	4912      	ldr	r1, [pc, #72]	; (ed8 <_get_cycles_for_us_internal+0x118>)
     e8e:	0010      	movs	r0, r2
     e90:	4798      	blx	r3
     e92:	0003      	movs	r3, r0
     e94:	e00a      	b.n	eac <_get_cycles_for_us_internal+0xec>
	default:
		return (us * freq + 2999999) / 3000000;
     e96:	1dbb      	adds	r3, r7, #6
     e98:	881b      	ldrh	r3, [r3, #0]
     e9a:	683a      	ldr	r2, [r7, #0]
     e9c:	4353      	muls	r3, r2
     e9e:	4a0f      	ldr	r2, [pc, #60]	; (edc <_get_cycles_for_us_internal+0x11c>)
     ea0:	189a      	adds	r2, r3, r2
     ea2:	4b05      	ldr	r3, [pc, #20]	; (eb8 <_get_cycles_for_us_internal+0xf8>)
     ea4:	490e      	ldr	r1, [pc, #56]	; (ee0 <_get_cycles_for_us_internal+0x120>)
     ea6:	0010      	movs	r0, r2
     ea8:	4798      	blx	r3
     eaa:	0003      	movs	r3, r0
	}
}
     eac:	0018      	movs	r0, r3
     eae:	46bd      	mov	sp, r7
     eb0:	b003      	add	sp, #12
     eb2:	bd90      	pop	{r4, r7, pc}
     eb4:	00004264 	.word	0x00004264
     eb8:	00003321 	.word	0x00003321
     ebc:	000186a0 	.word	0x000186a0
     ec0:	00002710 	.word	0x00002710
     ec4:	00000bb7 	.word	0x00000bb7
     ec8:	00000bb8 	.word	0x00000bb8
     ecc:	0000752f 	.word	0x0000752f
     ed0:	00007530 	.word	0x00007530
     ed4:	000493df 	.word	0x000493df
     ed8:	000493e0 	.word	0x000493e0
     edc:	002dc6bf 	.word	0x002dc6bf
     ee0:	002dc6c0 	.word	0x002dc6c0

00000ee4 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
     ee4:	b590      	push	{r4, r7, lr}
     ee6:	b083      	sub	sp, #12
     ee8:	af00      	add	r7, sp, #0
     eea:	6039      	str	r1, [r7, #0]
     eec:	0011      	movs	r1, r2
     eee:	1dbb      	adds	r3, r7, #6
     ef0:	1c02      	adds	r2, r0, #0
     ef2:	801a      	strh	r2, [r3, #0]
     ef4:	1d7b      	adds	r3, r7, #5
     ef6:	1c0a      	adds	r2, r1, #0
     ef8:	701a      	strb	r2, [r3, #0]
	switch (power) {
     efa:	1d7b      	adds	r3, r7, #5
     efc:	781b      	ldrb	r3, [r3, #0]
     efe:	3b04      	subs	r3, #4
     f00:	2b04      	cmp	r3, #4
     f02:	d85f      	bhi.n	fc4 <_get_cycles_for_ms_internal+0xe0>
     f04:	009a      	lsls	r2, r3, #2
     f06:	4b37      	ldr	r3, [pc, #220]	; (fe4 <_get_cycles_for_ms_internal+0x100>)
     f08:	18d3      	adds	r3, r2, r3
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	469f      	mov	pc, r3
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     f0e:	1dbb      	adds	r3, r7, #6
     f10:	881c      	ldrh	r4, [r3, #0]
     f12:	683a      	ldr	r2, [r7, #0]
     f14:	4b34      	ldr	r3, [pc, #208]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f16:	4935      	ldr	r1, [pc, #212]	; (fec <_get_cycles_for_ms_internal+0x108>)
     f18:	0010      	movs	r0, r2
     f1a:	4798      	blx	r3
     f1c:	0003      	movs	r3, r0
     f1e:	4363      	muls	r3, r4
     f20:	1c9a      	adds	r2, r3, #2
     f22:	4b31      	ldr	r3, [pc, #196]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f24:	2103      	movs	r1, #3
     f26:	0010      	movs	r0, r2
     f28:	4798      	blx	r3
     f2a:	0003      	movs	r3, r0
     f2c:	001a      	movs	r2, r3
     f2e:	2364      	movs	r3, #100	; 0x64
     f30:	4353      	muls	r3, r2
     f32:	e052      	b.n	fda <_get_cycles_for_ms_internal+0xf6>
	case 7:
		return (ms * (freq / 10000) + 2) / 3 * 10;
     f34:	1dbb      	adds	r3, r7, #6
     f36:	881c      	ldrh	r4, [r3, #0]
     f38:	683a      	ldr	r2, [r7, #0]
     f3a:	4b2b      	ldr	r3, [pc, #172]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f3c:	492c      	ldr	r1, [pc, #176]	; (ff0 <_get_cycles_for_ms_internal+0x10c>)
     f3e:	0010      	movs	r0, r2
     f40:	4798      	blx	r3
     f42:	0003      	movs	r3, r0
     f44:	4363      	muls	r3, r4
     f46:	1c9a      	adds	r2, r3, #2
     f48:	4b27      	ldr	r3, [pc, #156]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f4a:	2103      	movs	r1, #3
     f4c:	0010      	movs	r0, r2
     f4e:	4798      	blx	r3
     f50:	0003      	movs	r3, r0
     f52:	001a      	movs	r2, r3
     f54:	0013      	movs	r3, r2
     f56:	009b      	lsls	r3, r3, #2
     f58:	189b      	adds	r3, r3, r2
     f5a:	005b      	lsls	r3, r3, #1
     f5c:	e03d      	b.n	fda <_get_cycles_for_ms_internal+0xf6>
	case 6:
		return (ms * (freq / 1000) + 2) / 3;
     f5e:	1dbb      	adds	r3, r7, #6
     f60:	881c      	ldrh	r4, [r3, #0]
     f62:	6838      	ldr	r0, [r7, #0]
     f64:	4b20      	ldr	r3, [pc, #128]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f66:	22fa      	movs	r2, #250	; 0xfa
     f68:	0091      	lsls	r1, r2, #2
     f6a:	4798      	blx	r3
     f6c:	0003      	movs	r3, r0
     f6e:	4363      	muls	r3, r4
     f70:	1c9a      	adds	r2, r3, #2
     f72:	4b1d      	ldr	r3, [pc, #116]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f74:	2103      	movs	r1, #3
     f76:	0010      	movs	r0, r2
     f78:	4798      	blx	r3
     f7a:	0003      	movs	r3, r0
     f7c:	e02d      	b.n	fda <_get_cycles_for_ms_internal+0xf6>
	case 5:
		return (ms * (freq / 100) + 29) / 30;
     f7e:	1dbb      	adds	r3, r7, #6
     f80:	881c      	ldrh	r4, [r3, #0]
     f82:	683a      	ldr	r2, [r7, #0]
     f84:	4b18      	ldr	r3, [pc, #96]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f86:	2164      	movs	r1, #100	; 0x64
     f88:	0010      	movs	r0, r2
     f8a:	4798      	blx	r3
     f8c:	0003      	movs	r3, r0
     f8e:	4363      	muls	r3, r4
     f90:	331d      	adds	r3, #29
     f92:	001a      	movs	r2, r3
     f94:	4b14      	ldr	r3, [pc, #80]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     f96:	211e      	movs	r1, #30
     f98:	0010      	movs	r0, r2
     f9a:	4798      	blx	r3
     f9c:	0003      	movs	r3, r0
     f9e:	e01c      	b.n	fda <_get_cycles_for_ms_internal+0xf6>
	case 4:
		return (ms * (freq / 10) + 299) / 300;
     fa0:	1dbb      	adds	r3, r7, #6
     fa2:	881c      	ldrh	r4, [r3, #0]
     fa4:	683a      	ldr	r2, [r7, #0]
     fa6:	4b10      	ldr	r3, [pc, #64]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     fa8:	210a      	movs	r1, #10
     faa:	0010      	movs	r0, r2
     fac:	4798      	blx	r3
     fae:	0003      	movs	r3, r0
     fb0:	4363      	muls	r3, r4
     fb2:	332c      	adds	r3, #44	; 0x2c
     fb4:	33ff      	adds	r3, #255	; 0xff
     fb6:	0018      	movs	r0, r3
     fb8:	4b0b      	ldr	r3, [pc, #44]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     fba:	2296      	movs	r2, #150	; 0x96
     fbc:	0051      	lsls	r1, r2, #1
     fbe:	4798      	blx	r3
     fc0:	0003      	movs	r3, r0
     fc2:	e00a      	b.n	fda <_get_cycles_for_ms_internal+0xf6>
	default:
		return (ms * (freq / 1) + 2999) / 3000;
     fc4:	1dbb      	adds	r3, r7, #6
     fc6:	881b      	ldrh	r3, [r3, #0]
     fc8:	683a      	ldr	r2, [r7, #0]
     fca:	4353      	muls	r3, r2
     fcc:	4a09      	ldr	r2, [pc, #36]	; (ff4 <_get_cycles_for_ms_internal+0x110>)
     fce:	189a      	adds	r2, r3, r2
     fd0:	4b05      	ldr	r3, [pc, #20]	; (fe8 <_get_cycles_for_ms_internal+0x104>)
     fd2:	4909      	ldr	r1, [pc, #36]	; (ff8 <_get_cycles_for_ms_internal+0x114>)
     fd4:	0010      	movs	r0, r2
     fd6:	4798      	blx	r3
     fd8:	0003      	movs	r3, r0
	}
}
     fda:	0018      	movs	r0, r3
     fdc:	46bd      	mov	sp, r7
     fde:	b003      	add	sp, #12
     fe0:	bd90      	pop	{r4, r7, pc}
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	00004278 	.word	0x00004278
     fe8:	00003321 	.word	0x00003321
     fec:	000186a0 	.word	0x000186a0
     ff0:	00002710 	.word	0x00002710
     ff4:	00000bb7 	.word	0x00000bb7
     ff8:	00000bb8 	.word	0x00000bb8

00000ffc <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b082      	sub	sp, #8
    1000:	af00      	add	r7, sp, #0
    1002:	0002      	movs	r2, r0
    1004:	1dbb      	adds	r3, r7, #6
    1006:	801a      	strh	r2, [r3, #0]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    1008:	4905      	ldr	r1, [pc, #20]	; (1020 <_get_cycles_for_ms+0x24>)
    100a:	1dbb      	adds	r3, r7, #6
    100c:	881b      	ldrh	r3, [r3, #0]
    100e:	2207      	movs	r2, #7
    1010:	0018      	movs	r0, r3
    1012:	4b04      	ldr	r3, [pc, #16]	; (1024 <_get_cycles_for_ms+0x28>)
    1014:	4798      	blx	r3
    1016:	0003      	movs	r3, r0
}
    1018:	0018      	movs	r0, r3
    101a:	46bd      	mov	sp, r7
    101c:	b002      	add	sp, #8
    101e:	bd80      	pop	{r7, pc}
    1020:	003d0900 	.word	0x003d0900
    1024:	00000ee5 	.word	0x00000ee5

00001028 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    1028:	b580      	push	{r7, lr}
    102a:	b082      	sub	sp, #8
    102c:	af00      	add	r7, sp, #0
    102e:	6078      	str	r0, [r7, #4]
    1030:	6039      	str	r1, [r7, #0]

00001032 <__delay>:
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
    1032:	3901      	subs	r1, #1
    1034:	d8fd      	bhi.n	1032 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	46bd      	mov	sp, r7
    103a:	b002      	add	sp, #8
    103c:	bd80      	pop	{r7, pc}

0000103e <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_CACHEDIS;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    103e:	b580      	push	{r7, lr}
    1040:	b082      	sub	sp, #8
    1042:	af00      	add	r7, sp, #0
    1044:	6078      	str	r0, [r7, #4]
    1046:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    1048:	687b      	ldr	r3, [r7, #4]
    104a:	685a      	ldr	r2, [r3, #4]
    104c:	683b      	ldr	r3, [r7, #0]
    104e:	005b      	lsls	r3, r3, #1
    1050:	211e      	movs	r1, #30
    1052:	400b      	ands	r3, r1
    1054:	431a      	orrs	r2, r3
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	46bd      	mov	sp, r7
    105e:	b002      	add	sp, #8
    1060:	bd80      	pop	{r7, pc}
	...

00001064 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1064:	b580      	push	{r7, lr}
    1066:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1068:	4b0a      	ldr	r3, [pc, #40]	; (1094 <_init_chip+0x30>)
    106a:	2100      	movs	r1, #0
    106c:	0018      	movs	r0, r3
    106e:	4b0a      	ldr	r3, [pc, #40]	; (1098 <_init_chip+0x34>)
    1070:	4798      	blx	r3

	_set_performance_level(2);
    1072:	2002      	movs	r0, #2
    1074:	4b09      	ldr	r3, [pc, #36]	; (109c <_init_chip+0x38>)
    1076:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1078:	4b09      	ldr	r3, [pc, #36]	; (10a0 <_init_chip+0x3c>)
    107a:	4798      	blx	r3
	_oscctrl_init_sources();
    107c:	4b09      	ldr	r3, [pc, #36]	; (10a4 <_init_chip+0x40>)
    107e:	4798      	blx	r3
	_mclk_init();
    1080:	4b09      	ldr	r3, [pc, #36]	; (10a8 <_init_chip+0x44>)
    1082:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1084:	4b09      	ldr	r3, [pc, #36]	; (10ac <_init_chip+0x48>)
    1086:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1088:	20ff      	movs	r0, #255	; 0xff
    108a:	4b09      	ldr	r3, [pc, #36]	; (10b0 <_init_chip+0x4c>)
    108c:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	46bd      	mov	sp, r7
    1092:	bd80      	pop	{r7, pc}
    1094:	41004000 	.word	0x41004000
    1098:	0000103f 	.word	0x0000103f
    109c:	00001461 	.word	0x00001461
    10a0:	00001235 	.word	0x00001235
    10a4:	00001335 	.word	0x00001335
    10a8:	000011a1 	.word	0x000011a1
    10ac:	00001381 	.word	0x00001381
    10b0:	00001115 	.word	0x00001115

000010b4 <hri_gclk_wait_for_sync>:
{
    10b4:	b580      	push	{r7, lr}
    10b6:	b082      	sub	sp, #8
    10b8:	af00      	add	r7, sp, #0
    10ba:	6078      	str	r0, [r7, #4]
    10bc:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	687b      	ldr	r3, [r7, #4]
    10c2:	685b      	ldr	r3, [r3, #4]
    10c4:	683a      	ldr	r2, [r7, #0]
    10c6:	4013      	ands	r3, r2
    10c8:	d1fa      	bne.n	10c0 <hri_gclk_wait_for_sync+0xc>
}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	46bd      	mov	sp, r7
    10ce:	b002      	add	sp, #8
    10d0:	bd80      	pop	{r7, pc}
	...

000010d4 <hri_gclk_write_GENCTRL_reg>:
{
    10d4:	b580      	push	{r7, lr}
    10d6:	b084      	sub	sp, #16
    10d8:	af00      	add	r7, sp, #0
    10da:	60f8      	str	r0, [r7, #12]
    10dc:	607a      	str	r2, [r7, #4]
    10de:	230b      	movs	r3, #11
    10e0:	18fb      	adds	r3, r7, r3
    10e2:	1c0a      	adds	r2, r1, #0
    10e4:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    10e6:	230b      	movs	r3, #11
    10e8:	18fb      	adds	r3, r7, r3
    10ea:	781a      	ldrb	r2, [r3, #0]
    10ec:	68fb      	ldr	r3, [r7, #12]
    10ee:	3208      	adds	r2, #8
    10f0:	0092      	lsls	r2, r2, #2
    10f2:	6879      	ldr	r1, [r7, #4]
    10f4:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    10f6:	4a05      	ldr	r2, [pc, #20]	; (110c <hri_gclk_write_GENCTRL_reg+0x38>)
    10f8:	68fb      	ldr	r3, [r7, #12]
    10fa:	0011      	movs	r1, r2
    10fc:	0018      	movs	r0, r3
    10fe:	4b04      	ldr	r3, [pc, #16]	; (1110 <hri_gclk_write_GENCTRL_reg+0x3c>)
    1100:	4798      	blx	r3
}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	46bd      	mov	sp, r7
    1106:	b004      	add	sp, #16
    1108:	bd80      	pop	{r7, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	000007fd 	.word	0x000007fd
    1110:	000010b5 	.word	0x000010b5

00001114 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    1114:	b580      	push	{r7, lr}
    1116:	b082      	sub	sp, #8
    1118:	af00      	add	r7, sp, #0
    111a:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    111c:	687b      	ldr	r3, [r7, #4]
    111e:	2201      	movs	r2, #1
    1120:	4013      	ands	r3, r2
    1122:	d005      	beq.n	1130 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    1124:	4a04      	ldr	r2, [pc, #16]	; (1138 <_gclk_init_generators_by_fref+0x24>)
    1126:	4b05      	ldr	r3, [pc, #20]	; (113c <_gclk_init_generators_by_fref+0x28>)
    1128:	2100      	movs	r1, #0
    112a:	0018      	movs	r0, r3
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <_gclk_init_generators_by_fref+0x2c>)
    112e:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    1130:	46c0      	nop			; (mov r8, r8)
    1132:	46bd      	mov	sp, r7
    1134:	b002      	add	sp, #8
    1136:	bd80      	pop	{r7, pc}
    1138:	00010106 	.word	0x00010106
    113c:	40001800 	.word	0x40001800
    1140:	000010d5 	.word	0x000010d5

00001144 <hri_mclk_write_CPUDIV_reg>:
{
    1144:	b580      	push	{r7, lr}
    1146:	b082      	sub	sp, #8
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
    114c:	000a      	movs	r2, r1
    114e:	1cfb      	adds	r3, r7, #3
    1150:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    1152:	687b      	ldr	r3, [r7, #4]
    1154:	1cfa      	adds	r2, r7, #3
    1156:	7812      	ldrb	r2, [r2, #0]
    1158:	711a      	strb	r2, [r3, #4]
}
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	46bd      	mov	sp, r7
    115e:	b002      	add	sp, #8
    1160:	bd80      	pop	{r7, pc}

00001162 <hri_mclk_write_LPDIV_reg>:
{
    1162:	b580      	push	{r7, lr}
    1164:	b082      	sub	sp, #8
    1166:	af00      	add	r7, sp, #0
    1168:	6078      	str	r0, [r7, #4]
    116a:	000a      	movs	r2, r1
    116c:	1cfb      	adds	r3, r7, #3
    116e:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->LPDIV.reg = data;
    1170:	687b      	ldr	r3, [r7, #4]
    1172:	1cfa      	adds	r2, r7, #3
    1174:	7812      	ldrb	r2, [r2, #0]
    1176:	715a      	strb	r2, [r3, #5]
}
    1178:	46c0      	nop			; (mov r8, r8)
    117a:	46bd      	mov	sp, r7
    117c:	b002      	add	sp, #8
    117e:	bd80      	pop	{r7, pc}

00001180 <hri_mclk_write_BUPDIV_reg>:
{
    1180:	b580      	push	{r7, lr}
    1182:	b082      	sub	sp, #8
    1184:	af00      	add	r7, sp, #0
    1186:	6078      	str	r0, [r7, #4]
    1188:	000a      	movs	r2, r1
    118a:	1cfb      	adds	r3, r7, #3
    118c:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->BUPDIV.reg = data;
    118e:	687b      	ldr	r3, [r7, #4]
    1190:	1cfa      	adds	r2, r7, #3
    1192:	7812      	ldrb	r2, [r2, #0]
    1194:	719a      	strb	r2, [r3, #6]
}
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	46bd      	mov	sp, r7
    119a:	b002      	add	sp, #8
    119c:	bd80      	pop	{r7, pc}
	...

000011a0 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	b082      	sub	sp, #8
    11a4:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    11a6:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <_mclk_init+0x30>)
    11a8:	607b      	str	r3, [r7, #4]
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
    11aa:	687b      	ldr	r3, [r7, #4]
    11ac:	2108      	movs	r1, #8
    11ae:	0018      	movs	r0, r3
    11b0:	4b08      	ldr	r3, [pc, #32]	; (11d4 <_mclk_init+0x34>)
    11b2:	4798      	blx	r3
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
    11b4:	687b      	ldr	r3, [r7, #4]
    11b6:	2104      	movs	r1, #4
    11b8:	0018      	movs	r0, r3
    11ba:	4b07      	ldr	r3, [pc, #28]	; (11d8 <_mclk_init+0x38>)
    11bc:	4798      	blx	r3
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	2101      	movs	r1, #1
    11c2:	0018      	movs	r0, r3
    11c4:	4b05      	ldr	r3, [pc, #20]	; (11dc <_mclk_init+0x3c>)
    11c6:	4798      	blx	r3
}
    11c8:	46c0      	nop			; (mov r8, r8)
    11ca:	46bd      	mov	sp, r7
    11cc:	b002      	add	sp, #8
    11ce:	bd80      	pop	{r7, pc}
    11d0:	40000400 	.word	0x40000400
    11d4:	00001181 	.word	0x00001181
    11d8:	00001163 	.word	0x00001163
    11dc:	00001145 	.word	0x00001145

000011e0 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b082      	sub	sp, #8
    11e4:	af00      	add	r7, sp, #0
    11e6:	6078      	str	r0, [r7, #4]
    11e8:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    11ea:	687b      	ldr	r3, [r7, #4]
    11ec:	683a      	ldr	r2, [r7, #0]
    11ee:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    11f0:	46c0      	nop			; (mov r8, r8)
    11f2:	46bd      	mov	sp, r7
    11f4:	b002      	add	sp, #8
    11f6:	bd80      	pop	{r7, pc}

000011f8 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b084      	sub	sp, #16
    11fc:	af00      	add	r7, sp, #0
    11fe:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1200:	687b      	ldr	r3, [r7, #4]
    1202:	69db      	ldr	r3, [r3, #28]
    1204:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	0a1b      	lsrs	r3, r3, #8
    120a:	221f      	movs	r2, #31
    120c:	4013      	ands	r3, r2
    120e:	60fb      	str	r3, [r7, #12]
	return tmp;
    1210:	68fb      	ldr	r3, [r7, #12]
}
    1212:	0018      	movs	r0, r3
    1214:	46bd      	mov	sp, r7
    1216:	b004      	add	sp, #16
    1218:	bd80      	pop	{r7, pc}

0000121a <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    121a:	b580      	push	{r7, lr}
    121c:	b082      	sub	sp, #8
    121e:	af00      	add	r7, sp, #0
    1220:	6078      	str	r0, [r7, #4]
    1222:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1224:	687b      	ldr	r3, [r7, #4]
    1226:	683a      	ldr	r2, [r7, #0]
    1228:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	46bd      	mov	sp, r7
    122e:	b002      	add	sp, #8
    1230:	bd80      	pop	{r7, pc}
	...

00001234 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    1234:	b580      	push	{r7, lr}
    1236:	b082      	sub	sp, #8
    1238:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    123a:	4b10      	ldr	r3, [pc, #64]	; (127c <_osc32kctrl_init_sources+0x48>)
    123c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    123e:	1cbb      	adds	r3, r7, #2
    1240:	2200      	movs	r2, #0
    1242:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    1244:	687b      	ldr	r3, [r7, #4]
    1246:	0018      	movs	r0, r3
    1248:	4b0d      	ldr	r3, [pc, #52]	; (1280 <_osc32kctrl_init_sources+0x4c>)
    124a:	4798      	blx	r3
    124c:	0002      	movs	r2, r0
    124e:	1cbb      	adds	r3, r7, #2
    1250:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1252:	1cbb      	adds	r3, r7, #2
    1254:	881b      	ldrh	r3, [r3, #0]
    1256:	021b      	lsls	r3, r3, #8
    1258:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    125a:	23f8      	movs	r3, #248	; 0xf8
    125c:	015b      	lsls	r3, r3, #5
    125e:	401a      	ands	r2, r3
    1260:	687b      	ldr	r3, [r7, #4]
    1262:	0011      	movs	r1, r2
    1264:	0018      	movs	r0, r3
    1266:	4b07      	ldr	r3, [pc, #28]	; (1284 <_osc32kctrl_init_sources+0x50>)
    1268:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    126a:	687b      	ldr	r3, [r7, #4]
    126c:	2101      	movs	r1, #1
    126e:	0018      	movs	r0, r3
    1270:	4b05      	ldr	r3, [pc, #20]	; (1288 <_osc32kctrl_init_sources+0x54>)
    1272:	4798      	blx	r3
	(void)calib;
}
    1274:	46c0      	nop			; (mov r8, r8)
    1276:	46bd      	mov	sp, r7
    1278:	b002      	add	sp, #8
    127a:	bd80      	pop	{r7, pc}
    127c:	40001000 	.word	0x40001000
    1280:	000011f9 	.word	0x000011f9
    1284:	0000121b 	.word	0x0000121b
    1288:	000011e1 	.word	0x000011e1

0000128c <hri_oscctrl_wait_for_sync>:
typedef uint8_t  hri_oscctrl_dpllstatus_reg_t;
typedef uint8_t  hri_oscctrl_dpllsyncbusy_reg_t;
typedef uint8_t  hri_oscctrl_osc16mctrl_reg_t;

static inline void hri_oscctrl_wait_for_sync(const void *const hw, hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    128c:	b580      	push	{r7, lr}
    128e:	b082      	sub	sp, #8
    1290:	af00      	add	r7, sp, #0
    1292:	6078      	str	r0, [r7, #4]
    1294:	000a      	movs	r2, r1
    1296:	1cfb      	adds	r3, r7, #3
    1298:	701a      	strb	r2, [r3, #0]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	687b      	ldr	r3, [r7, #4]
    129e:	2238      	movs	r2, #56	; 0x38
    12a0:	5c9b      	ldrb	r3, [r3, r2]
    12a2:	b2db      	uxtb	r3, r3
    12a4:	1cfa      	adds	r2, r7, #3
    12a6:	7812      	ldrb	r2, [r2, #0]
    12a8:	4013      	ands	r3, r2
    12aa:	b2db      	uxtb	r3, r3
    12ac:	2b00      	cmp	r3, #0
    12ae:	d1f5      	bne.n	129c <hri_oscctrl_wait_for_sync+0x10>
	};
}
    12b0:	46c0      	nop			; (mov r8, r8)
    12b2:	46bd      	mov	sp, r7
    12b4:	b002      	add	sp, #8
    12b6:	bd80      	pop	{r7, pc}

000012b8 <hri_oscctrl_get_STATUS_OSC16MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY) >> OSCCTRL_STATUS_XOSCRDY_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC16MRDY_bit(const void *const hw)
{
    12b8:	b580      	push	{r7, lr}
    12ba:	b082      	sub	sp, #8
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	68db      	ldr	r3, [r3, #12]
    12c4:	091b      	lsrs	r3, r3, #4
    12c6:	2201      	movs	r2, #1
    12c8:	4013      	ands	r3, r2
    12ca:	1e5a      	subs	r2, r3, #1
    12cc:	4193      	sbcs	r3, r2
    12ce:	b2db      	uxtb	r3, r3
}
    12d0:	0018      	movs	r0, r3
    12d2:	46bd      	mov	sp, r7
    12d4:	b002      	add	sp, #8
    12d6:	bd80      	pop	{r7, pc}

000012d8 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit>:
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(const void *const hw)
{
    12d8:	b580      	push	{r7, lr}
    12da:	b082      	sub	sp, #8
    12dc:	af00      	add	r7, sp, #0
    12de:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	7d1b      	ldrb	r3, [r3, #20]
    12e4:	b2db      	uxtb	r3, r3
    12e6:	2280      	movs	r2, #128	; 0x80
    12e8:	4252      	negs	r2, r2
    12ea:	4313      	orrs	r3, r2
    12ec:	b2da      	uxtb	r2, r3
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_MASK);
    12f2:	687b      	ldr	r3, [r7, #4]
    12f4:	210e      	movs	r1, #14
    12f6:	0018      	movs	r0, r3
    12f8:	4b02      	ldr	r3, [pc, #8]	; (1304 <hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit+0x2c>)
    12fa:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    12fc:	46c0      	nop			; (mov r8, r8)
    12fe:	46bd      	mov	sp, r7
    1300:	b002      	add	sp, #8
    1302:	bd80      	pop	{r7, pc}
    1304:	0000128d 	.word	0x0000128d

00001308 <hri_oscctrl_write_OSC16MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
    1308:	b580      	push	{r7, lr}
    130a:	b082      	sub	sp, #8
    130c:	af00      	add	r7, sp, #0
    130e:	6078      	str	r0, [r7, #4]
    1310:	000a      	movs	r2, r1
    1312:	1cfb      	adds	r3, r7, #3
    1314:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	1cfa      	adds	r2, r7, #3
    131a:	7812      	ldrb	r2, [r2, #0]
    131c:	751a      	strb	r2, [r3, #20]
	hri_oscctrl_wait_for_sync(hw, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    131e:	687b      	ldr	r3, [r7, #4]
    1320:	2102      	movs	r1, #2
    1322:	0018      	movs	r0, r3
    1324:	4b02      	ldr	r3, [pc, #8]	; (1330 <hri_oscctrl_write_OSC16MCTRL_reg+0x28>)
    1326:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    1328:	46c0      	nop			; (mov r8, r8)
    132a:	46bd      	mov	sp, r7
    132c:	b002      	add	sp, #8
    132e:	bd80      	pop	{r7, pc}
    1330:	0000128d 	.word	0x0000128d

00001334 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    1334:	b580      	push	{r7, lr}
    1336:	b082      	sub	sp, #8
    1338:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    133a:	4b0d      	ldr	r3, [pc, #52]	; (1370 <_oscctrl_init_sources+0x3c>)
    133c:	607b      	str	r3, [r7, #4]
	                                   | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

#endif

#if CONF_OSC16M_CONFIG == 1
	hri_oscctrl_write_OSC16MCTRL_reg(hw,
    133e:	687b      	ldr	r3, [r7, #4]
    1340:	2182      	movs	r1, #130	; 0x82
    1342:	0018      	movs	r0, r3
    1344:	4b0b      	ldr	r3, [pc, #44]	; (1374 <_oscctrl_init_sources+0x40>)
    1346:	4798      	blx	r3
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
    1348:	46c0      	nop			; (mov r8, r8)
    134a:	687b      	ldr	r3, [r7, #4]
    134c:	0018      	movs	r0, r3
    134e:	4b0a      	ldr	r3, [pc, #40]	; (1378 <_oscctrl_init_sources+0x44>)
    1350:	4798      	blx	r3
    1352:	0003      	movs	r3, r0
    1354:	001a      	movs	r2, r3
    1356:	2301      	movs	r3, #1
    1358:	4053      	eors	r3, r2
    135a:	b2db      	uxtb	r3, r3
    135c:	2b00      	cmp	r3, #0
    135e:	d1f4      	bne.n	134a <_oscctrl_init_sources+0x16>
		;
#endif
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
    1360:	687b      	ldr	r3, [r7, #4]
    1362:	0018      	movs	r0, r3
    1364:	4b05      	ldr	r3, [pc, #20]	; (137c <_oscctrl_init_sources+0x48>)
    1366:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    1368:	46c0      	nop			; (mov r8, r8)
    136a:	46bd      	mov	sp, r7
    136c:	b002      	add	sp, #8
    136e:	bd80      	pop	{r7, pc}
    1370:	40000c00 	.word	0x40000c00
    1374:	00001309 	.word	0x00001309
    1378:	000012b9 	.word	0x000012b9
    137c:	000012d9 	.word	0x000012d9

00001380 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1380:	b580      	push	{r7, lr}
    1382:	b082      	sub	sp, #8
    1384:	af00      	add	r7, sp, #0
	void *                     hw  = (void *)OSCCTRL;
    1386:	4b04      	ldr	r3, [pc, #16]	; (1398 <_oscctrl_init_referenced_generators+0x18>)
    1388:	607b      	str	r3, [r7, #4]
	hri_oscctrl_dfllctrl_reg_t tmp = 0;
    138a:	1cbb      	adds	r3, r7, #2
    138c:	2200      	movs	r2, #0
    138e:	801a      	strh	r2, [r3, #0]
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
    1390:	46c0      	nop			; (mov r8, r8)
    1392:	46bd      	mov	sp, r7
    1394:	b002      	add	sp, #8
    1396:	bd80      	pop	{r7, pc}
    1398:	40000c00 	.word	0x40000c00

0000139c <hri_pm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pm_intflag_reg_t hri_pm_read_INTFLAG_reg(const void *const hw)
{
    139c:	b580      	push	{r7, lr}
    139e:	b082      	sub	sp, #8
    13a0:	af00      	add	r7, sp, #0
    13a2:	6078      	str	r0, [r7, #4]
	return ((Pm *)hw)->INTFLAG.reg;
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	799b      	ldrb	r3, [r3, #6]
    13a8:	b2db      	uxtb	r3, r3
}
    13aa:	0018      	movs	r0, r3
    13ac:	46bd      	mov	sp, r7
    13ae:	b002      	add	sp, #8
    13b0:	bd80      	pop	{r7, pc}

000013b2 <hri_pm_clear_INTFLAG_reg>:

static inline void hri_pm_clear_INTFLAG_reg(const void *const hw, hri_pm_intflag_reg_t mask)
{
    13b2:	b580      	push	{r7, lr}
    13b4:	b082      	sub	sp, #8
    13b6:	af00      	add	r7, sp, #0
    13b8:	6078      	str	r0, [r7, #4]
    13ba:	000a      	movs	r2, r1
    13bc:	1cfb      	adds	r3, r7, #3
    13be:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->INTFLAG.reg = mask;
    13c0:	687b      	ldr	r3, [r7, #4]
    13c2:	1cfa      	adds	r2, r7, #3
    13c4:	7812      	ldrb	r2, [r2, #0]
    13c6:	719a      	strb	r2, [r3, #6]
}
    13c8:	46c0      	nop			; (mov r8, r8)
    13ca:	46bd      	mov	sp, r7
    13cc:	b002      	add	sp, #8
    13ce:	bd80      	pop	{r7, pc}

000013d0 <hri_pm_get_PLCFG_PLSEL_bf>:
	((Pm *)hw)->PLCFG.reg |= PM_PLCFG_PLSEL(mask);
	PM_CRITICAL_SECTION_LEAVE();
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
    13d0:	b580      	push	{r7, lr}
    13d2:	b084      	sub	sp, #16
    13d4:	af00      	add	r7, sp, #0
    13d6:	6078      	str	r0, [r7, #4]
    13d8:	000a      	movs	r2, r1
    13da:	1cfb      	adds	r3, r7, #3
    13dc:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
    13de:	230f      	movs	r3, #15
    13e0:	18fb      	adds	r3, r7, r3
    13e2:	687a      	ldr	r2, [r7, #4]
    13e4:	7892      	ldrb	r2, [r2, #2]
    13e6:	701a      	strb	r2, [r3, #0]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
    13e8:	230f      	movs	r3, #15
    13ea:	18fb      	adds	r3, r7, r3
    13ec:	1cfa      	adds	r2, r7, #3
    13ee:	781b      	ldrb	r3, [r3, #0]
    13f0:	7812      	ldrb	r2, [r2, #0]
    13f2:	4013      	ands	r3, r2
    13f4:	b2da      	uxtb	r2, r3
    13f6:	230f      	movs	r3, #15
    13f8:	18fb      	adds	r3, r7, r3
    13fa:	2103      	movs	r1, #3
    13fc:	400a      	ands	r2, r1
    13fe:	701a      	strb	r2, [r3, #0]
	return tmp;
    1400:	230f      	movs	r3, #15
    1402:	18fb      	adds	r3, r7, r3
    1404:	781b      	ldrb	r3, [r3, #0]
}
    1406:	0018      	movs	r0, r3
    1408:	46bd      	mov	sp, r7
    140a:	b004      	add	sp, #16
    140c:	bd80      	pop	{r7, pc}

0000140e <hri_pm_write_PLCFG_PLSEL_bf>:

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
    140e:	b580      	push	{r7, lr}
    1410:	b084      	sub	sp, #16
    1412:	af00      	add	r7, sp, #0
    1414:	6078      	str	r0, [r7, #4]
    1416:	000a      	movs	r2, r1
    1418:	1cfb      	adds	r3, r7, #3
    141a:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
    141c:	230f      	movs	r3, #15
    141e:	18fb      	adds	r3, r7, r3
    1420:	687a      	ldr	r2, [r7, #4]
    1422:	7892      	ldrb	r2, [r2, #2]
    1424:	701a      	strb	r2, [r3, #0]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
    1426:	230f      	movs	r3, #15
    1428:	18fb      	adds	r3, r7, r3
    142a:	220f      	movs	r2, #15
    142c:	18ba      	adds	r2, r7, r2
    142e:	7812      	ldrb	r2, [r2, #0]
    1430:	2103      	movs	r1, #3
    1432:	438a      	bics	r2, r1
    1434:	701a      	strb	r2, [r3, #0]
	tmp |= PM_PLCFG_PLSEL(data);
    1436:	1cfb      	adds	r3, r7, #3
    1438:	781b      	ldrb	r3, [r3, #0]
    143a:	2203      	movs	r2, #3
    143c:	4013      	ands	r3, r2
    143e:	b2d9      	uxtb	r1, r3
    1440:	230f      	movs	r3, #15
    1442:	18fb      	adds	r3, r7, r3
    1444:	220f      	movs	r2, #15
    1446:	18ba      	adds	r2, r7, r2
    1448:	7812      	ldrb	r2, [r2, #0]
    144a:	430a      	orrs	r2, r1
    144c:	701a      	strb	r2, [r3, #0]
	((Pm *)hw)->PLCFG.reg = tmp;
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	220f      	movs	r2, #15
    1452:	18ba      	adds	r2, r7, r2
    1454:	7812      	ldrb	r2, [r2, #0]
    1456:	709a      	strb	r2, [r3, #2]
	PM_CRITICAL_SECTION_LEAVE();
}
    1458:	46c0      	nop			; (mov r8, r8)
    145a:	46bd      	mov	sp, r7
    145c:	b004      	add	sp, #16
    145e:	bd80      	pop	{r7, pc}

00001460 <_set_performance_level>:

/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
    1460:	b580      	push	{r7, lr}
    1462:	b082      	sub	sp, #8
    1464:	af00      	add	r7, sp, #0
    1466:	0002      	movs	r2, r0
    1468:	1dfb      	adds	r3, r7, #7
    146a:	701a      	strb	r2, [r3, #0]
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
    146c:	2380      	movs	r3, #128	; 0x80
    146e:	05db      	lsls	r3, r3, #23
    1470:	2103      	movs	r1, #3
    1472:	0018      	movs	r0, r3
    1474:	4b10      	ldr	r3, [pc, #64]	; (14b8 <_set_performance_level+0x58>)
    1476:	4798      	blx	r3
    1478:	0003      	movs	r3, r0
    147a:	001a      	movs	r2, r3
    147c:	1dfb      	adds	r3, r7, #7
    147e:	781b      	ldrb	r3, [r3, #0]
    1480:	4293      	cmp	r3, r2
    1482:	d015      	beq.n	14b0 <_set_performance_level+0x50>
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
    1484:	2380      	movs	r3, #128	; 0x80
    1486:	05db      	lsls	r3, r3, #23
    1488:	21ff      	movs	r1, #255	; 0xff
    148a:	0018      	movs	r0, r3
    148c:	4b0b      	ldr	r3, [pc, #44]	; (14bc <_set_performance_level+0x5c>)
    148e:	4798      	blx	r3
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
    1490:	1dfb      	adds	r3, r7, #7
    1492:	781a      	ldrb	r2, [r3, #0]
    1494:	2380      	movs	r3, #128	; 0x80
    1496:	05db      	lsls	r3, r3, #23
    1498:	0011      	movs	r1, r2
    149a:	0018      	movs	r0, r3
    149c:	4b08      	ldr	r3, [pc, #32]	; (14c0 <_set_performance_level+0x60>)
    149e:	4798      	blx	r3
		while (!hri_pm_read_INTFLAG_reg(PM))
    14a0:	46c0      	nop			; (mov r8, r8)
    14a2:	2380      	movs	r3, #128	; 0x80
    14a4:	05db      	lsls	r3, r3, #23
    14a6:	0018      	movs	r0, r3
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <_set_performance_level+0x64>)
    14aa:	4798      	blx	r3
    14ac:	1e03      	subs	r3, r0, #0
    14ae:	d0f8      	beq.n	14a2 <_set_performance_level+0x42>
			;
	}
}
    14b0:	46c0      	nop			; (mov r8, r8)
    14b2:	46bd      	mov	sp, r7
    14b4:	b002      	add	sp, #8
    14b6:	bd80      	pop	{r7, pc}
    14b8:	000013d1 	.word	0x000013d1
    14bc:	000013b3 	.word	0x000013b3
    14c0:	0000140f 	.word	0x0000140f
    14c4:	0000139d 	.word	0x0000139d

000014c8 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intenset_reg_t;
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    14c8:	b580      	push	{r7, lr}
    14ca:	b082      	sub	sp, #8
    14cc:	af00      	add	r7, sp, #0
    14ce:	6078      	str	r0, [r7, #4]
    14d0:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	687b      	ldr	r3, [r7, #4]
    14d6:	69db      	ldr	r3, [r3, #28]
    14d8:	683a      	ldr	r2, [r7, #0]
    14da:	4013      	ands	r3, r2
    14dc:	d1fa      	bne.n	14d4 <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    14de:	46c0      	nop			; (mov r8, r8)
    14e0:	46bd      	mov	sp, r7
    14e2:	b002      	add	sp, #8
    14e4:	bd80      	pop	{r7, pc}

000014e6 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    14e6:	b580      	push	{r7, lr}
    14e8:	b082      	sub	sp, #8
    14ea:	af00      	add	r7, sp, #0
    14ec:	6078      	str	r0, [r7, #4]
    14ee:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	69db      	ldr	r3, [r3, #28]
    14f4:	683a      	ldr	r2, [r7, #0]
    14f6:	4013      	ands	r3, r2
    14f8:	1e5a      	subs	r2, r3, #1
    14fa:	4193      	sbcs	r3, r2
    14fc:	b2db      	uxtb	r3, r3
}
    14fe:	0018      	movs	r0, r3
    1500:	46bd      	mov	sp, r7
    1502:	b002      	add	sp, #8
    1504:	bd80      	pop	{r7, pc}

00001506 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    1506:	b580      	push	{r7, lr}
    1508:	b082      	sub	sp, #8
    150a:	af00      	add	r7, sp, #0
    150c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	2201      	movs	r2, #1
    1512:	761a      	strb	r2, [r3, #24]
}
    1514:	46c0      	nop			; (mov r8, r8)
    1516:	46bd      	mov	sp, r7
    1518:	b002      	add	sp, #8
    151a:	bd80      	pop	{r7, pc}

0000151c <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    151c:	b580      	push	{r7, lr}
    151e:	b082      	sub	sp, #8
    1520:	af00      	add	r7, sp, #0
    1522:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1524:	687b      	ldr	r3, [r7, #4]
    1526:	2202      	movs	r2, #2
    1528:	761a      	strb	r2, [r3, #24]
}
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	46bd      	mov	sp, r7
    152e:	b002      	add	sp, #8
    1530:	bd80      	pop	{r7, pc}

00001532 <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    1532:	b580      	push	{r7, lr}
    1534:	b082      	sub	sp, #8
    1536:	af00      	add	r7, sp, #0
    1538:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    153a:	687b      	ldr	r3, [r7, #4]
    153c:	7e1b      	ldrb	r3, [r3, #24]
    153e:	b2db      	uxtb	r3, r3
}
    1540:	0018      	movs	r0, r3
    1542:	46bd      	mov	sp, r7
    1544:	b002      	add	sp, #8
    1546:	bd80      	pop	{r7, pc}

00001548 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1548:	b580      	push	{r7, lr}
    154a:	b082      	sub	sp, #8
    154c:	af00      	add	r7, sp, #0
    154e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1550:	687b      	ldr	r3, [r7, #4]
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	2202      	movs	r2, #2
    1556:	431a      	orrs	r2, r3
    1558:	687b      	ldr	r3, [r7, #4]
    155a:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    155c:	687b      	ldr	r3, [r7, #4]
    155e:	2103      	movs	r1, #3
    1560:	0018      	movs	r0, r3
    1562:	4b03      	ldr	r3, [pc, #12]	; (1570 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x28>)
    1564:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	46bd      	mov	sp, r7
    156a:	b002      	add	sp, #8
    156c:	bd80      	pop	{r7, pc}
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	000014c9 	.word	0x000014c9

00001574 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1574:	b580      	push	{r7, lr}
    1576:	b082      	sub	sp, #8
    1578:	af00      	add	r7, sp, #0
    157a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	681b      	ldr	r3, [r3, #0]
    1580:	2202      	movs	r2, #2
    1582:	4393      	bics	r3, r2
    1584:	001a      	movs	r2, r3
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    158a:	687b      	ldr	r3, [r7, #4]
    158c:	2103      	movs	r1, #3
    158e:	0018      	movs	r0, r3
    1590:	4b02      	ldr	r3, [pc, #8]	; (159c <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x28>)
    1592:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1594:	46c0      	nop			; (mov r8, r8)
    1596:	46bd      	mov	sp, r7
    1598:	b002      	add	sp, #8
    159a:	bd80      	pop	{r7, pc}
    159c:	000014c9 	.word	0x000014c9

000015a0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	b084      	sub	sp, #16
    15a4:	af00      	add	r7, sp, #0
    15a6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    15a8:	687b      	ldr	r3, [r7, #4]
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    15ae:	68fb      	ldr	r3, [r7, #12]
    15b0:	0edb      	lsrs	r3, r3, #27
    15b2:	2201      	movs	r2, #1
    15b4:	4013      	ands	r3, r2
    15b6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    15b8:	68fb      	ldr	r3, [r7, #12]
    15ba:	1e5a      	subs	r2, r3, #1
    15bc:	4193      	sbcs	r3, r2
    15be:	b2db      	uxtb	r3, r3
}
    15c0:	0018      	movs	r0, r3
    15c2:	46bd      	mov	sp, r7
    15c4:	b004      	add	sp, #16
    15c6:	bd80      	pop	{r7, pc}

000015c8 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	b084      	sub	sp, #16
    15cc:	af00      	add	r7, sp, #0
    15ce:	6078      	str	r0, [r7, #4]
    15d0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    15d2:	687b      	ldr	r3, [r7, #4]
    15d4:	2103      	movs	r1, #3
    15d6:	0018      	movs	r0, r3
    15d8:	4b06      	ldr	r3, [pc, #24]	; (15f4 <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    15da:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    15e2:	68fb      	ldr	r3, [r7, #12]
    15e4:	683a      	ldr	r2, [r7, #0]
    15e6:	4013      	ands	r3, r2
    15e8:	60fb      	str	r3, [r7, #12]
	return tmp;
    15ea:	68fb      	ldr	r3, [r7, #12]
}
    15ec:	0018      	movs	r0, r3
    15ee:	46bd      	mov	sp, r7
    15f0:	b004      	add	sp, #16
    15f2:	bd80      	pop	{r7, pc}
    15f4:	000014c9 	.word	0x000014c9

000015f8 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	b082      	sub	sp, #8
    15fc:	af00      	add	r7, sp, #0
    15fe:	6078      	str	r0, [r7, #4]
    1600:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	683a      	ldr	r2, [r7, #0]
    1606:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	2103      	movs	r1, #3
    160c:	0018      	movs	r0, r3
    160e:	4b03      	ldr	r3, [pc, #12]	; (161c <hri_sercomi2cm_write_CTRLA_reg+0x24>)
    1610:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	46bd      	mov	sp, r7
    1616:	b002      	add	sp, #8
    1618:	bd80      	pop	{r7, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	000014c9 	.word	0x000014c9

00001620 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    1620:	b580      	push	{r7, lr}
    1622:	b082      	sub	sp, #8
    1624:	af00      	add	r7, sp, #0
    1626:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1628:	687b      	ldr	r3, [r7, #4]
    162a:	685b      	ldr	r3, [r3, #4]
    162c:	2280      	movs	r2, #128	; 0x80
    162e:	0052      	lsls	r2, r2, #1
    1630:	431a      	orrs	r2, r3
    1632:	687b      	ldr	r3, [r7, #4]
    1634:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1636:	687b      	ldr	r3, [r7, #4]
    1638:	2104      	movs	r1, #4
    163a:	0018      	movs	r0, r3
    163c:	4b02      	ldr	r3, [pc, #8]	; (1648 <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x28>)
    163e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	46bd      	mov	sp, r7
    1644:	b002      	add	sp, #8
    1646:	bd80      	pop	{r7, pc}
    1648:	000014c9 	.word	0x000014c9

0000164c <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    164c:	b580      	push	{r7, lr}
    164e:	b082      	sub	sp, #8
    1650:	af00      	add	r7, sp, #0
    1652:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	685b      	ldr	r3, [r3, #4]
    1658:	4a06      	ldr	r2, [pc, #24]	; (1674 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x28>)
    165a:	401a      	ands	r2, r3
    165c:	687b      	ldr	r3, [r7, #4]
    165e:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1660:	687b      	ldr	r3, [r7, #4]
    1662:	2104      	movs	r1, #4
    1664:	0018      	movs	r0, r3
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x2c>)
    1668:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	46bd      	mov	sp, r7
    166e:	b002      	add	sp, #8
    1670:	bd80      	pop	{r7, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	fffffeff 	.word	0xfffffeff
    1678:	000014c9 	.word	0x000014c9

0000167c <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    167c:	b580      	push	{r7, lr}
    167e:	b082      	sub	sp, #8
    1680:	af00      	add	r7, sp, #0
    1682:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1684:	687b      	ldr	r3, [r7, #4]
    1686:	685b      	ldr	r3, [r3, #4]
    1688:	2280      	movs	r2, #128	; 0x80
    168a:	02d2      	lsls	r2, r2, #11
    168c:	431a      	orrs	r2, r3
    168e:	687b      	ldr	r3, [r7, #4]
    1690:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	2104      	movs	r1, #4
    1696:	0018      	movs	r0, r3
    1698:	4b02      	ldr	r3, [pc, #8]	; (16a4 <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x28>)
    169a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    169c:	46c0      	nop			; (mov r8, r8)
    169e:	46bd      	mov	sp, r7
    16a0:	b002      	add	sp, #8
    16a2:	bd80      	pop	{r7, pc}
    16a4:	000014c9 	.word	0x000014c9

000016a8 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    16a8:	b580      	push	{r7, lr}
    16aa:	b082      	sub	sp, #8
    16ac:	af00      	add	r7, sp, #0
    16ae:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    16b0:	687b      	ldr	r3, [r7, #4]
    16b2:	685b      	ldr	r3, [r3, #4]
    16b4:	4a06      	ldr	r2, [pc, #24]	; (16d0 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x28>)
    16b6:	401a      	ands	r2, r3
    16b8:	687b      	ldr	r3, [r7, #4]
    16ba:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    16bc:	687b      	ldr	r3, [r7, #4]
    16be:	2104      	movs	r1, #4
    16c0:	0018      	movs	r0, r3
    16c2:	4b04      	ldr	r3, [pc, #16]	; (16d4 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x2c>)
    16c4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	46bd      	mov	sp, r7
    16ca:	b002      	add	sp, #8
    16cc:	bd80      	pop	{r7, pc}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	fffbffff 	.word	0xfffbffff
    16d4:	000014c9 	.word	0x000014c9

000016d8 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    16d8:	b580      	push	{r7, lr}
    16da:	b082      	sub	sp, #8
    16dc:	af00      	add	r7, sp, #0
    16de:	6078      	str	r0, [r7, #4]
    16e0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	685a      	ldr	r2, [r3, #4]
    16e6:	683b      	ldr	r3, [r7, #0]
    16e8:	0419      	lsls	r1, r3, #16
    16ea:	23c0      	movs	r3, #192	; 0xc0
    16ec:	029b      	lsls	r3, r3, #10
    16ee:	400b      	ands	r3, r1
    16f0:	431a      	orrs	r2, r3
    16f2:	687b      	ldr	r3, [r7, #4]
    16f4:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    16f6:	687b      	ldr	r3, [r7, #4]
    16f8:	2104      	movs	r1, #4
    16fa:	0018      	movs	r0, r3
    16fc:	4b02      	ldr	r3, [pc, #8]	; (1708 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x30>)
    16fe:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1700:	46c0      	nop			; (mov r8, r8)
    1702:	46bd      	mov	sp, r7
    1704:	b002      	add	sp, #8
    1706:	bd80      	pop	{r7, pc}
    1708:	000014c9 	.word	0x000014c9

0000170c <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    170c:	b580      	push	{r7, lr}
    170e:	b082      	sub	sp, #8
    1710:	af00      	add	r7, sp, #0
    1712:	6078      	str	r0, [r7, #4]
    1714:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1716:	687b      	ldr	r3, [r7, #4]
    1718:	683a      	ldr	r2, [r7, #0]
    171a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    171c:	687b      	ldr	r3, [r7, #4]
    171e:	2104      	movs	r1, #4
    1720:	0018      	movs	r0, r3
    1722:	4b03      	ldr	r3, [pc, #12]	; (1730 <hri_sercomi2cm_write_CTRLB_reg+0x24>)
    1724:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	46bd      	mov	sp, r7
    172a:	b002      	add	sp, #8
    172c:	bd80      	pop	{r7, pc}
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	000014c9 	.word	0x000014c9

00001734 <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    1734:	b580      	push	{r7, lr}
    1736:	b082      	sub	sp, #8
    1738:	af00      	add	r7, sp, #0
    173a:	6078      	str	r0, [r7, #4]
    173c:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    173e:	687b      	ldr	r3, [r7, #4]
    1740:	683a      	ldr	r2, [r7, #0]
    1742:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1744:	46c0      	nop			; (mov r8, r8)
    1746:	46bd      	mov	sp, r7
    1748:	b002      	add	sp, #8
    174a:	bd80      	pop	{r7, pc}

0000174c <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    174c:	b580      	push	{r7, lr}
    174e:	b084      	sub	sp, #16
    1750:	af00      	add	r7, sp, #0
    1752:	6078      	str	r0, [r7, #4]
    1754:	000a      	movs	r2, r1
    1756:	1cfb      	adds	r3, r7, #3
    1758:	701a      	strb	r2, [r3, #0]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    175a:	687b      	ldr	r3, [r7, #4]
    175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    175e:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1760:	68fb      	ldr	r3, [r7, #12]
    1762:	4a0b      	ldr	r2, [pc, #44]	; (1790 <hri_sercomi2cm_write_ADDR_HS_bit+0x44>)
    1764:	4013      	ands	r3, r2
    1766:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1768:	1cfb      	adds	r3, r7, #3
    176a:	781b      	ldrb	r3, [r3, #0]
    176c:	039b      	lsls	r3, r3, #14
    176e:	001a      	movs	r2, r3
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	4313      	orrs	r3, r2
    1774:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	68fa      	ldr	r2, [r7, #12]
    177a:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    177c:	687b      	ldr	r3, [r7, #4]
    177e:	2104      	movs	r1, #4
    1780:	0018      	movs	r0, r3
    1782:	4b04      	ldr	r3, [pc, #16]	; (1794 <hri_sercomi2cm_write_ADDR_HS_bit+0x48>)
    1784:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	46bd      	mov	sp, r7
    178a:	b004      	add	sp, #16
    178c:	bd80      	pop	{r7, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	ffffbfff 	.word	0xffffbfff
    1794:	000014c9 	.word	0x000014c9

00001798 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    1798:	b580      	push	{r7, lr}
    179a:	b082      	sub	sp, #8
    179c:	af00      	add	r7, sp, #0
    179e:	6078      	str	r0, [r7, #4]
    17a0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    17a2:	687b      	ldr	r3, [r7, #4]
    17a4:	683a      	ldr	r2, [r7, #0]
    17a6:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	2104      	movs	r1, #4
    17ac:	0018      	movs	r0, r3
    17ae:	4b03      	ldr	r3, [pc, #12]	; (17bc <hri_sercomi2cm_write_ADDR_reg+0x24>)
    17b0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	46bd      	mov	sp, r7
    17b6:	b002      	add	sp, #8
    17b8:	bd80      	pop	{r7, pc}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	000014c9 	.word	0x000014c9

000017c0 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	b082      	sub	sp, #8
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    17c8:	687b      	ldr	r3, [r7, #4]
    17ca:	2104      	movs	r1, #4
    17cc:	0018      	movs	r0, r3
    17ce:	4b04      	ldr	r3, [pc, #16]	; (17e0 <hri_sercomi2cm_read_ADDR_reg+0x20>)
    17d0:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    17d6:	0018      	movs	r0, r3
    17d8:	46bd      	mov	sp, r7
    17da:	b002      	add	sp, #8
    17dc:	bd80      	pop	{r7, pc}
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	000014c9 	.word	0x000014c9

000017e4 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    17e4:	b580      	push	{r7, lr}
    17e6:	b082      	sub	sp, #8
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
    17ec:	000a      	movs	r2, r1
    17ee:	1cfb      	adds	r3, r7, #3
    17f0:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    17f2:	687b      	ldr	r3, [r7, #4]
    17f4:	1cfa      	adds	r2, r7, #3
    17f6:	2128      	movs	r1, #40	; 0x28
    17f8:	7812      	ldrb	r2, [r2, #0]
    17fa:	545a      	strb	r2, [r3, r1]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    17fc:	687b      	ldr	r3, [r7, #4]
    17fe:	2104      	movs	r1, #4
    1800:	0018      	movs	r0, r3
    1802:	4b03      	ldr	r3, [pc, #12]	; (1810 <hri_sercomi2cm_write_DATA_reg+0x2c>)
    1804:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	46bd      	mov	sp, r7
    180a:	b002      	add	sp, #8
    180c:	bd80      	pop	{r7, pc}
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	000014c9 	.word	0x000014c9

00001814 <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    1814:	b580      	push	{r7, lr}
    1816:	b082      	sub	sp, #8
    1818:	af00      	add	r7, sp, #0
    181a:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    181c:	687b      	ldr	r3, [r7, #4]
    181e:	2104      	movs	r1, #4
    1820:	0018      	movs	r0, r3
    1822:	4b05      	ldr	r3, [pc, #20]	; (1838 <hri_sercomi2cm_read_DATA_reg+0x24>)
    1824:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	2228      	movs	r2, #40	; 0x28
    182a:	5c9b      	ldrb	r3, [r3, r2]
    182c:	b2db      	uxtb	r3, r3
}
    182e:	0018      	movs	r0, r3
    1830:	46bd      	mov	sp, r7
    1832:	b002      	add	sp, #8
    1834:	bd80      	pop	{r7, pc}
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	000014c9 	.word	0x000014c9

0000183c <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    183c:	b580      	push	{r7, lr}
    183e:	b082      	sub	sp, #8
    1840:	af00      	add	r7, sp, #0
    1842:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	2104      	movs	r1, #4
    1848:	0018      	movs	r0, r3
    184a:	4b07      	ldr	r3, [pc, #28]	; (1868 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x2c>)
    184c:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    184e:	687b      	ldr	r3, [r7, #4]
    1850:	8b5b      	ldrh	r3, [r3, #26]
    1852:	b29b      	uxth	r3, r3
    1854:	091b      	lsrs	r3, r3, #4
    1856:	b29b      	uxth	r3, r3
    1858:	2203      	movs	r2, #3
    185a:	4013      	ands	r3, r2
    185c:	b29b      	uxth	r3, r3
}
    185e:	0018      	movs	r0, r3
    1860:	46bd      	mov	sp, r7
    1862:	b002      	add	sp, #8
    1864:	bd80      	pop	{r7, pc}
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	000014c9 	.word	0x000014c9

0000186c <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    186c:	b580      	push	{r7, lr}
    186e:	b082      	sub	sp, #8
    1870:	af00      	add	r7, sp, #0
    1872:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    1874:	687b      	ldr	r3, [r7, #4]
    1876:	2104      	movs	r1, #4
    1878:	0018      	movs	r0, r3
    187a:	4b04      	ldr	r3, [pc, #16]	; (188c <hri_sercomi2cm_read_STATUS_reg+0x20>)
    187c:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    187e:	687b      	ldr	r3, [r7, #4]
    1880:	8b5b      	ldrh	r3, [r3, #26]
    1882:	b29b      	uxth	r3, r3
}
    1884:	0018      	movs	r0, r3
    1886:	46bd      	mov	sp, r7
    1888:	b002      	add	sp, #8
    188a:	bd80      	pop	{r7, pc}
    188c:	000014c9 	.word	0x000014c9

00001890 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    1890:	b580      	push	{r7, lr}
    1892:	b082      	sub	sp, #8
    1894:	af00      	add	r7, sp, #0
    1896:	6078      	str	r0, [r7, #4]
    1898:	000a      	movs	r2, r1
    189a:	1cbb      	adds	r3, r7, #2
    189c:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    189e:	687b      	ldr	r3, [r7, #4]
    18a0:	1cba      	adds	r2, r7, #2
    18a2:	8812      	ldrh	r2, [r2, #0]
    18a4:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    18a6:	687b      	ldr	r3, [r7, #4]
    18a8:	2104      	movs	r1, #4
    18aa:	0018      	movs	r0, r3
    18ac:	4b02      	ldr	r3, [pc, #8]	; (18b8 <hri_sercomi2cm_clear_STATUS_reg+0x28>)
    18ae:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    18b0:	46c0      	nop			; (mov r8, r8)
    18b2:	46bd      	mov	sp, r7
    18b4:	b002      	add	sp, #8
    18b6:	bd80      	pop	{r7, pc}
    18b8:	000014c9 	.word	0x000014c9

000018bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    18bc:	b580      	push	{r7, lr}
    18be:	b082      	sub	sp, #8
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	4a08      	ldr	r2, [pc, #32]	; (18e8 <_sercom_get_hardware_index+0x2c>)
    18c8:	4293      	cmp	r3, r2
    18ca:	d101      	bne.n	18d0 <_sercom_get_hardware_index+0x14>
		return 5;
    18cc:	2305      	movs	r3, #5
    18ce:	e006      	b.n	18de <_sercom_get_hardware_index+0x22>
	}

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    18d0:	687b      	ldr	r3, [r7, #4]
    18d2:	22be      	movs	r2, #190	; 0xbe
    18d4:	0612      	lsls	r2, r2, #24
    18d6:	4694      	mov	ip, r2
    18d8:	4463      	add	r3, ip
    18da:	0a9b      	lsrs	r3, r3, #10
    18dc:	b2db      	uxtb	r3, r3
}
    18de:	0018      	movs	r0, r3
    18e0:	46bd      	mov	sp, r7
    18e2:	b002      	add	sp, #8
    18e4:	bd80      	pop	{r7, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	43000400 	.word	0x43000400

000018ec <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    18ec:	b590      	push	{r4, r7, lr}
    18ee:	b085      	sub	sp, #20
    18f0:	af00      	add	r7, sp, #0
    18f2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    18f4:	230e      	movs	r3, #14
    18f6:	18fc      	adds	r4, r7, r3
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	0018      	movs	r0, r3
    18fc:	4b19      	ldr	r3, [pc, #100]	; (1964 <_get_i2cm_index+0x78>)
    18fe:	4798      	blx	r3
    1900:	0003      	movs	r3, r0
    1902:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1904:	230f      	movs	r3, #15
    1906:	18fb      	adds	r3, r7, r3
    1908:	2200      	movs	r2, #0
    190a:	701a      	strb	r2, [r3, #0]
    190c:	e019      	b.n	1942 <_get_i2cm_index+0x56>
		if (_i2cms[i].number == sercom_offset) {
    190e:	230f      	movs	r3, #15
    1910:	18fb      	adds	r3, r7, r3
    1912:	781a      	ldrb	r2, [r3, #0]
    1914:	4914      	ldr	r1, [pc, #80]	; (1968 <_get_i2cm_index+0x7c>)
    1916:	0013      	movs	r3, r2
    1918:	005b      	lsls	r3, r3, #1
    191a:	189b      	adds	r3, r3, r2
    191c:	00db      	lsls	r3, r3, #3
    191e:	5c5b      	ldrb	r3, [r3, r1]
    1920:	220e      	movs	r2, #14
    1922:	18ba      	adds	r2, r7, r2
    1924:	7812      	ldrb	r2, [r2, #0]
    1926:	429a      	cmp	r2, r3
    1928:	d104      	bne.n	1934 <_get_i2cm_index+0x48>
			return i;
    192a:	230f      	movs	r3, #15
    192c:	18fb      	adds	r3, r7, r3
    192e:	781b      	ldrb	r3, [r3, #0]
    1930:	b25b      	sxtb	r3, r3
    1932:	e013      	b.n	195c <_get_i2cm_index+0x70>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1934:	230f      	movs	r3, #15
    1936:	18fb      	adds	r3, r7, r3
    1938:	781a      	ldrb	r2, [r3, #0]
    193a:	230f      	movs	r3, #15
    193c:	18fb      	adds	r3, r7, r3
    193e:	3201      	adds	r2, #1
    1940:	701a      	strb	r2, [r3, #0]
    1942:	230f      	movs	r3, #15
    1944:	18fb      	adds	r3, r7, r3
    1946:	781b      	ldrb	r3, [r3, #0]
    1948:	2b00      	cmp	r3, #0
    194a:	d0e0      	beq.n	190e <_get_i2cm_index+0x22>
		}
	}

	ASSERT(false);
    194c:	4a07      	ldr	r2, [pc, #28]	; (196c <_get_i2cm_index+0x80>)
    194e:	4b08      	ldr	r3, [pc, #32]	; (1970 <_get_i2cm_index+0x84>)
    1950:	0019      	movs	r1, r3
    1952:	2000      	movs	r0, #0
    1954:	4b07      	ldr	r3, [pc, #28]	; (1974 <_get_i2cm_index+0x88>)
    1956:	4798      	blx	r3
	return -1;
    1958:	2301      	movs	r3, #1
    195a:	425b      	negs	r3, r3
}
    195c:	0018      	movs	r0, r3
    195e:	46bd      	mov	sp, r7
    1960:	b005      	add	sp, #20
    1962:	bd90      	pop	{r4, r7, pc}
    1964:	000018bd 	.word	0x000018bd
    1968:	20000000 	.word	0x20000000
    196c:	0000039b 	.word	0x0000039b
    1970:	0000428c 	.word	0x0000428c
    1974:	00000cb9 	.word	0x00000cb9

00001978 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    1978:	b580      	push	{r7, lr}
    197a:	b082      	sub	sp, #8
    197c:	af00      	add	r7, sp, #0
    197e:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	2103      	movs	r1, #3
    1984:	0018      	movs	r0, r3
    1986:	4b03      	ldr	r3, [pc, #12]	; (1994 <_sercom_i2c_send_stop+0x1c>)
    1988:	4798      	blx	r3
}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	46bd      	mov	sp, r7
    198e:	b002      	add	sp, #8
    1990:	bd80      	pop	{r7, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	000016d9 	.word	0x000016d9

00001998 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    1998:	b590      	push	{r4, r7, lr}
    199a:	b087      	sub	sp, #28
    199c:	af00      	add	r7, sp, #0
    199e:	60f8      	str	r0, [r7, #12]
    19a0:	60b9      	str	r1, [r7, #8]
    19a2:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    19a4:	68fb      	ldr	r3, [r7, #12]
    19a6:	0018      	movs	r0, r3
    19a8:	4b87      	ldr	r3, [pc, #540]	; (1bc8 <_sercom_i2c_sync_analyse_flags+0x230>)
    19aa:	4798      	blx	r3
    19ac:	0003      	movs	r3, r0
    19ae:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    19b0:	2312      	movs	r3, #18
    19b2:	18fc      	adds	r4, r7, r3
    19b4:	68fb      	ldr	r3, [r7, #12]
    19b6:	0018      	movs	r0, r3
    19b8:	4b84      	ldr	r3, [pc, #528]	; (1bcc <_sercom_i2c_sync_analyse_flags+0x234>)
    19ba:	4798      	blx	r3
    19bc:	0003      	movs	r3, r0
    19be:	8023      	strh	r3, [r4, #0]

	if (flags & MB_FLAG) {
    19c0:	68bb      	ldr	r3, [r7, #8]
    19c2:	2201      	movs	r2, #1
    19c4:	4013      	ands	r3, r2
    19c6:	d100      	bne.n	19ca <_sercom_i2c_sync_analyse_flags+0x32>
    19c8:	e0a3      	b.n	1b12 <_sercom_i2c_sync_analyse_flags+0x17a>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    19ca:	2312      	movs	r3, #18
    19cc:	18fb      	adds	r3, r7, r3
    19ce:	881b      	ldrh	r3, [r3, #0]
    19d0:	2202      	movs	r2, #2
    19d2:	4013      	ands	r3, r2
    19d4:	d020      	beq.n	1a18 <_sercom_i2c_sync_analyse_flags+0x80>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    19d6:	68fb      	ldr	r3, [r7, #12]
    19d8:	0018      	movs	r0, r3
    19da:	4b7d      	ldr	r3, [pc, #500]	; (1bd0 <_sercom_i2c_sync_analyse_flags+0x238>)
    19dc:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    19de:	687b      	ldr	r3, [r7, #4]
    19e0:	885b      	ldrh	r3, [r3, #2]
    19e2:	b29b      	uxth	r3, r3
    19e4:	2280      	movs	r2, #128	; 0x80
    19e6:	0152      	lsls	r2, r2, #5
    19e8:	4313      	orrs	r3, r2
    19ea:	b29a      	uxth	r2, r3
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	885b      	ldrh	r3, [r3, #2]
    19f4:	b29b      	uxth	r3, r3
    19f6:	4a77      	ldr	r2, [pc, #476]	; (1bd4 <_sercom_i2c_sync_analyse_flags+0x23c>)
    19f8:	4013      	ands	r3, r2
    19fa:	b29a      	uxth	r2, r3
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1a00:	2312      	movs	r3, #18
    1a02:	18fb      	adds	r3, r7, r3
    1a04:	881b      	ldrh	r3, [r3, #0]
    1a06:	2201      	movs	r2, #1
    1a08:	4013      	ands	r3, r2
    1a0a:	d002      	beq.n	1a12 <_sercom_i2c_sync_analyse_flags+0x7a>
				return I2C_ERR_BUS;
    1a0c:	2305      	movs	r3, #5
    1a0e:	425b      	negs	r3, r3
    1a10:	e0d6      	b.n	1bc0 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			return I2C_ERR_BAD_ADDRESS;
    1a12:	2304      	movs	r3, #4
    1a14:	425b      	negs	r3, r3
    1a16:	e0d3      	b.n	1bc0 <_sercom_i2c_sync_analyse_flags+0x228>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1a18:	2312      	movs	r3, #18
    1a1a:	18fb      	adds	r3, r7, r3
    1a1c:	881b      	ldrh	r3, [r3, #0]
    1a1e:	2204      	movs	r2, #4
    1a20:	4013      	ands	r3, r2
    1a22:	d021      	beq.n	1a68 <_sercom_i2c_sync_analyse_flags+0xd0>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    1a24:	687b      	ldr	r3, [r7, #4]
    1a26:	685b      	ldr	r3, [r3, #4]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	dd08      	ble.n	1a3e <_sercom_i2c_sync_analyse_flags+0xa6>
					msg->flags |= I2C_M_FAIL;
    1a2c:	687b      	ldr	r3, [r7, #4]
    1a2e:	885b      	ldrh	r3, [r3, #2]
    1a30:	b29b      	uxth	r3, r3
    1a32:	2280      	movs	r2, #128	; 0x80
    1a34:	0152      	lsls	r2, r2, #5
    1a36:	4313      	orrs	r3, r2
    1a38:	b29a      	uxth	r2, r3
    1a3a:	687b      	ldr	r3, [r7, #4]
    1a3c:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    1a3e:	687b      	ldr	r3, [r7, #4]
    1a40:	885b      	ldrh	r3, [r3, #2]
    1a42:	b29b      	uxth	r3, r3
    1a44:	b21b      	sxth	r3, r3
    1a46:	2b00      	cmp	r3, #0
    1a48:	da03      	bge.n	1a52 <_sercom_i2c_sync_analyse_flags+0xba>
					_sercom_i2c_send_stop(hw);
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	0018      	movs	r0, r3
    1a4e:	4b62      	ldr	r3, [pc, #392]	; (1bd8 <_sercom_i2c_sync_analyse_flags+0x240>)
    1a50:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    1a52:	687b      	ldr	r3, [r7, #4]
    1a54:	885b      	ldrh	r3, [r3, #2]
    1a56:	b29b      	uxth	r3, r3
    1a58:	4a5e      	ldr	r2, [pc, #376]	; (1bd4 <_sercom_i2c_sync_analyse_flags+0x23c>)
    1a5a:	4013      	ands	r3, r2
    1a5c:	b29a      	uxth	r2, r3
    1a5e:	687b      	ldr	r3, [r7, #4]
    1a60:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    1a62:	2302      	movs	r3, #2
    1a64:	425b      	negs	r3, r3
    1a66:	e0ab      	b.n	1bc0 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->flags & I2C_M_TEN) {
    1a68:	687b      	ldr	r3, [r7, #4]
    1a6a:	885b      	ldrh	r3, [r3, #2]
    1a6c:	b29b      	uxth	r3, r3
    1a6e:	001a      	movs	r2, r3
    1a70:	2380      	movs	r3, #128	; 0x80
    1a72:	00db      	lsls	r3, r3, #3
    1a74:	4013      	ands	r3, r2
    1a76:	d021      	beq.n	1abc <_sercom_i2c_sync_analyse_flags+0x124>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1a78:	687b      	ldr	r3, [r7, #4]
    1a7a:	881b      	ldrh	r3, [r3, #0]
    1a7c:	121b      	asrs	r3, r3, #8
    1a7e:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1a80:	001a      	movs	r2, r3
    1a82:	2306      	movs	r3, #6
    1a84:	401a      	ands	r2, r3
    1a86:	0014      	movs	r4, r2
    1a88:	68fb      	ldr	r3, [r7, #12]
    1a8a:	0018      	movs	r0, r3
    1a8c:	4b53      	ldr	r3, [pc, #332]	; (1bdc <_sercom_i2c_sync_analyse_flags+0x244>)
    1a8e:	4798      	blx	r3
    1a90:	0002      	movs	r2, r0
    1a92:	2380      	movs	r3, #128	; 0x80
    1a94:	01db      	lsls	r3, r3, #7
    1a96:	4013      	ands	r3, r2
    1a98:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    1a9a:	22f1      	movs	r2, #241	; 0xf1
    1a9c:	431a      	orrs	r2, r3
    1a9e:	68fb      	ldr	r3, [r7, #12]
    1aa0:	0011      	movs	r1, r2
    1aa2:	0018      	movs	r0, r3
    1aa4:	4b4e      	ldr	r3, [pc, #312]	; (1be0 <_sercom_i2c_sync_analyse_flags+0x248>)
    1aa6:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    1aa8:	687b      	ldr	r3, [r7, #4]
    1aaa:	885b      	ldrh	r3, [r3, #2]
    1aac:	b29b      	uxth	r3, r3
    1aae:	4a4d      	ldr	r2, [pc, #308]	; (1be4 <_sercom_i2c_sync_analyse_flags+0x24c>)
    1ab0:	4013      	ands	r3, r2
    1ab2:	b29a      	uxth	r2, r3
    1ab4:	687b      	ldr	r3, [r7, #4]
    1ab6:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    1ab8:	2300      	movs	r3, #0
    1aba:	e081      	b.n	1bc0 <_sercom_i2c_sync_analyse_flags+0x228>
			}

			if (msg->len == 0) {
    1abc:	687b      	ldr	r3, [r7, #4]
    1abe:	685b      	ldr	r3, [r3, #4]
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d112      	bne.n	1aea <_sercom_i2c_sync_analyse_flags+0x152>
				if (msg->flags & I2C_M_STOP) {
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	885b      	ldrh	r3, [r3, #2]
    1ac8:	b29b      	uxth	r3, r3
    1aca:	b21b      	sxth	r3, r3
    1acc:	2b00      	cmp	r3, #0
    1ace:	da03      	bge.n	1ad8 <_sercom_i2c_sync_analyse_flags+0x140>
					_sercom_i2c_send_stop(hw);
    1ad0:	68fb      	ldr	r3, [r7, #12]
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b40      	ldr	r3, [pc, #256]	; (1bd8 <_sercom_i2c_sync_analyse_flags+0x240>)
    1ad6:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    1ad8:	687b      	ldr	r3, [r7, #4]
    1ada:	885b      	ldrh	r3, [r3, #2]
    1adc:	b29b      	uxth	r3, r3
    1ade:	4a3d      	ldr	r2, [pc, #244]	; (1bd4 <_sercom_i2c_sync_analyse_flags+0x23c>)
    1ae0:	4013      	ands	r3, r2
    1ae2:	b29a      	uxth	r2, r3
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	805a      	strh	r2, [r3, #2]
    1ae8:	e011      	b.n	1b0e <_sercom_i2c_sync_analyse_flags+0x176>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1aea:	687b      	ldr	r3, [r7, #4]
    1aec:	689b      	ldr	r3, [r3, #8]
    1aee:	781a      	ldrb	r2, [r3, #0]
    1af0:	68fb      	ldr	r3, [r7, #12]
    1af2:	0011      	movs	r1, r2
    1af4:	0018      	movs	r0, r3
    1af6:	4b3c      	ldr	r3, [pc, #240]	; (1be8 <_sercom_i2c_sync_analyse_flags+0x250>)
    1af8:	4798      	blx	r3
				msg->buffer++;
    1afa:	687b      	ldr	r3, [r7, #4]
    1afc:	689b      	ldr	r3, [r3, #8]
    1afe:	1c5a      	adds	r2, r3, #1
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	609a      	str	r2, [r3, #8]
				msg->len--;
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	685b      	ldr	r3, [r3, #4]
    1b08:	1e5a      	subs	r2, r3, #1
    1b0a:	687b      	ldr	r3, [r7, #4]
    1b0c:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    1b0e:	2300      	movs	r3, #0
    1b10:	e056      	b.n	1bc0 <_sercom_i2c_sync_analyse_flags+0x228>
		}
	} else if (flags & SB_FLAG) {
    1b12:	68bb      	ldr	r3, [r7, #8]
    1b14:	2202      	movs	r2, #2
    1b16:	4013      	ands	r3, r2
    1b18:	d051      	beq.n	1bbe <_sercom_i2c_sync_analyse_flags+0x226>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1b1a:	687b      	ldr	r3, [r7, #4]
    1b1c:	685b      	ldr	r3, [r3, #4]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d046      	beq.n	1bb0 <_sercom_i2c_sync_analyse_flags+0x218>
    1b22:	2312      	movs	r3, #18
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	881b      	ldrh	r3, [r3, #0]
    1b28:	2204      	movs	r2, #4
    1b2a:	4013      	ands	r3, r2
    1b2c:	d140      	bne.n	1bb0 <_sercom_i2c_sync_analyse_flags+0x218>
			msg->len--;
    1b2e:	687b      	ldr	r3, [r7, #4]
    1b30:	685b      	ldr	r3, [r3, #4]
    1b32:	1e5a      	subs	r2, r3, #1
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	685b      	ldr	r3, [r3, #4]
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d102      	bne.n	1b46 <_sercom_i2c_sync_analyse_flags+0x1ae>
    1b40:	697b      	ldr	r3, [r7, #20]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d006      	beq.n	1b54 <_sercom_i2c_sync_analyse_flags+0x1bc>
    1b46:	687b      	ldr	r3, [r7, #4]
    1b48:	685b      	ldr	r3, [r3, #4]
    1b4a:	2b01      	cmp	r3, #1
    1b4c:	d106      	bne.n	1b5c <_sercom_i2c_sync_analyse_flags+0x1c4>
    1b4e:	697b      	ldr	r3, [r7, #20]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d003      	beq.n	1b5c <_sercom_i2c_sync_analyse_flags+0x1c4>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    1b54:	68fb      	ldr	r3, [r7, #12]
    1b56:	0018      	movs	r0, r3
    1b58:	4b24      	ldr	r3, [pc, #144]	; (1bec <_sercom_i2c_sync_analyse_flags+0x254>)
    1b5a:	4798      	blx	r3
			}

			if (msg->len == 0) {
    1b5c:	687b      	ldr	r3, [r7, #4]
    1b5e:	685b      	ldr	r3, [r3, #4]
    1b60:	2b00      	cmp	r3, #0
    1b62:	d115      	bne.n	1b90 <_sercom_i2c_sync_analyse_flags+0x1f8>
				if (msg->flags & I2C_M_STOP) {
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	885b      	ldrh	r3, [r3, #2]
    1b68:	b29b      	uxth	r3, r3
    1b6a:	b21b      	sxth	r3, r3
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	da07      	bge.n	1b80 <_sercom_i2c_sync_analyse_flags+0x1e8>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    1b70:	68fb      	ldr	r3, [r7, #12]
    1b72:	0018      	movs	r0, r3
    1b74:	4b1e      	ldr	r3, [pc, #120]	; (1bf0 <_sercom_i2c_sync_analyse_flags+0x258>)
    1b76:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    1b78:	68fb      	ldr	r3, [r7, #12]
    1b7a:	0018      	movs	r0, r3
    1b7c:	4b16      	ldr	r3, [pc, #88]	; (1bd8 <_sercom_i2c_sync_analyse_flags+0x240>)
    1b7e:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    1b80:	687b      	ldr	r3, [r7, #4]
    1b82:	885b      	ldrh	r3, [r3, #2]
    1b84:	b29b      	uxth	r3, r3
    1b86:	4a13      	ldr	r2, [pc, #76]	; (1bd4 <_sercom_i2c_sync_analyse_flags+0x23c>)
    1b88:	4013      	ands	r3, r2
    1b8a:	b29a      	uxth	r2, r3
    1b8c:	687b      	ldr	r3, [r7, #4]
    1b8e:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1b90:	687b      	ldr	r3, [r7, #4]
    1b92:	689c      	ldr	r4, [r3, #8]
    1b94:	1c62      	adds	r2, r4, #1
    1b96:	687b      	ldr	r3, [r7, #4]
    1b98:	609a      	str	r2, [r3, #8]
    1b9a:	68fb      	ldr	r3, [r7, #12]
    1b9c:	0018      	movs	r0, r3
    1b9e:	4b15      	ldr	r3, [pc, #84]	; (1bf4 <_sercom_i2c_sync_analyse_flags+0x25c>)
    1ba0:	4798      	blx	r3
    1ba2:	0003      	movs	r3, r0
    1ba4:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    1ba6:	68fb      	ldr	r3, [r7, #12]
    1ba8:	0018      	movs	r0, r3
    1baa:	4b13      	ldr	r3, [pc, #76]	; (1bf8 <_sercom_i2c_sync_analyse_flags+0x260>)
    1bac:	4798      	blx	r3
    1bae:	e006      	b.n	1bbe <_sercom_i2c_sync_analyse_flags+0x226>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    1bb0:	68fb      	ldr	r3, [r7, #12]
    1bb2:	0018      	movs	r0, r3
    1bb4:	4b10      	ldr	r3, [pc, #64]	; (1bf8 <_sercom_i2c_sync_analyse_flags+0x260>)
    1bb6:	4798      	blx	r3
			return I2C_NACK;
    1bb8:	2302      	movs	r3, #2
    1bba:	425b      	negs	r3, r3
    1bbc:	e000      	b.n	1bc0 <_sercom_i2c_sync_analyse_flags+0x228>
	}

	return I2C_OK;
    1bbe:	2300      	movs	r3, #0
}
    1bc0:	0018      	movs	r0, r3
    1bc2:	46bd      	mov	sp, r7
    1bc4:	b007      	add	sp, #28
    1bc6:	bd90      	pop	{r4, r7, pc}
    1bc8:	000015a1 	.word	0x000015a1
    1bcc:	0000186d 	.word	0x0000186d
    1bd0:	00001507 	.word	0x00001507
    1bd4:	fffffeff 	.word	0xfffffeff
    1bd8:	00001979 	.word	0x00001979
    1bdc:	000017c1 	.word	0x000017c1
    1be0:	00001799 	.word	0x00001799
    1be4:	fffffbff 	.word	0xfffffbff
    1be8:	000017e5 	.word	0x000017e5
    1bec:	0000167d 	.word	0x0000167d
    1bf0:	0000164d 	.word	0x0000164d
    1bf4:	00001815 	.word	0x00001815
    1bf8:	0000151d 	.word	0x0000151d

00001bfc <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    1bfc:	b580      	push	{r7, lr}
    1bfe:	b082      	sub	sp, #8
    1c00:	af00      	add	r7, sp, #0
    1c02:	6078      	str	r0, [r7, #4]
    1c04:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    1c06:	687b      	ldr	r3, [r7, #4]
    1c08:	1e5a      	subs	r2, r3, #1
    1c0a:	4193      	sbcs	r3, r2
    1c0c:	b2db      	uxtb	r3, r3
    1c0e:	4a09      	ldr	r2, [pc, #36]	; (1c34 <_i2c_m_sync_init+0x38>)
    1c10:	4909      	ldr	r1, [pc, #36]	; (1c38 <_i2c_m_sync_init+0x3c>)
    1c12:	0018      	movs	r0, r3
    1c14:	4b09      	ldr	r3, [pc, #36]	; (1c3c <_i2c_m_sync_init+0x40>)
    1c16:	4798      	blx	r3

	i2c_dev->hw = hw;
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	683a      	ldr	r2, [r7, #0]
    1c1c:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1c1e:	687b      	ldr	r3, [r7, #4]
    1c20:	683a      	ldr	r2, [r7, #0]
    1c22:	0011      	movs	r1, r2
    1c24:	0018      	movs	r0, r3
    1c26:	4b06      	ldr	r3, [pc, #24]	; (1c40 <_i2c_m_sync_init+0x44>)
    1c28:	4798      	blx	r3
    1c2a:	0003      	movs	r3, r0
}
    1c2c:	0018      	movs	r0, r3
    1c2e:	46bd      	mov	sp, r7
    1c30:	b002      	add	sp, #8
    1c32:	bd80      	pop	{r7, pc}
    1c34:	0000050a 	.word	0x0000050a
    1c38:	0000428c 	.word	0x0000428c
    1c3c:	00000cb9 	.word	0x00000cb9
    1c40:	00001fed 	.word	0x00001fed

00001c44 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    1c44:	b580      	push	{r7, lr}
    1c46:	b082      	sub	sp, #8
    1c48:	af00      	add	r7, sp, #0
    1c4a:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	1e5a      	subs	r2, r3, #1
    1c50:	4193      	sbcs	r3, r2
    1c52:	b2db      	uxtb	r3, r3
    1c54:	4a07      	ldr	r2, [pc, #28]	; (1c74 <_i2c_m_sync_enable+0x30>)
    1c56:	4908      	ldr	r1, [pc, #32]	; (1c78 <_i2c_m_sync_enable+0x34>)
    1c58:	0018      	movs	r0, r3
    1c5a:	4b08      	ldr	r3, [pc, #32]	; (1c7c <_i2c_m_sync_enable+0x38>)
    1c5c:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    1c5e:	687b      	ldr	r3, [r7, #4]
    1c60:	691b      	ldr	r3, [r3, #16]
    1c62:	0018      	movs	r0, r3
    1c64:	4b06      	ldr	r3, [pc, #24]	; (1c80 <_i2c_m_sync_enable+0x3c>)
    1c66:	4798      	blx	r3
    1c68:	0003      	movs	r3, r0
}
    1c6a:	0018      	movs	r0, r3
    1c6c:	46bd      	mov	sp, r7
    1c6e:	b002      	add	sp, #8
    1c70:	bd80      	pop	{r7, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	00000527 	.word	0x00000527
    1c78:	0000428c 	.word	0x0000428c
    1c7c:	00000cb9 	.word	0x00000cb9
    1c80:	00001f5d 	.word	0x00001f5d

00001c84 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    1c84:	b580      	push	{r7, lr}
    1c86:	b084      	sub	sp, #16
    1c88:	af00      	add	r7, sp, #0
    1c8a:	6078      	str	r0, [r7, #4]
    1c8c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    1c8e:	4b12      	ldr	r3, [pc, #72]	; (1cd8 <_sercom_i2c_sync_wait_bus+0x54>)
    1c90:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    1c92:	687b      	ldr	r3, [r7, #4]
    1c94:	691b      	ldr	r3, [r3, #16]
    1c96:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1c98:	68bb      	ldr	r3, [r7, #8]
    1c9a:	0018      	movs	r0, r3
    1c9c:	4b0f      	ldr	r3, [pc, #60]	; (1cdc <_sercom_i2c_sync_wait_bus+0x58>)
    1c9e:	4798      	blx	r3
    1ca0:	0003      	movs	r3, r0
    1ca2:	001a      	movs	r2, r3
    1ca4:	683b      	ldr	r3, [r7, #0]
    1ca6:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    1ca8:	68fb      	ldr	r3, [r7, #12]
    1caa:	1e5a      	subs	r2, r3, #1
    1cac:	60fa      	str	r2, [r7, #12]
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d102      	bne.n	1cb8 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    1cb2:	2305      	movs	r3, #5
    1cb4:	425b      	negs	r3, r3
    1cb6:	e00a      	b.n	1cce <_sercom_i2c_sync_wait_bus+0x4a>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1cb8:	683b      	ldr	r3, [r7, #0]
    1cba:	681b      	ldr	r3, [r3, #0]
    1cbc:	2201      	movs	r2, #1
    1cbe:	4013      	ands	r3, r2
    1cc0:	d104      	bne.n	1ccc <_sercom_i2c_sync_wait_bus+0x48>
    1cc2:	683b      	ldr	r3, [r7, #0]
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	2202      	movs	r2, #2
    1cc8:	4013      	ands	r3, r2
    1cca:	d0e5      	beq.n	1c98 <_sercom_i2c_sync_wait_bus+0x14>

	return I2C_OK;
    1ccc:	2300      	movs	r3, #0
}
    1cce:	0018      	movs	r0, r3
    1cd0:	46bd      	mov	sp, r7
    1cd2:	b004      	add	sp, #16
    1cd4:	bd80      	pop	{r7, pc}
    1cd6:	46c0      	nop			; (mov r8, r8)
    1cd8:	0000ffff 	.word	0x0000ffff
    1cdc:	00001533 	.word	0x00001533

00001ce0 <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    1ce0:	b590      	push	{r4, r7, lr}
    1ce2:	b087      	sub	sp, #28
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	691b      	ldr	r3, [r3, #16]
    1cec:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    1cf2:	697b      	ldr	r3, [r7, #20]
    1cf4:	0018      	movs	r0, r3
    1cf6:	4b3f      	ldr	r3, [pc, #252]	; (1df4 <_sercom_i2c_sync_send_address+0x114>)
    1cf8:	4798      	blx	r3
    1cfa:	0003      	movs	r3, r0
    1cfc:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    1cfe:	687b      	ldr	r3, [r7, #4]
    1d00:	1e5a      	subs	r2, r3, #1
    1d02:	4193      	sbcs	r3, r2
    1d04:	b2db      	uxtb	r3, r3
    1d06:	4a3c      	ldr	r2, [pc, #240]	; (1df8 <_sercom_i2c_sync_send_address+0x118>)
    1d08:	493c      	ldr	r1, [pc, #240]	; (1dfc <_sercom_i2c_sync_send_address+0x11c>)
    1d0a:	0018      	movs	r0, r3
    1d0c:	4b3c      	ldr	r3, [pc, #240]	; (1e00 <_sercom_i2c_sync_send_address+0x120>)
    1d0e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    1d10:	693b      	ldr	r3, [r7, #16]
    1d12:	685b      	ldr	r3, [r3, #4]
    1d14:	2b01      	cmp	r3, #1
    1d16:	d107      	bne.n	1d28 <_sercom_i2c_sync_send_address+0x48>
    1d18:	68fb      	ldr	r3, [r7, #12]
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d004      	beq.n	1d28 <_sercom_i2c_sync_send_address+0x48>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    1d1e:	697b      	ldr	r3, [r7, #20]
    1d20:	0018      	movs	r0, r3
    1d22:	4b38      	ldr	r3, [pc, #224]	; (1e04 <_sercom_i2c_sync_send_address+0x124>)
    1d24:	4798      	blx	r3
    1d26:	e003      	b.n	1d30 <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    1d28:	697b      	ldr	r3, [r7, #20]
    1d2a:	0018      	movs	r0, r3
    1d2c:	4b36      	ldr	r3, [pc, #216]	; (1e08 <_sercom_i2c_sync_send_address+0x128>)
    1d2e:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    1d30:	693b      	ldr	r3, [r7, #16]
    1d32:	881b      	ldrh	r3, [r3, #0]
    1d34:	001a      	movs	r2, r3
    1d36:	2380      	movs	r3, #128	; 0x80
    1d38:	00db      	lsls	r3, r3, #3
    1d3a:	4013      	ands	r3, r2
    1d3c:	d028      	beq.n	1d90 <_sercom_i2c_sync_send_address+0xb0>
		if (msg->flags & I2C_M_RD) {
    1d3e:	693b      	ldr	r3, [r7, #16]
    1d40:	885b      	ldrh	r3, [r3, #2]
    1d42:	b29b      	uxth	r3, r3
    1d44:	001a      	movs	r2, r3
    1d46:	2301      	movs	r3, #1
    1d48:	4013      	ands	r3, r2
    1d4a:	d008      	beq.n	1d5e <_sercom_i2c_sync_send_address+0x7e>
			msg->flags |= I2C_M_TEN;
    1d4c:	693b      	ldr	r3, [r7, #16]
    1d4e:	885b      	ldrh	r3, [r3, #2]
    1d50:	b29b      	uxth	r3, r3
    1d52:	2280      	movs	r2, #128	; 0x80
    1d54:	00d2      	lsls	r2, r2, #3
    1d56:	4313      	orrs	r3, r2
    1d58:	b29a      	uxth	r2, r3
    1d5a:	693b      	ldr	r3, [r7, #16]
    1d5c:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    1d5e:	693b      	ldr	r3, [r7, #16]
    1d60:	881b      	ldrh	r3, [r3, #0]
    1d62:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1d64:	001a      	movs	r2, r3
    1d66:	4b29      	ldr	r3, [pc, #164]	; (1e0c <_sercom_i2c_sync_send_address+0x12c>)
    1d68:	401a      	ands	r2, r3
    1d6a:	0014      	movs	r4, r2
    1d6c:	697b      	ldr	r3, [r7, #20]
    1d6e:	0018      	movs	r0, r3
    1d70:	4b27      	ldr	r3, [pc, #156]	; (1e10 <_sercom_i2c_sync_send_address+0x130>)
    1d72:	4798      	blx	r3
    1d74:	0002      	movs	r2, r0
    1d76:	2380      	movs	r3, #128	; 0x80
    1d78:	01db      	lsls	r3, r3, #7
    1d7a:	4013      	ands	r3, r2
    1d7c:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    1d7e:	2280      	movs	r2, #128	; 0x80
    1d80:	0212      	lsls	r2, r2, #8
    1d82:	431a      	orrs	r2, r3
    1d84:	697b      	ldr	r3, [r7, #20]
    1d86:	0011      	movs	r1, r2
    1d88:	0018      	movs	r0, r3
    1d8a:	4b22      	ldr	r3, [pc, #136]	; (1e14 <_sercom_i2c_sync_send_address+0x134>)
    1d8c:	4798      	blx	r3
    1d8e:	e01e      	b.n	1dce <_sercom_i2c_sync_send_address+0xee>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1d90:	693b      	ldr	r3, [r7, #16]
    1d92:	881b      	ldrh	r3, [r3, #0]
    1d94:	005b      	lsls	r3, r3, #1
    1d96:	22ff      	movs	r2, #255	; 0xff
    1d98:	4013      	ands	r3, r2
    1d9a:	693a      	ldr	r2, [r7, #16]
    1d9c:	8852      	ldrh	r2, [r2, #2]
    1d9e:	b292      	uxth	r2, r2
    1da0:	0011      	movs	r1, r2
    1da2:	2201      	movs	r2, #1
    1da4:	400a      	ands	r2, r1
    1da6:	1e51      	subs	r1, r2, #1
    1da8:	418a      	sbcs	r2, r1
    1daa:	b2d2      	uxtb	r2, r2
    1dac:	4313      	orrs	r3, r2
    1dae:	001c      	movs	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1db0:	697b      	ldr	r3, [r7, #20]
    1db2:	0018      	movs	r0, r3
    1db4:	4b16      	ldr	r3, [pc, #88]	; (1e10 <_sercom_i2c_sync_send_address+0x130>)
    1db6:	4798      	blx	r3
    1db8:	0002      	movs	r2, r0
    1dba:	2380      	movs	r3, #128	; 0x80
    1dbc:	01db      	lsls	r3, r3, #7
    1dbe:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1dc0:	0022      	movs	r2, r4
    1dc2:	431a      	orrs	r2, r3
    1dc4:	697b      	ldr	r3, [r7, #20]
    1dc6:	0011      	movs	r1, r2
    1dc8:	0018      	movs	r0, r3
    1dca:	4b12      	ldr	r3, [pc, #72]	; (1e14 <_sercom_i2c_sync_send_address+0x134>)
    1dcc:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    1dce:	2308      	movs	r3, #8
    1dd0:	18fa      	adds	r2, r7, r3
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	0011      	movs	r1, r2
    1dd6:	0018      	movs	r0, r3
    1dd8:	4b0f      	ldr	r3, [pc, #60]	; (1e18 <_sercom_i2c_sync_send_address+0x138>)
    1dda:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    1ddc:	68b9      	ldr	r1, [r7, #8]
    1dde:	693a      	ldr	r2, [r7, #16]
    1de0:	697b      	ldr	r3, [r7, #20]
    1de2:	0018      	movs	r0, r3
    1de4:	4b0d      	ldr	r3, [pc, #52]	; (1e1c <_sercom_i2c_sync_send_address+0x13c>)
    1de6:	4798      	blx	r3
    1de8:	0003      	movs	r3, r0
}
    1dea:	0018      	movs	r0, r3
    1dec:	46bd      	mov	sp, r7
    1dee:	b007      	add	sp, #28
    1df0:	bd90      	pop	{r4, r7, pc}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	000015a1 	.word	0x000015a1
    1df8:	00000597 	.word	0x00000597
    1dfc:	0000428c 	.word	0x0000428c
    1e00:	00000cb9 	.word	0x00000cb9
    1e04:	0000167d 	.word	0x0000167d
    1e08:	000016a9 	.word	0x000016a9
    1e0c:	000007fe 	.word	0x000007fe
    1e10:	000017c1 	.word	0x000017c1
    1e14:	00001799 	.word	0x00001799
    1e18:	00001c85 	.word	0x00001c85
    1e1c:	00001999 	.word	0x00001999

00001e20 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    1e20:	b590      	push	{r4, r7, lr}
    1e22:	b087      	sub	sp, #28
    1e24:	af00      	add	r7, sp, #0
    1e26:	6078      	str	r0, [r7, #4]
    1e28:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	691b      	ldr	r3, [r3, #16]
    1e2e:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    1e30:	687b      	ldr	r3, [r7, #4]
    1e32:	1e5a      	subs	r2, r3, #1
    1e34:	4193      	sbcs	r3, r2
    1e36:	b2db      	uxtb	r3, r3
    1e38:	4a3d      	ldr	r2, [pc, #244]	; (1f30 <_i2c_m_sync_transfer+0x110>)
    1e3a:	493e      	ldr	r1, [pc, #248]	; (1f34 <_i2c_m_sync_transfer+0x114>)
    1e3c:	0018      	movs	r0, r3
    1e3e:	4b3e      	ldr	r3, [pc, #248]	; (1f38 <_i2c_m_sync_transfer+0x118>)
    1e40:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    1e42:	687b      	ldr	r3, [r7, #4]
    1e44:	691b      	ldr	r3, [r3, #16]
    1e46:	1e5a      	subs	r2, r3, #1
    1e48:	4193      	sbcs	r3, r2
    1e4a:	b2db      	uxtb	r3, r3
    1e4c:	4a3b      	ldr	r2, [pc, #236]	; (1f3c <_i2c_m_sync_transfer+0x11c>)
    1e4e:	4939      	ldr	r1, [pc, #228]	; (1f34 <_i2c_m_sync_transfer+0x114>)
    1e50:	0018      	movs	r0, r3
    1e52:	4b39      	ldr	r3, [pc, #228]	; (1f38 <_i2c_m_sync_transfer+0x118>)
    1e54:	4798      	blx	r3
	ASSERT(msg);
    1e56:	683b      	ldr	r3, [r7, #0]
    1e58:	1e5a      	subs	r2, r3, #1
    1e5a:	4193      	sbcs	r3, r2
    1e5c:	b2db      	uxtb	r3, r3
    1e5e:	4a38      	ldr	r2, [pc, #224]	; (1f40 <_i2c_m_sync_transfer+0x120>)
    1e60:	4934      	ldr	r1, [pc, #208]	; (1f34 <_i2c_m_sync_transfer+0x114>)
    1e62:	0018      	movs	r0, r3
    1e64:	4b34      	ldr	r3, [pc, #208]	; (1f38 <_i2c_m_sync_transfer+0x118>)
    1e66:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	885b      	ldrh	r3, [r3, #2]
    1e6c:	b29b      	uxth	r3, r3
    1e6e:	001a      	movs	r2, r3
    1e70:	2380      	movs	r3, #128	; 0x80
    1e72:	005b      	lsls	r3, r3, #1
    1e74:	4013      	ands	r3, r2
    1e76:	d002      	beq.n	1e7e <_i2c_m_sync_transfer+0x5e>
		return I2C_ERR_BUSY;
    1e78:	2306      	movs	r3, #6
    1e7a:	425b      	negs	r3, r3
    1e7c:	e054      	b.n	1f28 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    1e7e:	683b      	ldr	r3, [r7, #0]
    1e80:	885b      	ldrh	r3, [r3, #2]
    1e82:	b29b      	uxth	r3, r3
    1e84:	2280      	movs	r2, #128	; 0x80
    1e86:	0052      	lsls	r2, r2, #1
    1e88:	4313      	orrs	r3, r2
    1e8a:	b29a      	uxth	r2, r3
    1e8c:	683b      	ldr	r3, [r7, #0]
    1e8e:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	683a      	ldr	r2, [r7, #0]
    1e94:	ca13      	ldmia	r2!, {r0, r1, r4}
    1e96:	c313      	stmia	r3!, {r0, r1, r4}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    1e98:	693b      	ldr	r3, [r7, #16]
    1e9a:	0018      	movs	r0, r3
    1e9c:	4b29      	ldr	r3, [pc, #164]	; (1f44 <_i2c_m_sync_transfer+0x124>)
    1e9e:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1ea0:	687b      	ldr	r3, [r7, #4]
    1ea2:	0018      	movs	r0, r3
    1ea4:	4b28      	ldr	r3, [pc, #160]	; (1f48 <_i2c_m_sync_transfer+0x128>)
    1ea6:	4798      	blx	r3
    1ea8:	0003      	movs	r3, r0
    1eaa:	617b      	str	r3, [r7, #20]

	if (ret) {
    1eac:	697b      	ldr	r3, [r7, #20]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d031      	beq.n	1f16 <_i2c_m_sync_transfer+0xf6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1eb2:	687b      	ldr	r3, [r7, #4]
    1eb4:	885b      	ldrh	r3, [r3, #2]
    1eb6:	b29b      	uxth	r3, r3
    1eb8:	4a24      	ldr	r2, [pc, #144]	; (1f4c <_i2c_m_sync_transfer+0x12c>)
    1eba:	4013      	ands	r3, r2
    1ebc:	b29a      	uxth	r2, r3
    1ebe:	687b      	ldr	r3, [r7, #4]
    1ec0:	805a      	strh	r2, [r3, #2]

		return ret;
    1ec2:	697b      	ldr	r3, [r7, #20]
    1ec4:	e030      	b.n	1f28 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    1ec6:	230c      	movs	r3, #12
    1ec8:	18fa      	adds	r2, r7, r3
    1eca:	687b      	ldr	r3, [r7, #4]
    1ecc:	0011      	movs	r1, r2
    1ece:	0018      	movs	r0, r3
    1ed0:	4b1f      	ldr	r3, [pc, #124]	; (1f50 <_i2c_m_sync_transfer+0x130>)
    1ed2:	4798      	blx	r3
    1ed4:	0003      	movs	r3, r0
    1ed6:	617b      	str	r3, [r7, #20]

		if (ret) {
    1ed8:	697b      	ldr	r3, [r7, #20]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d013      	beq.n	1f06 <_i2c_m_sync_transfer+0xe6>
			if (msg->flags & I2C_M_STOP) {
    1ede:	683b      	ldr	r3, [r7, #0]
    1ee0:	885b      	ldrh	r3, [r3, #2]
    1ee2:	b29b      	uxth	r3, r3
    1ee4:	b21b      	sxth	r3, r3
    1ee6:	2b00      	cmp	r3, #0
    1ee8:	da03      	bge.n	1ef2 <_i2c_m_sync_transfer+0xd2>
				_sercom_i2c_send_stop(hw);
    1eea:	693b      	ldr	r3, [r7, #16]
    1eec:	0018      	movs	r0, r3
    1eee:	4b19      	ldr	r3, [pc, #100]	; (1f54 <_i2c_m_sync_transfer+0x134>)
    1ef0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1ef2:	687b      	ldr	r3, [r7, #4]
    1ef4:	885b      	ldrh	r3, [r3, #2]
    1ef6:	b29b      	uxth	r3, r3
    1ef8:	4a14      	ldr	r2, [pc, #80]	; (1f4c <_i2c_m_sync_transfer+0x12c>)
    1efa:	4013      	ands	r3, r2
    1efc:	b29a      	uxth	r2, r3
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	805a      	strh	r2, [r3, #2]

			return ret;
    1f02:	697b      	ldr	r3, [r7, #20]
    1f04:	e010      	b.n	1f28 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    1f06:	68f9      	ldr	r1, [r7, #12]
    1f08:	687a      	ldr	r2, [r7, #4]
    1f0a:	693b      	ldr	r3, [r7, #16]
    1f0c:	0018      	movs	r0, r3
    1f0e:	4b12      	ldr	r3, [pc, #72]	; (1f58 <_i2c_m_sync_transfer+0x138>)
    1f10:	4798      	blx	r3
    1f12:	0003      	movs	r3, r0
    1f14:	617b      	str	r3, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1f16:	687b      	ldr	r3, [r7, #4]
    1f18:	885b      	ldrh	r3, [r3, #2]
    1f1a:	b29b      	uxth	r3, r3
    1f1c:	001a      	movs	r2, r3
    1f1e:	2380      	movs	r3, #128	; 0x80
    1f20:	005b      	lsls	r3, r3, #1
    1f22:	4013      	ands	r3, r2
    1f24:	d1cf      	bne.n	1ec6 <_i2c_m_sync_transfer+0xa6>
	}

	return ret;
    1f26:	697b      	ldr	r3, [r7, #20]
}
    1f28:	0018      	movs	r0, r3
    1f2a:	46bd      	mov	sp, r7
    1f2c:	b007      	add	sp, #28
    1f2e:	bd90      	pop	{r4, r7, pc}
    1f30:	000005c2 	.word	0x000005c2
    1f34:	0000428c 	.word	0x0000428c
    1f38:	00000cb9 	.word	0x00000cb9
    1f3c:	000005c3 	.word	0x000005c3
    1f40:	000005c4 	.word	0x000005c4
    1f44:	00001621 	.word	0x00001621
    1f48:	00001ce1 	.word	0x00001ce1
    1f4c:	fffffeff 	.word	0xfffffeff
    1f50:	00001c85 	.word	0x00001c85
    1f54:	00001979 	.word	0x00001979
    1f58:	00001999 	.word	0x00001999

00001f5c <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b084      	sub	sp, #16
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    1f64:	4b1a      	ldr	r3, [pc, #104]	; (1fd0 <_i2c_m_enable_implementation+0x74>)
    1f66:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    1f68:	2304      	movs	r3, #4
    1f6a:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    1f6c:	687b      	ldr	r3, [r7, #4]
    1f6e:	1e5a      	subs	r2, r3, #1
    1f70:	4193      	sbcs	r3, r2
    1f72:	b2db      	uxtb	r3, r3
    1f74:	4a17      	ldr	r2, [pc, #92]	; (1fd4 <_i2c_m_enable_implementation+0x78>)
    1f76:	4918      	ldr	r1, [pc, #96]	; (1fd8 <_i2c_m_enable_implementation+0x7c>)
    1f78:	0018      	movs	r0, r3
    1f7a:	4b18      	ldr	r3, [pc, #96]	; (1fdc <_i2c_m_enable_implementation+0x80>)
    1f7c:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    1f7e:	687b      	ldr	r3, [r7, #4]
    1f80:	0018      	movs	r0, r3
    1f82:	4b17      	ldr	r3, [pc, #92]	; (1fe0 <_i2c_m_enable_implementation+0x84>)
    1f84:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1f86:	e016      	b.n	1fb6 <_i2c_m_enable_implementation+0x5a>
		timeout--;
    1f88:	68fb      	ldr	r3, [r7, #12]
    1f8a:	3b01      	subs	r3, #1
    1f8c:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    1f8e:	68fb      	ldr	r3, [r7, #12]
    1f90:	2b00      	cmp	r3, #0
    1f92:	dc10      	bgt.n	1fb6 <_i2c_m_enable_implementation+0x5a>
			if (--timeout_attempt)
    1f94:	68bb      	ldr	r3, [r7, #8]
    1f96:	3b01      	subs	r3, #1
    1f98:	60bb      	str	r3, [r7, #8]
    1f9a:	68bb      	ldr	r3, [r7, #8]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d007      	beq.n	1fb0 <_i2c_m_enable_implementation+0x54>
				timeout = 65535;
    1fa0:	4b0b      	ldr	r3, [pc, #44]	; (1fd0 <_i2c_m_enable_implementation+0x74>)
    1fa2:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    1fa4:	687b      	ldr	r3, [r7, #4]
    1fa6:	2110      	movs	r1, #16
    1fa8:	0018      	movs	r0, r3
    1faa:	4b0e      	ldr	r3, [pc, #56]	; (1fe4 <_i2c_m_enable_implementation+0x88>)
    1fac:	4798      	blx	r3
    1fae:	e002      	b.n	1fb6 <_i2c_m_enable_implementation+0x5a>
				return I2C_ERR_BUSY;
    1fb0:	2306      	movs	r3, #6
    1fb2:	425b      	negs	r3, r3
    1fb4:	e007      	b.n	1fc6 <_i2c_m_enable_implementation+0x6a>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	0018      	movs	r0, r3
    1fba:	4b0b      	ldr	r3, [pc, #44]	; (1fe8 <_i2c_m_enable_implementation+0x8c>)
    1fbc:	4798      	blx	r3
    1fbe:	0003      	movs	r3, r0
    1fc0:	2b01      	cmp	r3, #1
    1fc2:	d1e1      	bne.n	1f88 <_i2c_m_enable_implementation+0x2c>
		}
	}
	return ERR_NONE;
    1fc4:	2300      	movs	r3, #0
}
    1fc6:	0018      	movs	r0, r3
    1fc8:	46bd      	mov	sp, r7
    1fca:	b004      	add	sp, #16
    1fcc:	bd80      	pop	{r7, pc}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	0000ffff 	.word	0x0000ffff
    1fd4:	000005f7 	.word	0x000005f7
    1fd8:	0000428c 	.word	0x0000428c
    1fdc:	00000cb9 	.word	0x00000cb9
    1fe0:	00001549 	.word	0x00001549
    1fe4:	00001891 	.word	0x00001891
    1fe8:	0000183d 	.word	0x0000183d

00001fec <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	6078      	str	r0, [r7, #4]
    1ff4:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    1ff6:	683b      	ldr	r3, [r7, #0]
    1ff8:	0018      	movs	r0, r3
    1ffa:	4b4f      	ldr	r3, [pc, #316]	; (2138 <STACK_SIZE+0x138>)
    1ffc:	4798      	blx	r3
    1ffe:	0003      	movs	r3, r0
    2000:	001a      	movs	r2, r3
    2002:	230f      	movs	r3, #15
    2004:	18fb      	adds	r3, r7, r3
    2006:	701a      	strb	r2, [r3, #0]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    2008:	683b      	ldr	r3, [r7, #0]
    200a:	2101      	movs	r1, #1
    200c:	0018      	movs	r0, r3
    200e:	4b4b      	ldr	r3, [pc, #300]	; (213c <STACK_SIZE+0x13c>)
    2010:	4798      	blx	r3
    2012:	0003      	movs	r3, r0
    2014:	001a      	movs	r2, r3
    2016:	2301      	movs	r3, #1
    2018:	4053      	eors	r3, r2
    201a:	b2db      	uxtb	r3, r3
    201c:	2b00      	cmp	r3, #0
    201e:	d025      	beq.n	206c <STACK_SIZE+0x6c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    2020:	230f      	movs	r3, #15
    2022:	18fb      	adds	r3, r7, r3
    2024:	781a      	ldrb	r2, [r3, #0]
    2026:	4946      	ldr	r1, [pc, #280]	; (2140 <STACK_SIZE+0x140>)
    2028:	0013      	movs	r3, r2
    202a:	005b      	lsls	r3, r3, #1
    202c:	189b      	adds	r3, r3, r2
    202e:	00db      	lsls	r3, r3, #3
    2030:	18cb      	adds	r3, r1, r3
    2032:	3304      	adds	r3, #4
    2034:	681b      	ldr	r3, [r3, #0]
    2036:	221c      	movs	r2, #28
    2038:	4013      	ands	r3, r2
    203a:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    203c:	683b      	ldr	r3, [r7, #0]
    203e:	2102      	movs	r1, #2
    2040:	0018      	movs	r0, r3
    2042:	4b40      	ldr	r3, [pc, #256]	; (2144 <STACK_SIZE+0x144>)
    2044:	4798      	blx	r3
    2046:	1e03      	subs	r3, r0, #0
    2048:	d008      	beq.n	205c <STACK_SIZE+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    204a:	683b      	ldr	r3, [r7, #0]
    204c:	0018      	movs	r0, r3
    204e:	4b3e      	ldr	r3, [pc, #248]	; (2148 <STACK_SIZE+0x148>)
    2050:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    2052:	683b      	ldr	r3, [r7, #0]
    2054:	2102      	movs	r1, #2
    2056:	0018      	movs	r0, r3
    2058:	4b3c      	ldr	r3, [pc, #240]	; (214c <STACK_SIZE+0x14c>)
    205a:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    205c:	68bb      	ldr	r3, [r7, #8]
    205e:	2201      	movs	r2, #1
    2060:	431a      	orrs	r2, r3
    2062:	683b      	ldr	r3, [r7, #0]
    2064:	0011      	movs	r1, r2
    2066:	0018      	movs	r0, r3
    2068:	4b39      	ldr	r3, [pc, #228]	; (2150 <STACK_SIZE+0x150>)
    206a:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    206c:	683b      	ldr	r3, [r7, #0]
    206e:	2101      	movs	r1, #1
    2070:	0018      	movs	r0, r3
    2072:	4b36      	ldr	r3, [pc, #216]	; (214c <STACK_SIZE+0x14c>)
    2074:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    2076:	230f      	movs	r3, #15
    2078:	18fb      	adds	r3, r7, r3
    207a:	781a      	ldrb	r2, [r3, #0]
    207c:	4930      	ldr	r1, [pc, #192]	; (2140 <STACK_SIZE+0x140>)
    207e:	0013      	movs	r3, r2
    2080:	005b      	lsls	r3, r3, #1
    2082:	189b      	adds	r3, r3, r2
    2084:	00db      	lsls	r3, r3, #3
    2086:	18cb      	adds	r3, r1, r3
    2088:	3304      	adds	r3, #4
    208a:	681a      	ldr	r2, [r3, #0]
    208c:	683b      	ldr	r3, [r7, #0]
    208e:	0011      	movs	r1, r2
    2090:	0018      	movs	r0, r3
    2092:	4b2f      	ldr	r3, [pc, #188]	; (2150 <STACK_SIZE+0x150>)
    2094:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    2096:	230f      	movs	r3, #15
    2098:	18fb      	adds	r3, r7, r3
    209a:	781a      	ldrb	r2, [r3, #0]
    209c:	4928      	ldr	r1, [pc, #160]	; (2140 <STACK_SIZE+0x140>)
    209e:	0013      	movs	r3, r2
    20a0:	005b      	lsls	r3, r3, #1
    20a2:	189b      	adds	r3, r3, r2
    20a4:	00db      	lsls	r3, r3, #3
    20a6:	18cb      	adds	r3, r1, r3
    20a8:	3308      	adds	r3, #8
    20aa:	681a      	ldr	r2, [r3, #0]
    20ac:	683b      	ldr	r3, [r7, #0]
    20ae:	0011      	movs	r1, r2
    20b0:	0018      	movs	r0, r3
    20b2:	4b28      	ldr	r3, [pc, #160]	; (2154 <STACK_SIZE+0x154>)
    20b4:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    20b6:	230f      	movs	r3, #15
    20b8:	18fb      	adds	r3, r7, r3
    20ba:	781a      	ldrb	r2, [r3, #0]
    20bc:	4920      	ldr	r1, [pc, #128]	; (2140 <STACK_SIZE+0x140>)
    20be:	0013      	movs	r3, r2
    20c0:	005b      	lsls	r3, r3, #1
    20c2:	189b      	adds	r3, r3, r2
    20c4:	00db      	lsls	r3, r3, #3
    20c6:	18cb      	adds	r3, r1, r3
    20c8:	330c      	adds	r3, #12
    20ca:	681a      	ldr	r2, [r3, #0]
    20cc:	683b      	ldr	r3, [r7, #0]
    20ce:	0011      	movs	r1, r2
    20d0:	0018      	movs	r0, r3
    20d2:	4b21      	ldr	r3, [pc, #132]	; (2158 <STACK_SIZE+0x158>)
    20d4:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    20d6:	230f      	movs	r3, #15
    20d8:	18fb      	adds	r3, r7, r3
    20da:	781a      	ldrb	r2, [r3, #0]
    20dc:	4918      	ldr	r1, [pc, #96]	; (2140 <STACK_SIZE+0x140>)
    20de:	0013      	movs	r3, r2
    20e0:	005b      	lsls	r3, r3, #1
    20e2:	189b      	adds	r3, r3, r2
    20e4:	00db      	lsls	r3, r3, #3
    20e6:	18cb      	adds	r3, r1, r3
    20e8:	3304      	adds	r3, #4
    20ea:	681b      	ldr	r3, [r3, #0]
    20ec:	0e1b      	lsrs	r3, r3, #24
    20ee:	b29b      	uxth	r3, r3
    20f0:	2203      	movs	r2, #3
    20f2:	4013      	ands	r3, r2
    20f4:	b29a      	uxth	r2, r3
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    20fa:	687b      	ldr	r3, [r7, #4]
    20fc:	899b      	ldrh	r3, [r3, #12]
    20fe:	2201      	movs	r2, #1
    2100:	429a      	cmp	r2, r3
    2102:	419b      	sbcs	r3, r3
    2104:	425b      	negs	r3, r3
    2106:	b2da      	uxtb	r2, r3
    2108:	683b      	ldr	r3, [r7, #0]
    210a:	0011      	movs	r1, r2
    210c:	0018      	movs	r0, r3
    210e:	4b13      	ldr	r3, [pc, #76]	; (215c <STACK_SIZE+0x15c>)
    2110:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    2112:	230f      	movs	r3, #15
    2114:	18fb      	adds	r3, r7, r3
    2116:	781a      	ldrb	r2, [r3, #0]
    2118:	4909      	ldr	r1, [pc, #36]	; (2140 <STACK_SIZE+0x140>)
    211a:	0013      	movs	r3, r2
    211c:	005b      	lsls	r3, r3, #1
    211e:	189b      	adds	r3, r3, r2
    2120:	00db      	lsls	r3, r3, #3
    2122:	18cb      	adds	r3, r1, r3
    2124:	3312      	adds	r3, #18
    2126:	881a      	ldrh	r2, [r3, #0]
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    212c:	2300      	movs	r3, #0
}
    212e:	0018      	movs	r0, r3
    2130:	46bd      	mov	sp, r7
    2132:	b004      	add	sp, #16
    2134:	bd80      	pop	{r7, pc}
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	000018ed 	.word	0x000018ed
    213c:	000014e7 	.word	0x000014e7
    2140:	20000000 	.word	0x20000000
    2144:	000015c9 	.word	0x000015c9
    2148:	00001575 	.word	0x00001575
    214c:	000014c9 	.word	0x000014c9
    2150:	000015f9 	.word	0x000015f9
    2154:	0000170d 	.word	0x0000170d
    2158:	00001735 	.word	0x00001735
    215c:	0000174d 	.word	0x0000174d

00002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    2160:	b580      	push	{r7, lr}
    2162:	b082      	sub	sp, #8
    2164:	af00      	add	r7, sp, #0
    2166:	0002      	movs	r2, r0
    2168:	1dfb      	adds	r3, r7, #7
    216a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    216c:	1dfb      	adds	r3, r7, #7
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	2b7f      	cmp	r3, #127	; 0x7f
    2172:	d809      	bhi.n	2188 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2174:	4b06      	ldr	r3, [pc, #24]	; (2190 <__NVIC_EnableIRQ+0x30>)
    2176:	1dfa      	adds	r2, r7, #7
    2178:	7812      	ldrb	r2, [r2, #0]
    217a:	0011      	movs	r1, r2
    217c:	221f      	movs	r2, #31
    217e:	400a      	ands	r2, r1
    2180:	2101      	movs	r1, #1
    2182:	4091      	lsls	r1, r2
    2184:	000a      	movs	r2, r1
    2186:	601a      	str	r2, [r3, #0]
  }
}
    2188:	46c0      	nop			; (mov r8, r8)
    218a:	46bd      	mov	sp, r7
    218c:	b002      	add	sp, #8
    218e:	bd80      	pop	{r7, pc}
    2190:	e000e100 	.word	0xe000e100

00002194 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    2194:	b580      	push	{r7, lr}
    2196:	b082      	sub	sp, #8
    2198:	af00      	add	r7, sp, #0
    219a:	0002      	movs	r2, r0
    219c:	1dfb      	adds	r3, r7, #7
    219e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    21a0:	1dfb      	adds	r3, r7, #7
    21a2:	781b      	ldrb	r3, [r3, #0]
    21a4:	2b7f      	cmp	r3, #127	; 0x7f
    21a6:	d80e      	bhi.n	21c6 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21a8:	4909      	ldr	r1, [pc, #36]	; (21d0 <__NVIC_DisableIRQ+0x3c>)
    21aa:	1dfb      	adds	r3, r7, #7
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	001a      	movs	r2, r3
    21b0:	231f      	movs	r3, #31
    21b2:	4013      	ands	r3, r2
    21b4:	2201      	movs	r2, #1
    21b6:	409a      	lsls	r2, r3
    21b8:	0013      	movs	r3, r2
    21ba:	2280      	movs	r2, #128	; 0x80
    21bc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    21be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21c2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	46bd      	mov	sp, r7
    21ca:	b002      	add	sp, #8
    21cc:	bd80      	pop	{r7, pc}
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	e000e100 	.word	0xe000e100

000021d4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    21d4:	b580      	push	{r7, lr}
    21d6:	b082      	sub	sp, #8
    21d8:	af00      	add	r7, sp, #0
    21da:	0002      	movs	r2, r0
    21dc:	1dfb      	adds	r3, r7, #7
    21de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    21e0:	1dfb      	adds	r3, r7, #7
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	2b7f      	cmp	r3, #127	; 0x7f
    21e6:	d80a      	bhi.n	21fe <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21e8:	4907      	ldr	r1, [pc, #28]	; (2208 <__NVIC_ClearPendingIRQ+0x34>)
    21ea:	1dfb      	adds	r3, r7, #7
    21ec:	781b      	ldrb	r3, [r3, #0]
    21ee:	001a      	movs	r2, r3
    21f0:	231f      	movs	r3, #31
    21f2:	4013      	ands	r3, r2
    21f4:	2201      	movs	r2, #1
    21f6:	409a      	lsls	r2, r3
    21f8:	23c0      	movs	r3, #192	; 0xc0
    21fa:	005b      	lsls	r3, r3, #1
    21fc:	50ca      	str	r2, [r1, r3]
  }
}
    21fe:	46c0      	nop			; (mov r8, r8)
    2200:	46bd      	mov	sp, r7
    2202:	b002      	add	sp, #8
    2204:	bd80      	pop	{r7, pc}
    2206:	46c0      	nop			; (mov r8, r8)
    2208:	e000e100 	.word	0xe000e100

0000220c <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    220c:	b580      	push	{r7, lr}
    220e:	b082      	sub	sp, #8
    2210:	af00      	add	r7, sp, #0
    2212:	6078      	str	r0, [r7, #4]
    2214:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2216:	46c0      	nop			; (mov r8, r8)
    2218:	687b      	ldr	r3, [r7, #4]
    221a:	691b      	ldr	r3, [r3, #16]
    221c:	683a      	ldr	r2, [r7, #0]
    221e:	4013      	ands	r3, r2
    2220:	d1fa      	bne.n	2218 <hri_tc_wait_for_sync+0xc>
	};
}
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	46bd      	mov	sp, r7
    2226:	b002      	add	sp, #8
    2228:	bd80      	pop	{r7, pc}

0000222a <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    222a:	b580      	push	{r7, lr}
    222c:	b082      	sub	sp, #8
    222e:	af00      	add	r7, sp, #0
    2230:	6078      	str	r0, [r7, #4]
    2232:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	691b      	ldr	r3, [r3, #16]
    2238:	683a      	ldr	r2, [r7, #0]
    223a:	4013      	ands	r3, r2
    223c:	1e5a      	subs	r2, r3, #1
    223e:	4193      	sbcs	r3, r2
    2240:	b2db      	uxtb	r3, r3
}
    2242:	0018      	movs	r0, r3
    2244:	46bd      	mov	sp, r7
    2246:	b002      	add	sp, #8
    2248:	bd80      	pop	{r7, pc}

0000224a <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    224a:	b580      	push	{r7, lr}
    224c:	b082      	sub	sp, #8
    224e:	af00      	add	r7, sp, #0
    2250:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2252:	687b      	ldr	r3, [r7, #4]
    2254:	7a9b      	ldrb	r3, [r3, #10]
    2256:	b2db      	uxtb	r3, r3
    2258:	001a      	movs	r2, r3
    225a:	2301      	movs	r3, #1
    225c:	4013      	ands	r3, r2
    225e:	1e5a      	subs	r2, r3, #1
    2260:	4193      	sbcs	r3, r2
    2262:	b2db      	uxtb	r3, r3
}
    2264:	0018      	movs	r0, r3
    2266:	46bd      	mov	sp, r7
    2268:	b002      	add	sp, #8
    226a:	bd80      	pop	{r7, pc}

0000226c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    226c:	b580      	push	{r7, lr}
    226e:	b082      	sub	sp, #8
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	2201      	movs	r2, #1
    2278:	729a      	strb	r2, [r3, #10]
}
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	46bd      	mov	sp, r7
    227e:	b002      	add	sp, #8
    2280:	bd80      	pop	{r7, pc}

00002282 <hri_tc_set_INTEN_OVF_bit>:
{
	((Tc *)hw)->COUNT16.CTRLBCLR.reg = mask;
}

static inline void hri_tc_set_INTEN_OVF_bit(const void *const hw)
{
    2282:	b580      	push	{r7, lr}
    2284:	b082      	sub	sp, #8
    2286:	af00      	add	r7, sp, #0
    2288:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_OVF;
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	2201      	movs	r2, #1
    228e:	725a      	strb	r2, [r3, #9]
}
    2290:	46c0      	nop			; (mov r8, r8)
    2292:	46bd      	mov	sp, r7
    2294:	b002      	add	sp, #8
    2296:	bd80      	pop	{r7, pc}

00002298 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2298:	b580      	push	{r7, lr}
    229a:	b082      	sub	sp, #8
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	681b      	ldr	r3, [r3, #0]
    22a4:	2202      	movs	r2, #2
    22a6:	4393      	bics	r3, r2
    22a8:	001a      	movs	r2, r3
    22aa:	687b      	ldr	r3, [r7, #4]
    22ac:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    22ae:	687b      	ldr	r3, [r7, #4]
    22b0:	2103      	movs	r1, #3
    22b2:	0018      	movs	r0, r3
    22b4:	4b02      	ldr	r3, [pc, #8]	; (22c0 <hri_tc_clear_CTRLA_ENABLE_bit+0x28>)
    22b6:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    22b8:	46c0      	nop			; (mov r8, r8)
    22ba:	46bd      	mov	sp, r7
    22bc:	b002      	add	sp, #8
    22be:	bd80      	pop	{r7, pc}
    22c0:	0000220d 	.word	0x0000220d

000022c4 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    22c4:	b580      	push	{r7, lr}
    22c6:	b084      	sub	sp, #16
    22c8:	af00      	add	r7, sp, #0
    22ca:	6078      	str	r0, [r7, #4]
    22cc:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    22ce:	687b      	ldr	r3, [r7, #4]
    22d0:	2103      	movs	r1, #3
    22d2:	0018      	movs	r0, r3
    22d4:	4b06      	ldr	r3, [pc, #24]	; (22f0 <hri_tc_get_CTRLA_reg+0x2c>)
    22d6:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    22de:	68fb      	ldr	r3, [r7, #12]
    22e0:	683a      	ldr	r2, [r7, #0]
    22e2:	4013      	ands	r3, r2
    22e4:	60fb      	str	r3, [r7, #12]
	return tmp;
    22e6:	68fb      	ldr	r3, [r7, #12]
}
    22e8:	0018      	movs	r0, r3
    22ea:	46bd      	mov	sp, r7
    22ec:	b004      	add	sp, #16
    22ee:	bd80      	pop	{r7, pc}
    22f0:	0000220d 	.word	0x0000220d

000022f4 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	b082      	sub	sp, #8
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
    22fc:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	683a      	ldr	r2, [r7, #0]
    2302:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    2304:	687b      	ldr	r3, [r7, #4]
    2306:	2103      	movs	r1, #3
    2308:	0018      	movs	r0, r3
    230a:	4b03      	ldr	r3, [pc, #12]	; (2318 <hri_tc_write_CTRLA_reg+0x24>)
    230c:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	46bd      	mov	sp, r7
    2312:	b002      	add	sp, #8
    2314:	bd80      	pop	{r7, pc}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	0000220d 	.word	0x0000220d

0000231c <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    231c:	b580      	push	{r7, lr}
    231e:	b082      	sub	sp, #8
    2320:	af00      	add	r7, sp, #0
    2322:	6078      	str	r0, [r7, #4]
    2324:	000a      	movs	r2, r1
    2326:	1cbb      	adds	r3, r7, #2
    2328:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    232a:	687b      	ldr	r3, [r7, #4]
    232c:	1cba      	adds	r2, r7, #2
    232e:	8812      	ldrh	r2, [r2, #0]
    2330:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	46bd      	mov	sp, r7
    2336:	b002      	add	sp, #8
    2338:	bd80      	pop	{r7, pc}

0000233a <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    233a:	b580      	push	{r7, lr}
    233c:	b082      	sub	sp, #8
    233e:	af00      	add	r7, sp, #0
    2340:	6078      	str	r0, [r7, #4]
    2342:	000a      	movs	r2, r1
    2344:	1cfb      	adds	r3, r7, #3
    2346:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	1cfa      	adds	r2, r7, #3
    234c:	7812      	ldrb	r2, [r2, #0]
    234e:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    2350:	46c0      	nop			; (mov r8, r8)
    2352:	46bd      	mov	sp, r7
    2354:	b002      	add	sp, #8
    2356:	bd80      	pop	{r7, pc}

00002358 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    2358:	b580      	push	{r7, lr}
    235a:	b082      	sub	sp, #8
    235c:	af00      	add	r7, sp, #0
    235e:	6078      	str	r0, [r7, #4]
    2360:	000a      	movs	r2, r1
    2362:	1cfb      	adds	r3, r7, #3
    2364:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    2366:	687b      	ldr	r3, [r7, #4]
    2368:	1cfa      	adds	r2, r7, #3
    236a:	7812      	ldrb	r2, [r2, #0]
    236c:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	46bd      	mov	sp, r7
    2372:	b002      	add	sp, #8
    2374:	bd80      	pop	{r7, pc}
	...

00002378 <hri_tccount8_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_PER_reg(const void *const hw, hri_tccount8_per_reg_t data)
{
    2378:	b580      	push	{r7, lr}
    237a:	b082      	sub	sp, #8
    237c:	af00      	add	r7, sp, #0
    237e:	6078      	str	r0, [r7, #4]
    2380:	000a      	movs	r2, r1
    2382:	1cfb      	adds	r3, r7, #3
    2384:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2386:	687b      	ldr	r3, [r7, #4]
    2388:	1cfa      	adds	r2, r7, #3
    238a:	7812      	ldrb	r2, [r2, #0]
    238c:	76da      	strb	r2, [r3, #27]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_PER);
    238e:	687b      	ldr	r3, [r7, #4]
    2390:	2120      	movs	r1, #32
    2392:	0018      	movs	r0, r3
    2394:	4b02      	ldr	r3, [pc, #8]	; (23a0 <hri_tccount8_write_PER_reg+0x28>)
    2396:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2398:	46c0      	nop			; (mov r8, r8)
    239a:	46bd      	mov	sp, r7
    239c:	b002      	add	sp, #8
    239e:	bd80      	pop	{r7, pc}
    23a0:	0000220d 	.word	0x0000220d

000023a4 <hri_tccount8_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tccount8_cc_reg_t data)
{
    23a4:	b580      	push	{r7, lr}
    23a6:	b082      	sub	sp, #8
    23a8:	af00      	add	r7, sp, #0
    23aa:	6078      	str	r0, [r7, #4]
    23ac:	0008      	movs	r0, r1
    23ae:	0011      	movs	r1, r2
    23b0:	1cfb      	adds	r3, r7, #3
    23b2:	1c02      	adds	r2, r0, #0
    23b4:	701a      	strb	r2, [r3, #0]
    23b6:	1cbb      	adds	r3, r7, #2
    23b8:	1c0a      	adds	r2, r1, #0
    23ba:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    23bc:	1cfb      	adds	r3, r7, #3
    23be:	781b      	ldrb	r3, [r3, #0]
    23c0:	687a      	ldr	r2, [r7, #4]
    23c2:	18d3      	adds	r3, r2, r3
    23c4:	1cba      	adds	r2, r7, #2
    23c6:	7812      	ldrb	r2, [r2, #0]
    23c8:	771a      	strb	r2, [r3, #28]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    23ca:	687b      	ldr	r3, [r7, #4]
    23cc:	21c0      	movs	r1, #192	; 0xc0
    23ce:	0018      	movs	r0, r3
    23d0:	4b02      	ldr	r3, [pc, #8]	; (23dc <hri_tccount8_write_CC_reg+0x38>)
    23d2:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    23d4:	46c0      	nop			; (mov r8, r8)
    23d6:	46bd      	mov	sp, r7
    23d8:	b002      	add	sp, #8
    23da:	bd80      	pop	{r7, pc}
    23dc:	0000220d 	.word	0x0000220d

000023e0 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    23e0:	b580      	push	{r7, lr}
    23e2:	b082      	sub	sp, #8
    23e4:	af00      	add	r7, sp, #0
    23e6:	6078      	str	r0, [r7, #4]
    23e8:	0008      	movs	r0, r1
    23ea:	0011      	movs	r1, r2
    23ec:	1cfb      	adds	r3, r7, #3
    23ee:	1c02      	adds	r2, r0, #0
    23f0:	701a      	strb	r2, [r3, #0]
    23f2:	003b      	movs	r3, r7
    23f4:	1c0a      	adds	r2, r1, #0
    23f6:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    23f8:	1cfb      	adds	r3, r7, #3
    23fa:	781b      	ldrb	r3, [r3, #0]
    23fc:	687a      	ldr	r2, [r7, #4]
    23fe:	330c      	adds	r3, #12
    2400:	005b      	lsls	r3, r3, #1
    2402:	18d3      	adds	r3, r2, r3
    2404:	3304      	adds	r3, #4
    2406:	003a      	movs	r2, r7
    2408:	8812      	ldrh	r2, [r2, #0]
    240a:	801a      	strh	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	21c0      	movs	r1, #192	; 0xc0
    2410:	0018      	movs	r0, r3
    2412:	4b03      	ldr	r3, [pc, #12]	; (2420 <hri_tccount16_write_CC_reg+0x40>)
    2414:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2416:	46c0      	nop			; (mov r8, r8)
    2418:	46bd      	mov	sp, r7
    241a:	b002      	add	sp, #8
    241c:	bd80      	pop	{r7, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	0000220d 	.word	0x0000220d

00002424 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    2424:	b580      	push	{r7, lr}
    2426:	b084      	sub	sp, #16
    2428:	af00      	add	r7, sp, #0
    242a:	60f8      	str	r0, [r7, #12]
    242c:	607a      	str	r2, [r7, #4]
    242e:	230b      	movs	r3, #11
    2430:	18fb      	adds	r3, r7, r3
    2432:	1c0a      	adds	r2, r1, #0
    2434:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2436:	230b      	movs	r3, #11
    2438:	18fb      	adds	r3, r7, r3
    243a:	781b      	ldrb	r3, [r3, #0]
    243c:	68fa      	ldr	r2, [r7, #12]
    243e:	3306      	adds	r3, #6
    2440:	009b      	lsls	r3, r3, #2
    2442:	18d3      	adds	r3, r2, r3
    2444:	3304      	adds	r3, #4
    2446:	687a      	ldr	r2, [r7, #4]
    2448:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    244a:	68fb      	ldr	r3, [r7, #12]
    244c:	21c0      	movs	r1, #192	; 0xc0
    244e:	0018      	movs	r0, r3
    2450:	4b02      	ldr	r3, [pc, #8]	; (245c <hri_tccount32_write_CC_reg+0x38>)
    2452:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    2454:	46c0      	nop			; (mov r8, r8)
    2456:	46bd      	mov	sp, r7
    2458:	b004      	add	sp, #16
    245a:	bd80      	pop	{r7, pc}
    245c:	0000220d 	.word	0x0000220d

00002460 <_timer_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC
 */
int32_t _timer_init(struct _timer_device *const device, void *const hw)
{
    2460:	b590      	push	{r4, r7, lr}
    2462:	b085      	sub	sp, #20
    2464:	af00      	add	r7, sp, #0
    2466:	6078      	str	r0, [r7, #4]
    2468:	6039      	str	r1, [r7, #0]
	int8_t i = get_tc_index(hw);
    246a:	230f      	movs	r3, #15
    246c:	18fc      	adds	r4, r7, r3
    246e:	683b      	ldr	r3, [r7, #0]
    2470:	0018      	movs	r0, r3
    2472:	4bab      	ldr	r3, [pc, #684]	; (2720 <_timer_init+0x2c0>)
    2474:	4798      	blx	r3
    2476:	0003      	movs	r3, r0
    2478:	7023      	strb	r3, [r4, #0]

	device->hw = hw;
    247a:	687b      	ldr	r3, [r7, #4]
    247c:	683a      	ldr	r2, [r7, #0]
    247e:	60da      	str	r2, [r3, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2480:	4ba8      	ldr	r3, [pc, #672]	; (2724 <_timer_init+0x2c4>)
    2482:	228d      	movs	r2, #141	; 0x8d
    2484:	0019      	movs	r1, r3
    2486:	2001      	movs	r0, #1
    2488:	4ba7      	ldr	r3, [pc, #668]	; (2728 <_timer_init+0x2c8>)
    248a:	4798      	blx	r3

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    248c:	683b      	ldr	r3, [r7, #0]
    248e:	2101      	movs	r1, #1
    2490:	0018      	movs	r0, r3
    2492:	4ba6      	ldr	r3, [pc, #664]	; (272c <_timer_init+0x2cc>)
    2494:	4798      	blx	r3
    2496:	0003      	movs	r3, r0
    2498:	001a      	movs	r2, r3
    249a:	2301      	movs	r3, #1
    249c:	4053      	eors	r3, r2
    249e:	b2db      	uxtb	r3, r3
    24a0:	2b00      	cmp	r3, #0
    24a2:	d014      	beq.n	24ce <_timer_init+0x6e>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    24a4:	683b      	ldr	r3, [r7, #0]
    24a6:	2102      	movs	r1, #2
    24a8:	0018      	movs	r0, r3
    24aa:	4ba1      	ldr	r3, [pc, #644]	; (2730 <_timer_init+0x2d0>)
    24ac:	4798      	blx	r3
    24ae:	1e03      	subs	r3, r0, #0
    24b0:	d008      	beq.n	24c4 <_timer_init+0x64>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    24b2:	683b      	ldr	r3, [r7, #0]
    24b4:	0018      	movs	r0, r3
    24b6:	4b9f      	ldr	r3, [pc, #636]	; (2734 <_timer_init+0x2d4>)
    24b8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    24ba:	683b      	ldr	r3, [r7, #0]
    24bc:	2102      	movs	r1, #2
    24be:	0018      	movs	r0, r3
    24c0:	4b9d      	ldr	r3, [pc, #628]	; (2738 <_timer_init+0x2d8>)
    24c2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    24c4:	683b      	ldr	r3, [r7, #0]
    24c6:	2101      	movs	r1, #1
    24c8:	0018      	movs	r0, r3
    24ca:	4b9c      	ldr	r3, [pc, #624]	; (273c <_timer_init+0x2dc>)
    24cc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    24ce:	683b      	ldr	r3, [r7, #0]
    24d0:	2101      	movs	r1, #1
    24d2:	0018      	movs	r0, r3
    24d4:	4b98      	ldr	r3, [pc, #608]	; (2738 <_timer_init+0x2d8>)
    24d6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    24d8:	230f      	movs	r3, #15
    24da:	18fb      	adds	r3, r7, r3
    24dc:	2200      	movs	r2, #0
    24de:	569a      	ldrsb	r2, [r3, r2]
    24e0:	4997      	ldr	r1, [pc, #604]	; (2740 <_timer_init+0x2e0>)
    24e2:	0013      	movs	r3, r2
    24e4:	009b      	lsls	r3, r3, #2
    24e6:	189b      	adds	r3, r3, r2
    24e8:	009b      	lsls	r3, r3, #2
    24ea:	18cb      	adds	r3, r1, r3
    24ec:	3304      	adds	r3, #4
    24ee:	681a      	ldr	r2, [r3, #0]
    24f0:	683b      	ldr	r3, [r7, #0]
    24f2:	0011      	movs	r1, r2
    24f4:	0018      	movs	r0, r3
    24f6:	4b91      	ldr	r3, [pc, #580]	; (273c <_timer_init+0x2dc>)
    24f8:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    24fa:	230f      	movs	r3, #15
    24fc:	18fb      	adds	r3, r7, r3
    24fe:	2200      	movs	r2, #0
    2500:	569a      	ldrsb	r2, [r3, r2]
    2502:	498f      	ldr	r1, [pc, #572]	; (2740 <_timer_init+0x2e0>)
    2504:	0013      	movs	r3, r2
    2506:	009b      	lsls	r3, r3, #2
    2508:	189b      	adds	r3, r3, r2
    250a:	009b      	lsls	r3, r3, #2
    250c:	18cb      	adds	r3, r1, r3
    250e:	330a      	adds	r3, #10
    2510:	781a      	ldrb	r2, [r3, #0]
    2512:	683b      	ldr	r3, [r7, #0]
    2514:	0011      	movs	r1, r2
    2516:	0018      	movs	r0, r3
    2518:	4b8a      	ldr	r3, [pc, #552]	; (2744 <_timer_init+0x2e4>)
    251a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    251c:	230f      	movs	r3, #15
    251e:	18fb      	adds	r3, r7, r3
    2520:	2200      	movs	r2, #0
    2522:	569a      	ldrsb	r2, [r3, r2]
    2524:	4986      	ldr	r1, [pc, #536]	; (2740 <_timer_init+0x2e0>)
    2526:	0013      	movs	r3, r2
    2528:	009b      	lsls	r3, r3, #2
    252a:	189b      	adds	r3, r3, r2
    252c:	009b      	lsls	r3, r3, #2
    252e:	18cb      	adds	r3, r1, r3
    2530:	3308      	adds	r3, #8
    2532:	881a      	ldrh	r2, [r3, #0]
    2534:	683b      	ldr	r3, [r7, #0]
    2536:	0011      	movs	r1, r2
    2538:	0018      	movs	r0, r3
    253a:	4b83      	ldr	r3, [pc, #524]	; (2748 <_timer_init+0x2e8>)
    253c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MFRQ);
    253e:	683b      	ldr	r3, [r7, #0]
    2540:	2101      	movs	r1, #1
    2542:	0018      	movs	r0, r3
    2544:	4b81      	ldr	r3, [pc, #516]	; (274c <_timer_init+0x2ec>)
    2546:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2548:	230f      	movs	r3, #15
    254a:	18fb      	adds	r3, r7, r3
    254c:	2200      	movs	r2, #0
    254e:	569a      	ldrsb	r2, [r3, r2]
    2550:	497b      	ldr	r1, [pc, #492]	; (2740 <_timer_init+0x2e0>)
    2552:	0013      	movs	r3, r2
    2554:	009b      	lsls	r3, r3, #2
    2556:	189b      	adds	r3, r3, r2
    2558:	009b      	lsls	r3, r3, #2
    255a:	18cb      	adds	r3, r1, r3
    255c:	3304      	adds	r3, #4
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	220c      	movs	r2, #12
    2562:	4013      	ands	r3, r2
    2564:	2b08      	cmp	r3, #8
    2566:	d122      	bne.n	25ae <_timer_init+0x14e>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2568:	230f      	movs	r3, #15
    256a:	18fb      	adds	r3, r7, r3
    256c:	2200      	movs	r2, #0
    256e:	569a      	ldrsb	r2, [r3, r2]
    2570:	4973      	ldr	r1, [pc, #460]	; (2740 <_timer_init+0x2e0>)
    2572:	0013      	movs	r3, r2
    2574:	009b      	lsls	r3, r3, #2
    2576:	189b      	adds	r3, r3, r2
    2578:	009b      	lsls	r3, r3, #2
    257a:	18cb      	adds	r3, r1, r3
    257c:	330c      	adds	r3, #12
    257e:	681a      	ldr	r2, [r3, #0]
    2580:	683b      	ldr	r3, [r7, #0]
    2582:	2100      	movs	r1, #0
    2584:	0018      	movs	r0, r3
    2586:	4b72      	ldr	r3, [pc, #456]	; (2750 <_timer_init+0x2f0>)
    2588:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    258a:	230f      	movs	r3, #15
    258c:	18fb      	adds	r3, r7, r3
    258e:	2200      	movs	r2, #0
    2590:	569a      	ldrsb	r2, [r3, r2]
    2592:	496b      	ldr	r1, [pc, #428]	; (2740 <_timer_init+0x2e0>)
    2594:	0013      	movs	r3, r2
    2596:	009b      	lsls	r3, r3, #2
    2598:	189b      	adds	r3, r3, r2
    259a:	009b      	lsls	r3, r3, #2
    259c:	18cb      	adds	r3, r1, r3
    259e:	3310      	adds	r3, #16
    25a0:	681a      	ldr	r2, [r3, #0]
    25a2:	683b      	ldr	r3, [r7, #0]
    25a4:	2101      	movs	r1, #1
    25a6:	0018      	movs	r0, r3
    25a8:	4b69      	ldr	r3, [pc, #420]	; (2750 <_timer_init+0x2f0>)
    25aa:	4798      	blx	r3
    25ac:	e078      	b.n	26a0 <_timer_init+0x240>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    25ae:	230f      	movs	r3, #15
    25b0:	18fb      	adds	r3, r7, r3
    25b2:	2200      	movs	r2, #0
    25b4:	569a      	ldrsb	r2, [r3, r2]
    25b6:	4962      	ldr	r1, [pc, #392]	; (2740 <_timer_init+0x2e0>)
    25b8:	0013      	movs	r3, r2
    25ba:	009b      	lsls	r3, r3, #2
    25bc:	189b      	adds	r3, r3, r2
    25be:	009b      	lsls	r3, r3, #2
    25c0:	18cb      	adds	r3, r1, r3
    25c2:	3304      	adds	r3, #4
    25c4:	681b      	ldr	r3, [r3, #0]
    25c6:	220c      	movs	r2, #12
    25c8:	4013      	ands	r3, r2
    25ca:	d124      	bne.n	2616 <_timer_init+0x1b6>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    25cc:	230f      	movs	r3, #15
    25ce:	18fb      	adds	r3, r7, r3
    25d0:	2200      	movs	r2, #0
    25d2:	569a      	ldrsb	r2, [r3, r2]
    25d4:	495a      	ldr	r1, [pc, #360]	; (2740 <_timer_init+0x2e0>)
    25d6:	0013      	movs	r3, r2
    25d8:	009b      	lsls	r3, r3, #2
    25da:	189b      	adds	r3, r3, r2
    25dc:	009b      	lsls	r3, r3, #2
    25de:	18cb      	adds	r3, r1, r3
    25e0:	330c      	adds	r3, #12
    25e2:	681b      	ldr	r3, [r3, #0]
    25e4:	b29a      	uxth	r2, r3
    25e6:	683b      	ldr	r3, [r7, #0]
    25e8:	2100      	movs	r1, #0
    25ea:	0018      	movs	r0, r3
    25ec:	4b59      	ldr	r3, [pc, #356]	; (2754 <_timer_init+0x2f4>)
    25ee:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    25f0:	230f      	movs	r3, #15
    25f2:	18fb      	adds	r3, r7, r3
    25f4:	2200      	movs	r2, #0
    25f6:	569a      	ldrsb	r2, [r3, r2]
    25f8:	4951      	ldr	r1, [pc, #324]	; (2740 <_timer_init+0x2e0>)
    25fa:	0013      	movs	r3, r2
    25fc:	009b      	lsls	r3, r3, #2
    25fe:	189b      	adds	r3, r3, r2
    2600:	009b      	lsls	r3, r3, #2
    2602:	18cb      	adds	r3, r1, r3
    2604:	3310      	adds	r3, #16
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	b29a      	uxth	r2, r3
    260a:	683b      	ldr	r3, [r7, #0]
    260c:	2101      	movs	r1, #1
    260e:	0018      	movs	r0, r3
    2610:	4b50      	ldr	r3, [pc, #320]	; (2754 <_timer_init+0x2f4>)
    2612:	4798      	blx	r3
    2614:	e044      	b.n	26a0 <_timer_init+0x240>

	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2616:	230f      	movs	r3, #15
    2618:	18fb      	adds	r3, r7, r3
    261a:	2200      	movs	r2, #0
    261c:	569a      	ldrsb	r2, [r3, r2]
    261e:	4948      	ldr	r1, [pc, #288]	; (2740 <_timer_init+0x2e0>)
    2620:	0013      	movs	r3, r2
    2622:	009b      	lsls	r3, r3, #2
    2624:	189b      	adds	r3, r3, r2
    2626:	009b      	lsls	r3, r3, #2
    2628:	18cb      	adds	r3, r1, r3
    262a:	3304      	adds	r3, #4
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	220c      	movs	r2, #12
    2630:	4013      	ands	r3, r2
    2632:	2b04      	cmp	r3, #4
    2634:	d134      	bne.n	26a0 <_timer_init+0x240>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2636:	230f      	movs	r3, #15
    2638:	18fb      	adds	r3, r7, r3
    263a:	2200      	movs	r2, #0
    263c:	569a      	ldrsb	r2, [r3, r2]
    263e:	4940      	ldr	r1, [pc, #256]	; (2740 <_timer_init+0x2e0>)
    2640:	0013      	movs	r3, r2
    2642:	009b      	lsls	r3, r3, #2
    2644:	189b      	adds	r3, r3, r2
    2646:	009b      	lsls	r3, r3, #2
    2648:	18cb      	adds	r3, r1, r3
    264a:	330c      	adds	r3, #12
    264c:	681b      	ldr	r3, [r3, #0]
    264e:	b2da      	uxtb	r2, r3
    2650:	683b      	ldr	r3, [r7, #0]
    2652:	2100      	movs	r1, #0
    2654:	0018      	movs	r0, r3
    2656:	4b40      	ldr	r3, [pc, #256]	; (2758 <_timer_init+0x2f8>)
    2658:	4798      	blx	r3
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    265a:	230f      	movs	r3, #15
    265c:	18fb      	adds	r3, r7, r3
    265e:	2200      	movs	r2, #0
    2660:	569a      	ldrsb	r2, [r3, r2]
    2662:	4937      	ldr	r1, [pc, #220]	; (2740 <_timer_init+0x2e0>)
    2664:	0013      	movs	r3, r2
    2666:	009b      	lsls	r3, r3, #2
    2668:	189b      	adds	r3, r3, r2
    266a:	009b      	lsls	r3, r3, #2
    266c:	18cb      	adds	r3, r1, r3
    266e:	3310      	adds	r3, #16
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	b2da      	uxtb	r2, r3
    2674:	683b      	ldr	r3, [r7, #0]
    2676:	2101      	movs	r1, #1
    2678:	0018      	movs	r0, r3
    267a:	4b37      	ldr	r3, [pc, #220]	; (2758 <_timer_init+0x2f8>)
    267c:	4798      	blx	r3
		hri_tccount8_write_PER_reg(hw, _tcs[i].per);
    267e:	230f      	movs	r3, #15
    2680:	18fb      	adds	r3, r7, r3
    2682:	2200      	movs	r2, #0
    2684:	569a      	ldrsb	r2, [r3, r2]
    2686:	492e      	ldr	r1, [pc, #184]	; (2740 <_timer_init+0x2e0>)
    2688:	0013      	movs	r3, r2
    268a:	009b      	lsls	r3, r3, #2
    268c:	189b      	adds	r3, r3, r2
    268e:	009b      	lsls	r3, r3, #2
    2690:	18cb      	adds	r3, r1, r3
    2692:	330b      	adds	r3, #11
    2694:	781a      	ldrb	r2, [r3, #0]
    2696:	683b      	ldr	r3, [r7, #0]
    2698:	0011      	movs	r1, r2
    269a:	0018      	movs	r0, r3
    269c:	4b2f      	ldr	r3, [pc, #188]	; (275c <_timer_init+0x2fc>)
    269e:	4798      	blx	r3
	}
	hri_tc_set_INTEN_OVF_bit(hw);
    26a0:	683b      	ldr	r3, [r7, #0]
    26a2:	0018      	movs	r0, r3
    26a4:	4b2e      	ldr	r3, [pc, #184]	; (2760 <_timer_init+0x300>)
    26a6:	4798      	blx	r3

	_tc_init_irq_param(hw, (void *)device);
    26a8:	687a      	ldr	r2, [r7, #4]
    26aa:	683b      	ldr	r3, [r7, #0]
    26ac:	0011      	movs	r1, r2
    26ae:	0018      	movs	r0, r3
    26b0:	4b2c      	ldr	r3, [pc, #176]	; (2764 <_timer_init+0x304>)
    26b2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    26b4:	230f      	movs	r3, #15
    26b6:	18fb      	adds	r3, r7, r3
    26b8:	2200      	movs	r2, #0
    26ba:	569a      	ldrsb	r2, [r3, r2]
    26bc:	4920      	ldr	r1, [pc, #128]	; (2740 <_timer_init+0x2e0>)
    26be:	0013      	movs	r3, r2
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	189b      	adds	r3, r3, r2
    26c4:	009b      	lsls	r3, r3, #2
    26c6:	18cb      	adds	r3, r1, r3
    26c8:	3301      	adds	r3, #1
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	b25b      	sxtb	r3, r3
    26ce:	0018      	movs	r0, r3
    26d0:	4b25      	ldr	r3, [pc, #148]	; (2768 <_timer_init+0x308>)
    26d2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    26d4:	230f      	movs	r3, #15
    26d6:	18fb      	adds	r3, r7, r3
    26d8:	2200      	movs	r2, #0
    26da:	569a      	ldrsb	r2, [r3, r2]
    26dc:	4918      	ldr	r1, [pc, #96]	; (2740 <_timer_init+0x2e0>)
    26de:	0013      	movs	r3, r2
    26e0:	009b      	lsls	r3, r3, #2
    26e2:	189b      	adds	r3, r3, r2
    26e4:	009b      	lsls	r3, r3, #2
    26e6:	18cb      	adds	r3, r1, r3
    26e8:	3301      	adds	r3, #1
    26ea:	781b      	ldrb	r3, [r3, #0]
    26ec:	b25b      	sxtb	r3, r3
    26ee:	0018      	movs	r0, r3
    26f0:	4b1e      	ldr	r3, [pc, #120]	; (276c <_timer_init+0x30c>)
    26f2:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    26f4:	230f      	movs	r3, #15
    26f6:	18fb      	adds	r3, r7, r3
    26f8:	2200      	movs	r2, #0
    26fa:	569a      	ldrsb	r2, [r3, r2]
    26fc:	4910      	ldr	r1, [pc, #64]	; (2740 <_timer_init+0x2e0>)
    26fe:	0013      	movs	r3, r2
    2700:	009b      	lsls	r3, r3, #2
    2702:	189b      	adds	r3, r3, r2
    2704:	009b      	lsls	r3, r3, #2
    2706:	18cb      	adds	r3, r1, r3
    2708:	3301      	adds	r3, #1
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	b25b      	sxtb	r3, r3
    270e:	0018      	movs	r0, r3
    2710:	4b17      	ldr	r3, [pc, #92]	; (2770 <_timer_init+0x310>)
    2712:	4798      	blx	r3

	return ERR_NONE;
    2714:	2300      	movs	r3, #0
}
    2716:	0018      	movs	r0, r3
    2718:	46bd      	mov	sp, r7
    271a:	b005      	add	sp, #20
    271c:	bd90      	pop	{r4, r7, pc}
    271e:	46c0      	nop			; (mov r8, r8)
    2720:	000027d9 	.word	0x000027d9
    2724:	000042bc 	.word	0x000042bc
    2728:	00000cb9 	.word	0x00000cb9
    272c:	0000222b 	.word	0x0000222b
    2730:	000022c5 	.word	0x000022c5
    2734:	00002299 	.word	0x00002299
    2738:	0000220d 	.word	0x0000220d
    273c:	000022f5 	.word	0x000022f5
    2740:	20000018 	.word	0x20000018
    2744:	00002359 	.word	0x00002359
    2748:	0000231d 	.word	0x0000231d
    274c:	0000233b 	.word	0x0000233b
    2750:	00002425 	.word	0x00002425
    2754:	000023e1 	.word	0x000023e1
    2758:	000023a5 	.word	0x000023a5
    275c:	00002379 	.word	0x00002379
    2760:	00002283 	.word	0x00002283
    2764:	00002865 	.word	0x00002865
    2768:	00002195 	.word	0x00002195
    276c:	000021d5 	.word	0x000021d5
    2770:	00002161 	.word	0x00002161

00002774 <_tc_get_timer>:

/**
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
    2774:	b580      	push	{r7, lr}
    2776:	af00      	add	r7, sp, #0
	return NULL;
    2778:	2300      	movs	r3, #0
}
    277a:	0018      	movs	r0, r3
    277c:	46bd      	mov	sp, r7
    277e:	bd80      	pop	{r7, pc}

00002780 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2780:	b580      	push	{r7, lr}
    2782:	b084      	sub	sp, #16
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	68db      	ldr	r3, [r3, #12]
    278c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    278e:	68fb      	ldr	r3, [r7, #12]
    2790:	0018      	movs	r0, r3
    2792:	4b08      	ldr	r3, [pc, #32]	; (27b4 <tc_interrupt_handler+0x34>)
    2794:	4798      	blx	r3
    2796:	1e03      	subs	r3, r0, #0
    2798:	d008      	beq.n	27ac <tc_interrupt_handler+0x2c>
		hri_tc_clear_interrupt_OVF_bit(hw);
    279a:	68fb      	ldr	r3, [r7, #12]
    279c:	0018      	movs	r0, r3
    279e:	4b06      	ldr	r3, [pc, #24]	; (27b8 <tc_interrupt_handler+0x38>)
    27a0:	4798      	blx	r3
		device->timer_cb.period_expired(device);
    27a2:	687b      	ldr	r3, [r7, #4]
    27a4:	681b      	ldr	r3, [r3, #0]
    27a6:	687a      	ldr	r2, [r7, #4]
    27a8:	0010      	movs	r0, r2
    27aa:	4798      	blx	r3
	}
}
    27ac:	46c0      	nop			; (mov r8, r8)
    27ae:	46bd      	mov	sp, r7
    27b0:	b004      	add	sp, #16
    27b2:	bd80      	pop	{r7, pc}
    27b4:	0000224b 	.word	0x0000224b
    27b8:	0000226d 	.word	0x0000226d

000027bc <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    27bc:	b580      	push	{r7, lr}
    27be:	af00      	add	r7, sp, #0
	tc_interrupt_handler(_tc0_dev);
    27c0:	4b03      	ldr	r3, [pc, #12]	; (27d0 <TC0_Handler+0x14>)
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	0018      	movs	r0, r3
    27c6:	4b03      	ldr	r3, [pc, #12]	; (27d4 <TC0_Handler+0x18>)
    27c8:	4798      	blx	r3
}
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	46bd      	mov	sp, r7
    27ce:	bd80      	pop	{r7, pc}
    27d0:	2000004c 	.word	0x2000004c
    27d4:	00002781 	.word	0x00002781

000027d8 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    27d8:	b590      	push	{r4, r7, lr}
    27da:	b085      	sub	sp, #20
    27dc:	af00      	add	r7, sp, #0
    27de:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    27e0:	230e      	movs	r3, #14
    27e2:	18fc      	adds	r4, r7, r3
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	0018      	movs	r0, r3
    27e8:	4b1a      	ldr	r3, [pc, #104]	; (2854 <get_tc_index+0x7c>)
    27ea:	4798      	blx	r3
    27ec:	0003      	movs	r3, r0
    27ee:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    27f0:	230f      	movs	r3, #15
    27f2:	18fb      	adds	r3, r7, r3
    27f4:	2200      	movs	r2, #0
    27f6:	701a      	strb	r2, [r3, #0]
    27f8:	e019      	b.n	282e <get_tc_index+0x56>
		if (_tcs[i].number == index) {
    27fa:	230f      	movs	r3, #15
    27fc:	18fb      	adds	r3, r7, r3
    27fe:	781a      	ldrb	r2, [r3, #0]
    2800:	4915      	ldr	r1, [pc, #84]	; (2858 <get_tc_index+0x80>)
    2802:	0013      	movs	r3, r2
    2804:	009b      	lsls	r3, r3, #2
    2806:	189b      	adds	r3, r3, r2
    2808:	009b      	lsls	r3, r3, #2
    280a:	5c5b      	ldrb	r3, [r3, r1]
    280c:	220e      	movs	r2, #14
    280e:	18ba      	adds	r2, r7, r2
    2810:	7812      	ldrb	r2, [r2, #0]
    2812:	429a      	cmp	r2, r3
    2814:	d104      	bne.n	2820 <get_tc_index+0x48>
			return i;
    2816:	230f      	movs	r3, #15
    2818:	18fb      	adds	r3, r7, r3
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	b25b      	sxtb	r3, r3
    281e:	e014      	b.n	284a <get_tc_index+0x72>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2820:	230f      	movs	r3, #15
    2822:	18fb      	adds	r3, r7, r3
    2824:	781a      	ldrb	r2, [r3, #0]
    2826:	230f      	movs	r3, #15
    2828:	18fb      	adds	r3, r7, r3
    282a:	3201      	adds	r2, #1
    282c:	701a      	strb	r2, [r3, #0]
    282e:	230f      	movs	r3, #15
    2830:	18fb      	adds	r3, r7, r3
    2832:	781b      	ldrb	r3, [r3, #0]
    2834:	2b00      	cmp	r3, #0
    2836:	d0e0      	beq.n	27fa <get_tc_index+0x22>
		}
	}

	ASSERT(false);
    2838:	239e      	movs	r3, #158	; 0x9e
    283a:	005a      	lsls	r2, r3, #1
    283c:	4b07      	ldr	r3, [pc, #28]	; (285c <get_tc_index+0x84>)
    283e:	0019      	movs	r1, r3
    2840:	2000      	movs	r0, #0
    2842:	4b07      	ldr	r3, [pc, #28]	; (2860 <get_tc_index+0x88>)
    2844:	4798      	blx	r3
	return -1;
    2846:	2301      	movs	r3, #1
    2848:	425b      	negs	r3, r3
}
    284a:	0018      	movs	r0, r3
    284c:	46bd      	mov	sp, r7
    284e:	b005      	add	sp, #20
    2850:	bd90      	pop	{r4, r7, pc}
    2852:	46c0      	nop			; (mov r8, r8)
    2854:	0000288d 	.word	0x0000288d
    2858:	20000018 	.word	0x20000018
    285c:	000042bc 	.word	0x000042bc
    2860:	00000cb9 	.word	0x00000cb9

00002864 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    2864:	b580      	push	{r7, lr}
    2866:	b082      	sub	sp, #8
    2868:	af00      	add	r7, sp, #0
    286a:	6078      	str	r0, [r7, #4]
    286c:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	4a04      	ldr	r2, [pc, #16]	; (2884 <_tc_init_irq_param+0x20>)
    2872:	4293      	cmp	r3, r2
    2874:	d102      	bne.n	287c <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _timer_device *)dev;
    2876:	4b04      	ldr	r3, [pc, #16]	; (2888 <_tc_init_irq_param+0x24>)
    2878:	683a      	ldr	r2, [r7, #0]
    287a:	601a      	str	r2, [r3, #0]
	}
}
    287c:	46c0      	nop			; (mov r8, r8)
    287e:	46bd      	mov	sp, r7
    2880:	b002      	add	sp, #8
    2882:	bd80      	pop	{r7, pc}
    2884:	42002000 	.word	0x42002000
    2888:	2000004c 	.word	0x2000004c

0000288c <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    288c:	b580      	push	{r7, lr}
    288e:	b082      	sub	sp, #8
    2890:	af00      	add	r7, sp, #0
    2892:	6078      	str	r0, [r7, #4]
	if ((uint32_t)TC4 == (uint32_t)hw) {
    2894:	687b      	ldr	r3, [r7, #4]
    2896:	4a07      	ldr	r2, [pc, #28]	; (28b4 <_get_hardware_offset+0x28>)
    2898:	4293      	cmp	r3, r2
    289a:	d101      	bne.n	28a0 <_get_hardware_offset+0x14>
		return 4;
    289c:	2304      	movs	r3, #4
    289e:	e005      	b.n	28ac <_get_hardware_offset+0x20>
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	4a05      	ldr	r2, [pc, #20]	; (28b8 <_get_hardware_offset+0x2c>)
    28a4:	4694      	mov	ip, r2
    28a6:	4463      	add	r3, ip
    28a8:	0a9b      	lsrs	r3, r3, #10
    28aa:	b2db      	uxtb	r3, r3
}
    28ac:	0018      	movs	r0, r3
    28ae:	46bd      	mov	sp, r7
    28b0:	b002      	add	sp, #8
    28b2:	bd80      	pop	{r7, pc}
    28b4:	43000800 	.word	0x43000800
    28b8:	bdffe000 	.word	0xbdffe000

000028bc <main>:
#include <atmel_start.h>
#include "temperature_sensor_main.h"
int main(void)
{
    28bc:	b580      	push	{r7, lr}
    28be:	b082      	sub	sp, #8
    28c0:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    28c2:	4b0a      	ldr	r3, [pc, #40]	; (28ec <main+0x30>)
    28c4:	4798      	blx	r3
	temperature_sensors_init();
    28c6:	4b0a      	ldr	r3, [pc, #40]	; (28f0 <main+0x34>)
    28c8:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
	int x = temperature_sensor_read(TEMPERATURE_SENSOR); 
    28ca:	4b0a      	ldr	r3, [pc, #40]	; (28f4 <main+0x38>)
    28cc:	681b      	ldr	r3, [r3, #0]
    28ce:	0018      	movs	r0, r3
    28d0:	4b09      	ldr	r3, [pc, #36]	; (28f8 <main+0x3c>)
    28d2:	4798      	blx	r3
    28d4:	1c02      	adds	r2, r0, #0
    28d6:	4b09      	ldr	r3, [pc, #36]	; (28fc <main+0x40>)
    28d8:	1c10      	adds	r0, r2, #0
    28da:	4798      	blx	r3
    28dc:	0003      	movs	r3, r0
    28de:	607b      	str	r3, [r7, #4]
		delay_ms(1000); 
    28e0:	23fa      	movs	r3, #250	; 0xfa
    28e2:	009b      	lsls	r3, r3, #2
    28e4:	0018      	movs	r0, r3
    28e6:	4b06      	ldr	r3, [pc, #24]	; (2900 <main+0x44>)
    28e8:	4798      	blx	r3
	while (1) {
    28ea:	e7ee      	b.n	28ca <main+0xe>
    28ec:	00000115 	.word	0x00000115
    28f0:	000032e9 	.word	0x000032e9
    28f4:	20000094 	.word	0x20000094
    28f8:	000032cb 	.word	0x000032cb
    28fc:	000039b1 	.word	0x000039b1
    2900:	00000829 	.word	0x00000829

00002904 <mcp980X_construct>:


static const struct temperature_sensor_interface mcp980x_interface = {mcp980x_read, mcp980x_config};

struct temperature_sensor *mcp980X_construct(struct temperature_sensor *const me, void *const io, const uint8_t resolution)
{
    2904:	b580      	push	{r7, lr}
    2906:	b086      	sub	sp, #24
    2908:	af00      	add	r7, sp, #0
    290a:	60f8      	str	r0, [r7, #12]
    290c:	60b9      	str	r1, [r7, #8]
    290e:	1dfb      	adds	r3, r7, #7
    2910:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr;
	struct mcp980x *     mcp98 = (struct mcp980x *)me;
    2912:	68fb      	ldr	r3, [r7, #12]
    2914:	617b      	str	r3, [r7, #20]

	temperature_sensor_construct(me, io, &mcp980x_interface);
    2916:	4a0a      	ldr	r2, [pc, #40]	; (2940 <mcp980X_construct+0x3c>)
    2918:	68b9      	ldr	r1, [r7, #8]
    291a:	68fb      	ldr	r3, [r7, #12]
    291c:	0018      	movs	r0, r3
    291e:	4b09      	ldr	r3, [pc, #36]	; (2944 <mcp980X_construct+0x40>)
    2920:	4798      	blx	r3
	descr            = (struct i2c_m_sync_desc *)(me->io);
    2922:	68fb      	ldr	r3, [r7, #12]
    2924:	681b      	ldr	r3, [r3, #0]
    2926:	613b      	str	r3, [r7, #16]
	
	i2c_m_sync_set_slaveaddr(descr, CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    2928:	2380      	movs	r3, #128	; 0x80
    292a:	011a      	lsls	r2, r3, #4
    292c:	693b      	ldr	r3, [r7, #16]
    292e:	2118      	movs	r1, #24
    2930:	0018      	movs	r0, r3
    2932:	4b05      	ldr	r3, [pc, #20]	; (2948 <mcp980X_construct+0x44>)
    2934:	4798      	blx	r3

	return me;
    2936:	68fb      	ldr	r3, [r7, #12]
}
    2938:	0018      	movs	r0, r3
    293a:	46bd      	mov	sp, r7
    293c:	b006      	add	sp, #24
    293e:	bd80      	pop	{r7, pc}
    2940:	000042d0 	.word	0x000042d0
    2944:	000032a9 	.word	0x000032a9
    2948:	000009b1 	.word	0x000009b1

0000294c <mcp980x_read>:

/**
 * \brief Read temperature from the given sensor
 */
float mcp980x_read(const struct temperature_sensor *const me)
{
    294c:	b590      	push	{r4, r7, lr}
    294e:	b087      	sub	sp, #28
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
	uint8_t buffer[2] = {0x00}; 
    2954:	2308      	movs	r3, #8
    2956:	18fb      	adds	r3, r7, r3
    2958:	2200      	movs	r2, #0
    295a:	801a      	strh	r2, [r3, #0]
	buffer[0]=MCP980X_TEMP_REG;
    295c:	2308      	movs	r3, #8
    295e:	18fb      	adds	r3, r7, r3
    2960:	2205      	movs	r2, #5
    2962:	701a      	strb	r2, [r3, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	681b      	ldr	r3, [r3, #0]
    2968:	613b      	str	r3, [r7, #16]
	
	i2c_m_sync_set_slaveaddr(descr,CONF_MCP980X_SENSOR_ADDRES, I2C_M_SEVEN);
    296a:	2380      	movs	r3, #128	; 0x80
    296c:	011a      	lsls	r2, r3, #4
    296e:	693b      	ldr	r3, [r7, #16]
    2970:	2118      	movs	r1, #24
    2972:	0018      	movs	r0, r3
    2974:	4b1e      	ldr	r3, [pc, #120]	; (29f0 <mcp980x_read+0xa4>)
    2976:	4798      	blx	r3
	
	io_write(&descr->io, buffer, 1);
    2978:	693b      	ldr	r3, [r7, #16]
    297a:	3314      	adds	r3, #20
    297c:	2208      	movs	r2, #8
    297e:	18b9      	adds	r1, r7, r2
    2980:	2201      	movs	r2, #1
    2982:	0018      	movs	r0, r3
    2984:	4b1b      	ldr	r3, [pc, #108]	; (29f4 <mcp980x_read+0xa8>)
    2986:	4798      	blx	r3
	io_read(&descr->io, buffer, 2);
    2988:	693b      	ldr	r3, [r7, #16]
    298a:	3314      	adds	r3, #20
    298c:	2208      	movs	r2, #8
    298e:	18b9      	adds	r1, r7, r2
    2990:	2202      	movs	r2, #2
    2992:	0018      	movs	r0, r3
    2994:	4b18      	ldr	r3, [pc, #96]	; (29f8 <mcp980x_read+0xac>)
    2996:	4798      	blx	r3
	
	int temp = ((buffer[0] & 0x1F) * 256 + buffer[1]);
    2998:	2308      	movs	r3, #8
    299a:	18fb      	adds	r3, r7, r3
    299c:	781b      	ldrb	r3, [r3, #0]
    299e:	001a      	movs	r2, r3
    29a0:	231f      	movs	r3, #31
    29a2:	4013      	ands	r3, r2
    29a4:	021b      	lsls	r3, r3, #8
    29a6:	2208      	movs	r2, #8
    29a8:	18ba      	adds	r2, r7, r2
    29aa:	7852      	ldrb	r2, [r2, #1]
    29ac:	189b      	adds	r3, r3, r2
    29ae:	617b      	str	r3, [r7, #20]
	if(temp > 4095)
    29b0:	697b      	ldr	r3, [r7, #20]
    29b2:	4a12      	ldr	r2, [pc, #72]	; (29fc <mcp980x_read+0xb0>)
    29b4:	4293      	cmp	r3, r2
    29b6:	dd04      	ble.n	29c2 <mcp980x_read+0x76>
	{
		temp -= 8192;
    29b8:	697b      	ldr	r3, [r7, #20]
    29ba:	4a11      	ldr	r2, [pc, #68]	; (2a00 <mcp980x_read+0xb4>)
    29bc:	4694      	mov	ip, r2
    29be:	4463      	add	r3, ip
    29c0:	617b      	str	r3, [r7, #20]
	}
	float cTemp = temp * 0.0625;
    29c2:	4b10      	ldr	r3, [pc, #64]	; (2a04 <mcp980x_read+0xb8>)
    29c4:	6978      	ldr	r0, [r7, #20]
    29c6:	4798      	blx	r3
    29c8:	4c0f      	ldr	r4, [pc, #60]	; (2a08 <mcp980x_read+0xbc>)
    29ca:	2200      	movs	r2, #0
    29cc:	4b0f      	ldr	r3, [pc, #60]	; (2a0c <mcp980x_read+0xc0>)
    29ce:	47a0      	blx	r4
    29d0:	0003      	movs	r3, r0
    29d2:	000c      	movs	r4, r1
    29d4:	0019      	movs	r1, r3
    29d6:	0022      	movs	r2, r4
    29d8:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <mcp980x_read+0xc4>)
    29da:	0008      	movs	r0, r1
    29dc:	0011      	movs	r1, r2
    29de:	4798      	blx	r3
    29e0:	1c03      	adds	r3, r0, #0
    29e2:	60fb      	str	r3, [r7, #12]
	
	return cTemp; 
    29e4:	68fb      	ldr	r3, [r7, #12]
}
    29e6:	1c18      	adds	r0, r3, #0
    29e8:	46bd      	mov	sp, r7
    29ea:	b007      	add	sp, #28
    29ec:	bd90      	pop	{r4, r7, pc}
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	000009b1 	.word	0x000009b1
    29f4:	000009f1 	.word	0x000009f1
    29f8:	00000a45 	.word	0x00000a45
    29fc:	00000fff 	.word	0x00000fff
    2a00:	ffffe000 	.word	0xffffe000
    2a04:	00003f91 	.word	0x00003f91
    2a08:	00003a91 	.word	0x00003a91
    2a0c:	3fb00000 	.word	0x3fb00000
    2a10:	00004015 	.word	0x00004015

00002a14 <mcp980x_config>:

/**
 *  \brief setup sensor by tempereture sensor settings !!!DONT WORK  !!!! RETURN BAD VALUES !!!!!!
 */
int16_t mcp980x_config(const struct temperature_sensor *const me, struct tempereture_sensor_settings *temp_set)
{ 
    2a14:	b580      	push	{r7, lr}
    2a16:	b082      	sub	sp, #8
    2a18:	af00      	add	r7, sp, #0
    2a1a:	6078      	str	r0, [r7, #4]
    2a1c:	6039      	str	r1, [r7, #0]
	if(_mcp980x_set_setup(me,temp_set)==MCP980X_ERROR){
    2a1e:	683a      	ldr	r2, [r7, #0]
    2a20:	687b      	ldr	r3, [r7, #4]
    2a22:	0011      	movs	r1, r2
    2a24:	0018      	movs	r0, r3
    2a26:	4b1e      	ldr	r3, [pc, #120]	; (2aa0 <mcp980x_config+0x8c>)
    2a28:	4798      	blx	r3
    2a2a:	0003      	movs	r3, r0
    2a2c:	3301      	adds	r3, #1
    2a2e:	d102      	bne.n	2a36 <mcp980x_config+0x22>
		return MCP980X_ERROR;
    2a30:	2301      	movs	r3, #1
    2a32:	425b      	negs	r3, r3
    2a34:	e030      	b.n	2a98 <mcp980x_config+0x84>
	}
	if(_mcp980x_set_tupper(me,temp_set)==MCP980X_ERROR){
    2a36:	683a      	ldr	r2, [r7, #0]
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	0011      	movs	r1, r2
    2a3c:	0018      	movs	r0, r3
    2a3e:	4b19      	ldr	r3, [pc, #100]	; (2aa4 <mcp980x_config+0x90>)
    2a40:	4798      	blx	r3
    2a42:	0003      	movs	r3, r0
    2a44:	3301      	adds	r3, #1
    2a46:	d102      	bne.n	2a4e <mcp980x_config+0x3a>
		return MCP980X_ERROR;
    2a48:	2301      	movs	r3, #1
    2a4a:	425b      	negs	r3, r3
    2a4c:	e024      	b.n	2a98 <mcp980x_config+0x84>
	}
	
	if(_mcp980x_set_lower(me,temp_set)==MCP980X_ERROR) {
    2a4e:	683a      	ldr	r2, [r7, #0]
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	0011      	movs	r1, r2
    2a54:	0018      	movs	r0, r3
    2a56:	4b14      	ldr	r3, [pc, #80]	; (2aa8 <mcp980x_config+0x94>)
    2a58:	4798      	blx	r3
    2a5a:	0003      	movs	r3, r0
    2a5c:	3301      	adds	r3, #1
    2a5e:	d102      	bne.n	2a66 <mcp980x_config+0x52>
		return MCP980X_ERROR; 
    2a60:	2301      	movs	r3, #1
    2a62:	425b      	negs	r3, r3
    2a64:	e018      	b.n	2a98 <mcp980x_config+0x84>
	}
	if(_mcp980x_set_critical(me,temp_set)==MCP980X_ERROR){
    2a66:	683a      	ldr	r2, [r7, #0]
    2a68:	687b      	ldr	r3, [r7, #4]
    2a6a:	0011      	movs	r1, r2
    2a6c:	0018      	movs	r0, r3
    2a6e:	4b0f      	ldr	r3, [pc, #60]	; (2aac <mcp980x_config+0x98>)
    2a70:	4798      	blx	r3
    2a72:	0003      	movs	r3, r0
    2a74:	3301      	adds	r3, #1
    2a76:	d102      	bne.n	2a7e <mcp980x_config+0x6a>
		return MCP980X_ERROR; 
    2a78:	2301      	movs	r3, #1
    2a7a:	425b      	negs	r3, r3
    2a7c:	e00c      	b.n	2a98 <mcp980x_config+0x84>
	} 
	if(_mcp980x_set_resolution(me,temp_set)==MCP980X_ERROR){
    2a7e:	683a      	ldr	r2, [r7, #0]
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	0011      	movs	r1, r2
    2a84:	0018      	movs	r0, r3
    2a86:	4b0a      	ldr	r3, [pc, #40]	; (2ab0 <mcp980x_config+0x9c>)
    2a88:	4798      	blx	r3
    2a8a:	0003      	movs	r3, r0
    2a8c:	3301      	adds	r3, #1
    2a8e:	d102      	bne.n	2a96 <mcp980x_config+0x82>
		return MCP980X_ERROR; 
    2a90:	2301      	movs	r3, #1
    2a92:	425b      	negs	r3, r3
    2a94:	e000      	b.n	2a98 <mcp980x_config+0x84>
	} 	
return MCP980X_ERROR_NONE; 
    2a96:	2300      	movs	r3, #0
}
    2a98:	0018      	movs	r0, r3
    2a9a:	46bd      	mov	sp, r7
    2a9c:	b002      	add	sp, #8
    2a9e:	bd80      	pop	{r7, pc}
    2aa0:	00002ab5 	.word	0x00002ab5
    2aa4:	00002c75 	.word	0x00002c75
    2aa8:	00002e51 	.word	0x00002e51
    2aac:	0000302d 	.word	0x0000302d
    2ab0:	00003209 	.word	0x00003209

00002ab4 <_mcp980x_set_setup>:

int16_t _mcp980x_set_setup(struct temperature_sensor *const me, struct tempereture_sensor_settings *temp_set)
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	b086      	sub	sp, #24
    2ab8:	af00      	add	r7, sp, #0
    2aba:	6078      	str	r0, [r7, #4]
    2abc:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    2abe:	687b      	ldr	r3, [r7, #4]
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	617b      	str	r3, [r7, #20]
	
	i2c_m_sync_set_slaveaddr(&descr->io, 0x18, I2C_M_SEVEN); 
    2ac4:	697b      	ldr	r3, [r7, #20]
    2ac6:	3314      	adds	r3, #20
    2ac8:	0018      	movs	r0, r3
    2aca:	2380      	movs	r3, #128	; 0x80
    2acc:	011b      	lsls	r3, r3, #4
    2ace:	001a      	movs	r2, r3
    2ad0:	2118      	movs	r1, #24
    2ad2:	4b63      	ldr	r3, [pc, #396]	; (2c60 <_mcp980x_set_setup+0x1ac>)
    2ad4:	4798      	blx	r3
	
	uint8_t buffer_setup[3];
	uint8_t buffer_read[2];
	
	memset(buffer_read, 0, sizeof(buffer_read));
    2ad6:	230c      	movs	r3, #12
    2ad8:	18fb      	adds	r3, r7, r3
    2ada:	2202      	movs	r2, #2
    2adc:	2100      	movs	r1, #0
    2ade:	0018      	movs	r0, r3
    2ae0:	4b60      	ldr	r3, [pc, #384]	; (2c64 <_mcp980x_set_setup+0x1b0>)
    2ae2:	4798      	blx	r3
	 
	buffer_setup[0]=MCP980X_SETUP_REG; 
    2ae4:	2310      	movs	r3, #16
    2ae6:	18fb      	adds	r3, r7, r3
    2ae8:	2201      	movs	r2, #1
    2aea:	701a      	strb	r2, [r3, #0]
	
	buffer_setup[1] = temp_set->mcp980x->mcp980x_hysteresis << 1; 
    2aec:	683b      	ldr	r3, [r7, #0]
    2aee:	681b      	ldr	r3, [r3, #0]
    2af0:	7b5b      	ldrb	r3, [r3, #13]
    2af2:	18db      	adds	r3, r3, r3
    2af4:	b2da      	uxtb	r2, r3
    2af6:	2310      	movs	r3, #16
    2af8:	18fb      	adds	r3, r7, r3
    2afa:	705a      	strb	r2, [r3, #1]
	
	if (temp_set->mcp980x->shutdown)
    2afc:	683b      	ldr	r3, [r7, #0]
    2afe:	681b      	ldr	r3, [r3, #0]
    2b00:	7bdb      	ldrb	r3, [r3, #15]
    2b02:	2b00      	cmp	r3, #0
    2b04:	d007      	beq.n	2b16 <_mcp980x_set_setup+0x62>
	{
		buffer_setup[1] +=1;
    2b06:	2310      	movs	r3, #16
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	785b      	ldrb	r3, [r3, #1]
    2b0c:	3301      	adds	r3, #1
    2b0e:	b2da      	uxtb	r2, r3
    2b10:	2310      	movs	r3, #16
    2b12:	18fb      	adds	r3, r7, r3
    2b14:	705a      	strb	r2, [r3, #1]
	}
	if (temp_set->mcp980x->ctr_loc)
    2b16:	683b      	ldr	r3, [r7, #0]
    2b18:	681b      	ldr	r3, [r3, #0]
    2b1a:	7c1b      	ldrb	r3, [r3, #16]
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d009      	beq.n	2b34 <_mcp980x_set_setup+0x80>
	{
		buffer_setup[2]|=0b10000000; 
    2b20:	2310      	movs	r3, #16
    2b22:	18fb      	adds	r3, r7, r3
    2b24:	789b      	ldrb	r3, [r3, #2]
    2b26:	2280      	movs	r2, #128	; 0x80
    2b28:	4252      	negs	r2, r2
    2b2a:	4313      	orrs	r3, r2
    2b2c:	b2da      	uxtb	r2, r3
    2b2e:	2310      	movs	r3, #16
    2b30:	18fb      	adds	r3, r7, r3
    2b32:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->win_loc)
    2b34:	683b      	ldr	r3, [r7, #0]
    2b36:	681b      	ldr	r3, [r3, #0]
    2b38:	7c5b      	ldrb	r3, [r3, #17]
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	d008      	beq.n	2b50 <_mcp980x_set_setup+0x9c>
	{
		buffer_setup[2]|=0b01000000; 		
    2b3e:	2310      	movs	r3, #16
    2b40:	18fb      	adds	r3, r7, r3
    2b42:	789b      	ldrb	r3, [r3, #2]
    2b44:	2240      	movs	r2, #64	; 0x40
    2b46:	4313      	orrs	r3, r2
    2b48:	b2da      	uxtb	r2, r3
    2b4a:	2310      	movs	r3, #16
    2b4c:	18fb      	adds	r3, r7, r3
    2b4e:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->int_crl)
    2b50:	683b      	ldr	r3, [r7, #0]
    2b52:	681b      	ldr	r3, [r3, #0]
    2b54:	7c9b      	ldrb	r3, [r3, #18]
    2b56:	2b00      	cmp	r3, #0
    2b58:	d008      	beq.n	2b6c <_mcp980x_set_setup+0xb8>
	{
		buffer_setup[2]|=0b00100000; 	
    2b5a:	2310      	movs	r3, #16
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	789b      	ldrb	r3, [r3, #2]
    2b60:	2220      	movs	r2, #32
    2b62:	4313      	orrs	r3, r2
    2b64:	b2da      	uxtb	r2, r3
    2b66:	2310      	movs	r3, #16
    2b68:	18fb      	adds	r3, r7, r3
    2b6a:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_stat)
    2b6c:	683b      	ldr	r3, [r7, #0]
    2b6e:	681b      	ldr	r3, [r3, #0]
    2b70:	7cdb      	ldrb	r3, [r3, #19]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d008      	beq.n	2b88 <_mcp980x_set_setup+0xd4>
	{
		buffer_setup[2]|=0b00010000; 	
    2b76:	2310      	movs	r3, #16
    2b78:	18fb      	adds	r3, r7, r3
    2b7a:	789b      	ldrb	r3, [r3, #2]
    2b7c:	2210      	movs	r2, #16
    2b7e:	4313      	orrs	r3, r2
    2b80:	b2da      	uxtb	r2, r3
    2b82:	2310      	movs	r3, #16
    2b84:	18fb      	adds	r3, r7, r3
    2b86:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_cnt)
    2b88:	683b      	ldr	r3, [r7, #0]
    2b8a:	681b      	ldr	r3, [r3, #0]
    2b8c:	7ddb      	ldrb	r3, [r3, #23]
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d008      	beq.n	2ba4 <_mcp980x_set_setup+0xf0>
	{
		buffer_setup[2]|=0b00001000; 	
    2b92:	2310      	movs	r3, #16
    2b94:	18fb      	adds	r3, r7, r3
    2b96:	789b      	ldrb	r3, [r3, #2]
    2b98:	2208      	movs	r2, #8
    2b9a:	4313      	orrs	r3, r2
    2b9c:	b2da      	uxtb	r2, r3
    2b9e:	2310      	movs	r3, #16
    2ba0:	18fb      	adds	r3, r7, r3
    2ba2:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_sel)
    2ba4:	683b      	ldr	r3, [r7, #0]
    2ba6:	681b      	ldr	r3, [r3, #0]
    2ba8:	7d1b      	ldrb	r3, [r3, #20]
    2baa:	2b00      	cmp	r3, #0
    2bac:	d008      	beq.n	2bc0 <_mcp980x_set_setup+0x10c>
	{
		buffer_setup[2]|=0b00000100; 	
    2bae:	2310      	movs	r3, #16
    2bb0:	18fb      	adds	r3, r7, r3
    2bb2:	789b      	ldrb	r3, [r3, #2]
    2bb4:	2204      	movs	r2, #4
    2bb6:	4313      	orrs	r3, r2
    2bb8:	b2da      	uxtb	r2, r3
    2bba:	2310      	movs	r3, #16
    2bbc:	18fb      	adds	r3, r7, r3
    2bbe:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_pol)
    2bc0:	683b      	ldr	r3, [r7, #0]
    2bc2:	681b      	ldr	r3, [r3, #0]
    2bc4:	7d5b      	ldrb	r3, [r3, #21]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d008      	beq.n	2bdc <_mcp980x_set_setup+0x128>
	{
		buffer_setup[2]|=0b00000010; 	
    2bca:	2310      	movs	r3, #16
    2bcc:	18fb      	adds	r3, r7, r3
    2bce:	789b      	ldrb	r3, [r3, #2]
    2bd0:	2202      	movs	r2, #2
    2bd2:	4313      	orrs	r3, r2
    2bd4:	b2da      	uxtb	r2, r3
    2bd6:	2310      	movs	r3, #16
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	709a      	strb	r2, [r3, #2]
	}
	if (temp_set->mcp980x->alert_mod)
    2bdc:	683b      	ldr	r3, [r7, #0]
    2bde:	681b      	ldr	r3, [r3, #0]
    2be0:	7d9b      	ldrb	r3, [r3, #22]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d008      	beq.n	2bf8 <_mcp980x_set_setup+0x144>
	{
		buffer_setup[2]|=0b00000001; 	
    2be6:	2310      	movs	r3, #16
    2be8:	18fb      	adds	r3, r7, r3
    2bea:	789b      	ldrb	r3, [r3, #2]
    2bec:	2201      	movs	r2, #1
    2bee:	4313      	orrs	r3, r2
    2bf0:	b2da      	uxtb	r2, r3
    2bf2:	2310      	movs	r3, #16
    2bf4:	18fb      	adds	r3, r7, r3
    2bf6:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_setup, 3);
    2bf8:	697b      	ldr	r3, [r7, #20]
    2bfa:	3314      	adds	r3, #20
    2bfc:	2210      	movs	r2, #16
    2bfe:	18b9      	adds	r1, r7, r2
    2c00:	2203      	movs	r2, #3
    2c02:	0018      	movs	r0, r3
    2c04:	4b18      	ldr	r3, [pc, #96]	; (2c68 <_mcp980x_set_setup+0x1b4>)
    2c06:	4798      	blx	r3
	delay_ms(200); 
    2c08:	20c8      	movs	r0, #200	; 0xc8
    2c0a:	4b18      	ldr	r3, [pc, #96]	; (2c6c <_mcp980x_set_setup+0x1b8>)
    2c0c:	4798      	blx	r3
	io_write(&descr->io, buffer_setup, 1);
    2c0e:	697b      	ldr	r3, [r7, #20]
    2c10:	3314      	adds	r3, #20
    2c12:	2210      	movs	r2, #16
    2c14:	18b9      	adds	r1, r7, r2
    2c16:	2201      	movs	r2, #1
    2c18:	0018      	movs	r0, r3
    2c1a:	4b13      	ldr	r3, [pc, #76]	; (2c68 <_mcp980x_set_setup+0x1b4>)
    2c1c:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    2c1e:	697b      	ldr	r3, [r7, #20]
    2c20:	3314      	adds	r3, #20
    2c22:	220c      	movs	r2, #12
    2c24:	18b9      	adds	r1, r7, r2
    2c26:	2202      	movs	r2, #2
    2c28:	0018      	movs	r0, r3
    2c2a:	4b11      	ldr	r3, [pc, #68]	; (2c70 <_mcp980x_set_setup+0x1bc>)
    2c2c:	4798      	blx	r3
	
	if (buffer_setup[1]!=buffer_read[0] || buffer_setup[2]!=buffer_read[1])
    2c2e:	2310      	movs	r3, #16
    2c30:	18fb      	adds	r3, r7, r3
    2c32:	785a      	ldrb	r2, [r3, #1]
    2c34:	230c      	movs	r3, #12
    2c36:	18fb      	adds	r3, r7, r3
    2c38:	781b      	ldrb	r3, [r3, #0]
    2c3a:	429a      	cmp	r2, r3
    2c3c:	d107      	bne.n	2c4e <_mcp980x_set_setup+0x19a>
    2c3e:	2310      	movs	r3, #16
    2c40:	18fb      	adds	r3, r7, r3
    2c42:	789a      	ldrb	r2, [r3, #2]
    2c44:	230c      	movs	r3, #12
    2c46:	18fb      	adds	r3, r7, r3
    2c48:	785b      	ldrb	r3, [r3, #1]
    2c4a:	429a      	cmp	r2, r3
    2c4c:	d002      	beq.n	2c54 <_mcp980x_set_setup+0x1a0>
	{
		return MCP980X_ERROR;
    2c4e:	2301      	movs	r3, #1
    2c50:	425b      	negs	r3, r3
    2c52:	e000      	b.n	2c56 <_mcp980x_set_setup+0x1a2>
	}
	return MCP980X_ERROR_NONE; 
    2c54:	2300      	movs	r3, #0
}
    2c56:	0018      	movs	r0, r3
    2c58:	46bd      	mov	sp, r7
    2c5a:	b006      	add	sp, #24
    2c5c:	bd80      	pop	{r7, pc}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	000009b1 	.word	0x000009b1
    2c64:	000041ad 	.word	0x000041ad
    2c68:	000009f1 	.word	0x000009f1
    2c6c:	00000829 	.word	0x00000829
    2c70:	00000a45 	.word	0x00000a45

00002c74 <_mcp980x_set_tupper>:

int16_t _mcp980x_set_tupper(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    2c74:	b590      	push	{r4, r7, lr}
    2c76:	b089      	sub	sp, #36	; 0x24
    2c78:	af00      	add	r7, sp, #0
    2c7a:	6078      	str	r0, [r7, #4]
    2c7c:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	681b      	ldr	r3, [r3, #0]
    2c82:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_upper [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_upper,0,sizeof(buffer_temp_upper));
    2c84:	230c      	movs	r3, #12
    2c86:	18fb      	adds	r3, r7, r3
    2c88:	2203      	movs	r2, #3
    2c8a:	2100      	movs	r1, #0
    2c8c:	0018      	movs	r0, r3
    2c8e:	4b68      	ldr	r3, [pc, #416]	; (2e30 <_mcp980x_set_tupper+0x1bc>)
    2c90:	4798      	blx	r3
	
	buffer_temp_upper[0]=MCP980X_ALERT_TUPPER_REG; 
    2c92:	230c      	movs	r3, #12
    2c94:	18fb      	adds	r3, r7, r3
    2c96:	2202      	movs	r2, #2
    2c98:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->tupper;
    2c9a:	683b      	ldr	r3, [r7, #0]
    2c9c:	681b      	ldr	r3, [r3, #0]
    2c9e:	681a      	ldr	r2, [r3, #0]
    2ca0:	231e      	movs	r3, #30
    2ca2:	18fc      	adds	r4, r7, r3
    2ca4:	4b63      	ldr	r3, [pc, #396]	; (2e34 <_mcp980x_set_tupper+0x1c0>)
    2ca6:	1c10      	adds	r0, r2, #0
    2ca8:	4798      	blx	r3
    2caa:	0003      	movs	r3, r0
    2cac:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->tupper;
    2cae:	683b      	ldr	r3, [r7, #0]
    2cb0:	681b      	ldr	r3, [r3, #0]
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    2cb6:	231e      	movs	r3, #30
    2cb8:	18fb      	adds	r3, r7, r3
    2cba:	2200      	movs	r2, #0
    2cbc:	5e9b      	ldrsh	r3, [r3, r2]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	da17      	bge.n	2cf2 <_mcp980x_set_tupper+0x7e>
	{
		buffer_temp_upper[1]|=0b0010000;
    2cc2:	230c      	movs	r3, #12
    2cc4:	18fb      	adds	r3, r7, r3
    2cc6:	785b      	ldrb	r3, [r3, #1]
    2cc8:	2210      	movs	r2, #16
    2cca:	4313      	orrs	r3, r2
    2ccc:	b2da      	uxtb	r2, r3
    2cce:	230c      	movs	r3, #12
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    2cd4:	231e      	movs	r3, #30
    2cd6:	18fb      	adds	r3, r7, r3
    2cd8:	881b      	ldrh	r3, [r3, #0]
    2cda:	425b      	negs	r3, r3
    2cdc:	b29a      	uxth	r2, r3
    2cde:	231e      	movs	r3, #30
    2ce0:	18fb      	adds	r3, r7, r3
    2ce2:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    2ce4:	683b      	ldr	r3, [r7, #0]
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	681b      	ldr	r3, [r3, #0]
    2cea:	2280      	movs	r2, #128	; 0x80
    2cec:	0612      	lsls	r2, r2, #24
    2cee:	4053      	eors	r3, r2
    2cf0:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_upper[1] = temp_int >> 4;     //move to fit in register   
    2cf2:	231e      	movs	r3, #30
    2cf4:	18fb      	adds	r3, r7, r3
    2cf6:	2200      	movs	r2, #0
    2cf8:	5e9b      	ldrsh	r3, [r3, r2]
    2cfa:	111b      	asrs	r3, r3, #4
    2cfc:	b21b      	sxth	r3, r3
    2cfe:	b2da      	uxtb	r2, r3
    2d00:	230c      	movs	r3, #12
    2d02:	18fb      	adds	r3, r7, r3
    2d04:	705a      	strb	r2, [r3, #1]
	buffer_temp_upper[2] = temp_int << 4;       //move to fit in register   
    2d06:	231e      	movs	r3, #30
    2d08:	18fb      	adds	r3, r7, r3
    2d0a:	881b      	ldrh	r3, [r3, #0]
    2d0c:	b2db      	uxtb	r3, r3
    2d0e:	011b      	lsls	r3, r3, #4
    2d10:	b2da      	uxtb	r2, r3
    2d12:	230c      	movs	r3, #12
    2d14:	18fb      	adds	r3, r7, r3
    2d16:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    2d18:	4b46      	ldr	r3, [pc, #280]	; (2e34 <_mcp980x_set_tupper+0x1c0>)
    2d1a:	69b8      	ldr	r0, [r7, #24]
    2d1c:	4798      	blx	r3
    2d1e:	0002      	movs	r2, r0
    2d20:	4b45      	ldr	r3, [pc, #276]	; (2e38 <_mcp980x_set_tupper+0x1c4>)
    2d22:	0010      	movs	r0, r2
    2d24:	4798      	blx	r3
    2d26:	1c02      	adds	r2, r0, #0
    2d28:	4b44      	ldr	r3, [pc, #272]	; (2e3c <_mcp980x_set_tupper+0x1c8>)
    2d2a:	1c11      	adds	r1, r2, #0
    2d2c:	69b8      	ldr	r0, [r7, #24]
    2d2e:	4798      	blx	r3
    2d30:	1c03      	adds	r3, r0, #0
    2d32:	1c1a      	adds	r2, r3, #0
    2d34:	4b42      	ldr	r3, [pc, #264]	; (2e40 <_mcp980x_set_tupper+0x1cc>)
    2d36:	4943      	ldr	r1, [pc, #268]	; (2e44 <_mcp980x_set_tupper+0x1d0>)
    2d38:	1c10      	adds	r0, r2, #0
    2d3a:	4798      	blx	r3
    2d3c:	1c03      	adds	r3, r0, #0
    2d3e:	1c1a      	adds	r2, r3, #0
    2d40:	231e      	movs	r3, #30
    2d42:	18fc      	adds	r4, r7, r3
    2d44:	4b3b      	ldr	r3, [pc, #236]	; (2e34 <_mcp980x_set_tupper+0x1c0>)
    2d46:	1c10      	adds	r0, r2, #0
    2d48:	4798      	blx	r3
    2d4a:	0003      	movs	r3, r0
    2d4c:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    2d4e:	231e      	movs	r3, #30
    2d50:	18fb      	adds	r3, r7, r3
    2d52:	2200      	movs	r2, #0
    2d54:	5e9b      	ldrsh	r3, [r3, r2]
    2d56:	2b56      	cmp	r3, #86	; 0x56
    2d58:	dc0f      	bgt.n	2d7a <_mcp980x_set_tupper+0x106>
    2d5a:	231e      	movs	r3, #30
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	2200      	movs	r2, #0
    2d60:	5e9b      	ldrsh	r3, [r3, r2]
    2d62:	2b3e      	cmp	r3, #62	; 0x3e
    2d64:	dd09      	ble.n	2d7a <_mcp980x_set_tupper+0x106>
	{
		buffer_temp_upper[2]|=0b00001100;
    2d66:	230c      	movs	r3, #12
    2d68:	18fb      	adds	r3, r7, r3
    2d6a:	789b      	ldrb	r3, [r3, #2]
    2d6c:	220c      	movs	r2, #12
    2d6e:	4313      	orrs	r3, r2
    2d70:	b2da      	uxtb	r2, r3
    2d72:	230c      	movs	r3, #12
    2d74:	18fb      	adds	r3, r7, r3
    2d76:	709a      	strb	r2, [r3, #2]
    2d78:	e02a      	b.n	2dd0 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    2d7a:	231e      	movs	r3, #30
    2d7c:	18fb      	adds	r3, r7, r3
    2d7e:	2200      	movs	r2, #0
    2d80:	5e9b      	ldrsh	r3, [r3, r2]
    2d82:	2b3d      	cmp	r3, #61	; 0x3d
    2d84:	dc0f      	bgt.n	2da6 <_mcp980x_set_tupper+0x132>
    2d86:	231e      	movs	r3, #30
    2d88:	18fb      	adds	r3, r7, r3
    2d8a:	2200      	movs	r2, #0
    2d8c:	5e9b      	ldrsh	r3, [r3, r2]
    2d8e:	2b30      	cmp	r3, #48	; 0x30
    2d90:	dd09      	ble.n	2da6 <_mcp980x_set_tupper+0x132>
	{
		buffer_temp_upper[2]|=0b00001000;
    2d92:	230c      	movs	r3, #12
    2d94:	18fb      	adds	r3, r7, r3
    2d96:	789b      	ldrb	r3, [r3, #2]
    2d98:	2208      	movs	r2, #8
    2d9a:	4313      	orrs	r3, r2
    2d9c:	b2da      	uxtb	r2, r3
    2d9e:	230c      	movs	r3, #12
    2da0:	18fb      	adds	r3, r7, r3
    2da2:	709a      	strb	r2, [r3, #2]
    2da4:	e014      	b.n	2dd0 <_mcp980x_set_tupper+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    2da6:	231e      	movs	r3, #30
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	2200      	movs	r2, #0
    2dac:	5e9b      	ldrsh	r3, [r3, r2]
    2dae:	2b2f      	cmp	r3, #47	; 0x2f
    2db0:	dc0e      	bgt.n	2dd0 <_mcp980x_set_tupper+0x15c>
    2db2:	231e      	movs	r3, #30
    2db4:	18fb      	adds	r3, r7, r3
    2db6:	2200      	movs	r2, #0
    2db8:	5e9b      	ldrsh	r3, [r3, r2]
    2dba:	2b0d      	cmp	r3, #13
    2dbc:	dd08      	ble.n	2dd0 <_mcp980x_set_tupper+0x15c>
	{
		buffer_temp_upper[2]|=0b00000100;
    2dbe:	230c      	movs	r3, #12
    2dc0:	18fb      	adds	r3, r7, r3
    2dc2:	789b      	ldrb	r3, [r3, #2]
    2dc4:	2204      	movs	r2, #4
    2dc6:	4313      	orrs	r3, r2
    2dc8:	b2da      	uxtb	r2, r3
    2dca:	230c      	movs	r3, #12
    2dcc:	18fb      	adds	r3, r7, r3
    2dce:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_upper, 3);
    2dd0:	697b      	ldr	r3, [r7, #20]
    2dd2:	3314      	adds	r3, #20
    2dd4:	220c      	movs	r2, #12
    2dd6:	18b9      	adds	r1, r7, r2
    2dd8:	2203      	movs	r2, #3
    2dda:	0018      	movs	r0, r3
    2ddc:	4b1a      	ldr	r3, [pc, #104]	; (2e48 <_mcp980x_set_tupper+0x1d4>)
    2dde:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_upper, 1);
    2de0:	697b      	ldr	r3, [r7, #20]
    2de2:	3314      	adds	r3, #20
    2de4:	220c      	movs	r2, #12
    2de6:	18b9      	adds	r1, r7, r2
    2de8:	2201      	movs	r2, #1
    2dea:	0018      	movs	r0, r3
    2dec:	4b16      	ldr	r3, [pc, #88]	; (2e48 <_mcp980x_set_tupper+0x1d4>)
    2dee:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    2df0:	697b      	ldr	r3, [r7, #20]
    2df2:	3314      	adds	r3, #20
    2df4:	2210      	movs	r2, #16
    2df6:	18b9      	adds	r1, r7, r2
    2df8:	2202      	movs	r2, #2
    2dfa:	0018      	movs	r0, r3
    2dfc:	4b13      	ldr	r3, [pc, #76]	; (2e4c <_mcp980x_set_tupper+0x1d8>)
    2dfe:	4798      	blx	r3
	if (buffer_temp_upper[1]!=buffer_read[0] || buffer_temp_upper[2]!=buffer_read[1])
    2e00:	230c      	movs	r3, #12
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	785a      	ldrb	r2, [r3, #1]
    2e06:	2310      	movs	r3, #16
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	781b      	ldrb	r3, [r3, #0]
    2e0c:	429a      	cmp	r2, r3
    2e0e:	d107      	bne.n	2e20 <_mcp980x_set_tupper+0x1ac>
    2e10:	230c      	movs	r3, #12
    2e12:	18fb      	adds	r3, r7, r3
    2e14:	789a      	ldrb	r2, [r3, #2]
    2e16:	2310      	movs	r3, #16
    2e18:	18fb      	adds	r3, r7, r3
    2e1a:	785b      	ldrb	r3, [r3, #1]
    2e1c:	429a      	cmp	r2, r3
    2e1e:	d002      	beq.n	2e26 <_mcp980x_set_tupper+0x1b2>
	{
		return MCP980X_ERROR;
    2e20:	2301      	movs	r3, #1
    2e22:	425b      	negs	r3, r3
    2e24:	e000      	b.n	2e28 <_mcp980x_set_tupper+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    2e26:	2300      	movs	r3, #0
}
    2e28:	0018      	movs	r0, r3
    2e2a:	46bd      	mov	sp, r7
    2e2c:	b009      	add	sp, #36	; 0x24
    2e2e:	bd90      	pop	{r4, r7, pc}
    2e30:	000041ad 	.word	0x000041ad
    2e34:	000039b1 	.word	0x000039b1
    2e38:	000039f1 	.word	0x000039f1
    2e3c:	00003679 	.word	0x00003679
    2e40:	00003439 	.word	0x00003439
    2e44:	42c80000 	.word	0x42c80000
    2e48:	000009f1 	.word	0x000009f1
    2e4c:	00000a45 	.word	0x00000a45

00002e50 <_mcp980x_set_lower>:

int16_t _mcp980x_set_lower(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    2e50:	b590      	push	{r4, r7, lr}
    2e52:	b089      	sub	sp, #36	; 0x24
    2e54:	af00      	add	r7, sp, #0
    2e56:	6078      	str	r0, [r7, #4]
    2e58:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    2e5a:	687b      	ldr	r3, [r7, #4]
    2e5c:	681b      	ldr	r3, [r3, #0]
    2e5e:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_lower [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_lower,0,sizeof(buffer_temp_lower));
    2e60:	230c      	movs	r3, #12
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	2203      	movs	r2, #3
    2e66:	2100      	movs	r1, #0
    2e68:	0018      	movs	r0, r3
    2e6a:	4b68      	ldr	r3, [pc, #416]	; (300c <_mcp980x_set_lower+0x1bc>)
    2e6c:	4798      	blx	r3
	
	buffer_temp_lower[0]=MCP980X_ALERT_TLOWER_REG; 
    2e6e:	230c      	movs	r3, #12
    2e70:	18fb      	adds	r3, r7, r3
    2e72:	2203      	movs	r2, #3
    2e74:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->lower;
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	681b      	ldr	r3, [r3, #0]
    2e7a:	685a      	ldr	r2, [r3, #4]
    2e7c:	231e      	movs	r3, #30
    2e7e:	18fc      	adds	r4, r7, r3
    2e80:	4b63      	ldr	r3, [pc, #396]	; (3010 <_mcp980x_set_lower+0x1c0>)
    2e82:	1c10      	adds	r0, r2, #0
    2e84:	4798      	blx	r3
    2e86:	0003      	movs	r3, r0
    2e88:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->lower;
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	681b      	ldr	r3, [r3, #0]
    2e8e:	685b      	ldr	r3, [r3, #4]
    2e90:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    2e92:	231e      	movs	r3, #30
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	2200      	movs	r2, #0
    2e98:	5e9b      	ldrsh	r3, [r3, r2]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	da17      	bge.n	2ece <_mcp980x_set_lower+0x7e>
	{
		buffer_temp_lower[1]|=0b0010000;
    2e9e:	230c      	movs	r3, #12
    2ea0:	18fb      	adds	r3, r7, r3
    2ea2:	785b      	ldrb	r3, [r3, #1]
    2ea4:	2210      	movs	r2, #16
    2ea6:	4313      	orrs	r3, r2
    2ea8:	b2da      	uxtb	r2, r3
    2eaa:	230c      	movs	r3, #12
    2eac:	18fb      	adds	r3, r7, r3
    2eae:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    2eb0:	231e      	movs	r3, #30
    2eb2:	18fb      	adds	r3, r7, r3
    2eb4:	881b      	ldrh	r3, [r3, #0]
    2eb6:	425b      	negs	r3, r3
    2eb8:	b29a      	uxth	r2, r3
    2eba:	231e      	movs	r3, #30
    2ebc:	18fb      	adds	r3, r7, r3
    2ebe:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    2ec0:	683b      	ldr	r3, [r7, #0]
    2ec2:	681b      	ldr	r3, [r3, #0]
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	2280      	movs	r2, #128	; 0x80
    2ec8:	0612      	lsls	r2, r2, #24
    2eca:	4053      	eors	r3, r2
    2ecc:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_lower[1] = temp_int >> 4;     //move to fit in register   
    2ece:	231e      	movs	r3, #30
    2ed0:	18fb      	adds	r3, r7, r3
    2ed2:	2200      	movs	r2, #0
    2ed4:	5e9b      	ldrsh	r3, [r3, r2]
    2ed6:	111b      	asrs	r3, r3, #4
    2ed8:	b21b      	sxth	r3, r3
    2eda:	b2da      	uxtb	r2, r3
    2edc:	230c      	movs	r3, #12
    2ede:	18fb      	adds	r3, r7, r3
    2ee0:	705a      	strb	r2, [r3, #1]
	buffer_temp_lower[2] = temp_int << 4;       //move to fit in register   
    2ee2:	231e      	movs	r3, #30
    2ee4:	18fb      	adds	r3, r7, r3
    2ee6:	881b      	ldrh	r3, [r3, #0]
    2ee8:	b2db      	uxtb	r3, r3
    2eea:	011b      	lsls	r3, r3, #4
    2eec:	b2da      	uxtb	r2, r3
    2eee:	230c      	movs	r3, #12
    2ef0:	18fb      	adds	r3, r7, r3
    2ef2:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    2ef4:	4b46      	ldr	r3, [pc, #280]	; (3010 <_mcp980x_set_lower+0x1c0>)
    2ef6:	69b8      	ldr	r0, [r7, #24]
    2ef8:	4798      	blx	r3
    2efa:	0002      	movs	r2, r0
    2efc:	4b45      	ldr	r3, [pc, #276]	; (3014 <_mcp980x_set_lower+0x1c4>)
    2efe:	0010      	movs	r0, r2
    2f00:	4798      	blx	r3
    2f02:	1c02      	adds	r2, r0, #0
    2f04:	4b44      	ldr	r3, [pc, #272]	; (3018 <_mcp980x_set_lower+0x1c8>)
    2f06:	1c11      	adds	r1, r2, #0
    2f08:	69b8      	ldr	r0, [r7, #24]
    2f0a:	4798      	blx	r3
    2f0c:	1c03      	adds	r3, r0, #0
    2f0e:	1c1a      	adds	r2, r3, #0
    2f10:	4b42      	ldr	r3, [pc, #264]	; (301c <_mcp980x_set_lower+0x1cc>)
    2f12:	4943      	ldr	r1, [pc, #268]	; (3020 <_mcp980x_set_lower+0x1d0>)
    2f14:	1c10      	adds	r0, r2, #0
    2f16:	4798      	blx	r3
    2f18:	1c03      	adds	r3, r0, #0
    2f1a:	1c1a      	adds	r2, r3, #0
    2f1c:	231e      	movs	r3, #30
    2f1e:	18fc      	adds	r4, r7, r3
    2f20:	4b3b      	ldr	r3, [pc, #236]	; (3010 <_mcp980x_set_lower+0x1c0>)
    2f22:	1c10      	adds	r0, r2, #0
    2f24:	4798      	blx	r3
    2f26:	0003      	movs	r3, r0
    2f28:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    2f2a:	231e      	movs	r3, #30
    2f2c:	18fb      	adds	r3, r7, r3
    2f2e:	2200      	movs	r2, #0
    2f30:	5e9b      	ldrsh	r3, [r3, r2]
    2f32:	2b56      	cmp	r3, #86	; 0x56
    2f34:	dc0f      	bgt.n	2f56 <_mcp980x_set_lower+0x106>
    2f36:	231e      	movs	r3, #30
    2f38:	18fb      	adds	r3, r7, r3
    2f3a:	2200      	movs	r2, #0
    2f3c:	5e9b      	ldrsh	r3, [r3, r2]
    2f3e:	2b3e      	cmp	r3, #62	; 0x3e
    2f40:	dd09      	ble.n	2f56 <_mcp980x_set_lower+0x106>
	{
		buffer_temp_lower[2]|=0b00001100;
    2f42:	230c      	movs	r3, #12
    2f44:	18fb      	adds	r3, r7, r3
    2f46:	789b      	ldrb	r3, [r3, #2]
    2f48:	220c      	movs	r2, #12
    2f4a:	4313      	orrs	r3, r2
    2f4c:	b2da      	uxtb	r2, r3
    2f4e:	230c      	movs	r3, #12
    2f50:	18fb      	adds	r3, r7, r3
    2f52:	709a      	strb	r2, [r3, #2]
    2f54:	e02a      	b.n	2fac <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    2f56:	231e      	movs	r3, #30
    2f58:	18fb      	adds	r3, r7, r3
    2f5a:	2200      	movs	r2, #0
    2f5c:	5e9b      	ldrsh	r3, [r3, r2]
    2f5e:	2b3d      	cmp	r3, #61	; 0x3d
    2f60:	dc0f      	bgt.n	2f82 <_mcp980x_set_lower+0x132>
    2f62:	231e      	movs	r3, #30
    2f64:	18fb      	adds	r3, r7, r3
    2f66:	2200      	movs	r2, #0
    2f68:	5e9b      	ldrsh	r3, [r3, r2]
    2f6a:	2b30      	cmp	r3, #48	; 0x30
    2f6c:	dd09      	ble.n	2f82 <_mcp980x_set_lower+0x132>
	{
		buffer_temp_lower[2]|=0b00001000;
    2f6e:	230c      	movs	r3, #12
    2f70:	18fb      	adds	r3, r7, r3
    2f72:	789b      	ldrb	r3, [r3, #2]
    2f74:	2208      	movs	r2, #8
    2f76:	4313      	orrs	r3, r2
    2f78:	b2da      	uxtb	r2, r3
    2f7a:	230c      	movs	r3, #12
    2f7c:	18fb      	adds	r3, r7, r3
    2f7e:	709a      	strb	r2, [r3, #2]
    2f80:	e014      	b.n	2fac <_mcp980x_set_lower+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    2f82:	231e      	movs	r3, #30
    2f84:	18fb      	adds	r3, r7, r3
    2f86:	2200      	movs	r2, #0
    2f88:	5e9b      	ldrsh	r3, [r3, r2]
    2f8a:	2b2f      	cmp	r3, #47	; 0x2f
    2f8c:	dc0e      	bgt.n	2fac <_mcp980x_set_lower+0x15c>
    2f8e:	231e      	movs	r3, #30
    2f90:	18fb      	adds	r3, r7, r3
    2f92:	2200      	movs	r2, #0
    2f94:	5e9b      	ldrsh	r3, [r3, r2]
    2f96:	2b0d      	cmp	r3, #13
    2f98:	dd08      	ble.n	2fac <_mcp980x_set_lower+0x15c>
	{
		buffer_temp_lower[2]|=0b00000100;
    2f9a:	230c      	movs	r3, #12
    2f9c:	18fb      	adds	r3, r7, r3
    2f9e:	789b      	ldrb	r3, [r3, #2]
    2fa0:	2204      	movs	r2, #4
    2fa2:	4313      	orrs	r3, r2
    2fa4:	b2da      	uxtb	r2, r3
    2fa6:	230c      	movs	r3, #12
    2fa8:	18fb      	adds	r3, r7, r3
    2faa:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_lower, 3);
    2fac:	697b      	ldr	r3, [r7, #20]
    2fae:	3314      	adds	r3, #20
    2fb0:	220c      	movs	r2, #12
    2fb2:	18b9      	adds	r1, r7, r2
    2fb4:	2203      	movs	r2, #3
    2fb6:	0018      	movs	r0, r3
    2fb8:	4b1a      	ldr	r3, [pc, #104]	; (3024 <_mcp980x_set_lower+0x1d4>)
    2fba:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_lower, 1);
    2fbc:	697b      	ldr	r3, [r7, #20]
    2fbe:	3314      	adds	r3, #20
    2fc0:	220c      	movs	r2, #12
    2fc2:	18b9      	adds	r1, r7, r2
    2fc4:	2201      	movs	r2, #1
    2fc6:	0018      	movs	r0, r3
    2fc8:	4b16      	ldr	r3, [pc, #88]	; (3024 <_mcp980x_set_lower+0x1d4>)
    2fca:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    2fcc:	697b      	ldr	r3, [r7, #20]
    2fce:	3314      	adds	r3, #20
    2fd0:	2210      	movs	r2, #16
    2fd2:	18b9      	adds	r1, r7, r2
    2fd4:	2202      	movs	r2, #2
    2fd6:	0018      	movs	r0, r3
    2fd8:	4b13      	ldr	r3, [pc, #76]	; (3028 <_mcp980x_set_lower+0x1d8>)
    2fda:	4798      	blx	r3
	if (buffer_temp_lower[1]!=buffer_read[0] || buffer_temp_lower[2]!=buffer_read[1])
    2fdc:	230c      	movs	r3, #12
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	785a      	ldrb	r2, [r3, #1]
    2fe2:	2310      	movs	r3, #16
    2fe4:	18fb      	adds	r3, r7, r3
    2fe6:	781b      	ldrb	r3, [r3, #0]
    2fe8:	429a      	cmp	r2, r3
    2fea:	d107      	bne.n	2ffc <_mcp980x_set_lower+0x1ac>
    2fec:	230c      	movs	r3, #12
    2fee:	18fb      	adds	r3, r7, r3
    2ff0:	789a      	ldrb	r2, [r3, #2]
    2ff2:	2310      	movs	r3, #16
    2ff4:	18fb      	adds	r3, r7, r3
    2ff6:	785b      	ldrb	r3, [r3, #1]
    2ff8:	429a      	cmp	r2, r3
    2ffa:	d002      	beq.n	3002 <_mcp980x_set_lower+0x1b2>
	{
		return MCP980X_ERROR;
    2ffc:	2301      	movs	r3, #1
    2ffe:	425b      	negs	r3, r3
    3000:	e000      	b.n	3004 <_mcp980x_set_lower+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    3002:	2300      	movs	r3, #0
}
    3004:	0018      	movs	r0, r3
    3006:	46bd      	mov	sp, r7
    3008:	b009      	add	sp, #36	; 0x24
    300a:	bd90      	pop	{r4, r7, pc}
    300c:	000041ad 	.word	0x000041ad
    3010:	000039b1 	.word	0x000039b1
    3014:	000039f1 	.word	0x000039f1
    3018:	00003679 	.word	0x00003679
    301c:	00003439 	.word	0x00003439
    3020:	42c80000 	.word	0x42c80000
    3024:	000009f1 	.word	0x000009f1
    3028:	00000a45 	.word	0x00000a45

0000302c <_mcp980x_set_critical>:

int16_t _mcp980x_set_critical(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set)
{	
    302c:	b590      	push	{r4, r7, lr}
    302e:	b089      	sub	sp, #36	; 0x24
    3030:	af00      	add	r7, sp, #0
    3032:	6078      	str	r0, [r7, #4]
    3034:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    3036:	687b      	ldr	r3, [r7, #4]
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	617b      	str	r3, [r7, #20]
	uint8_t buffer_temp_critical [3];	

	int16_t temp_int;
	float   temp_float;  
	
	memset(buffer_temp_critical,0,sizeof(buffer_temp_critical));
    303c:	230c      	movs	r3, #12
    303e:	18fb      	adds	r3, r7, r3
    3040:	2203      	movs	r2, #3
    3042:	2100      	movs	r1, #0
    3044:	0018      	movs	r0, r3
    3046:	4b68      	ldr	r3, [pc, #416]	; (31e8 <_mcp980x_set_critical+0x1bc>)
    3048:	4798      	blx	r3
	
	buffer_temp_critical[0]=MCP980X_ALERT_TLOWER_REG; 
    304a:	230c      	movs	r3, #12
    304c:	18fb      	adds	r3, r7, r3
    304e:	2203      	movs	r2, #3
    3050:	701a      	strb	r2, [r3, #0]
	
	temp_int=(int16_t)temp_set->mcp980x->critical;
    3052:	683b      	ldr	r3, [r7, #0]
    3054:	681b      	ldr	r3, [r3, #0]
    3056:	689a      	ldr	r2, [r3, #8]
    3058:	231e      	movs	r3, #30
    305a:	18fc      	adds	r4, r7, r3
    305c:	4b63      	ldr	r3, [pc, #396]	; (31ec <_mcp980x_set_critical+0x1c0>)
    305e:	1c10      	adds	r0, r2, #0
    3060:	4798      	blx	r3
    3062:	0003      	movs	r3, r0
    3064:	8023      	strh	r3, [r4, #0]
	temp_float=temp_set->mcp980x->critical;
    3066:	683b      	ldr	r3, [r7, #0]
    3068:	681b      	ldr	r3, [r3, #0]
    306a:	689b      	ldr	r3, [r3, #8]
    306c:	61bb      	str	r3, [r7, #24]
	 
	if (temp_int>>15)  //if is negative write sing and convert to pozitive 
    306e:	231e      	movs	r3, #30
    3070:	18fb      	adds	r3, r7, r3
    3072:	2200      	movs	r2, #0
    3074:	5e9b      	ldrsh	r3, [r3, r2]
    3076:	2b00      	cmp	r3, #0
    3078:	da17      	bge.n	30aa <_mcp980x_set_critical+0x7e>
	{
		buffer_temp_critical[1]|=0b0010000;
    307a:	230c      	movs	r3, #12
    307c:	18fb      	adds	r3, r7, r3
    307e:	785b      	ldrb	r3, [r3, #1]
    3080:	2210      	movs	r2, #16
    3082:	4313      	orrs	r3, r2
    3084:	b2da      	uxtb	r2, r3
    3086:	230c      	movs	r3, #12
    3088:	18fb      	adds	r3, r7, r3
    308a:	705a      	strb	r2, [r3, #1]
		temp_int=temp_int*-1;
    308c:	231e      	movs	r3, #30
    308e:	18fb      	adds	r3, r7, r3
    3090:	881b      	ldrh	r3, [r3, #0]
    3092:	425b      	negs	r3, r3
    3094:	b29a      	uxth	r2, r3
    3096:	231e      	movs	r3, #30
    3098:	18fb      	adds	r3, r7, r3
    309a:	801a      	strh	r2, [r3, #0]
		temp_float=temp_set->mcp980x->tupper*-1;  
    309c:	683b      	ldr	r3, [r7, #0]
    309e:	681b      	ldr	r3, [r3, #0]
    30a0:	681b      	ldr	r3, [r3, #0]
    30a2:	2280      	movs	r2, #128	; 0x80
    30a4:	0612      	lsls	r2, r2, #24
    30a6:	4053      	eors	r3, r2
    30a8:	61bb      	str	r3, [r7, #24]
	}
	buffer_temp_critical[1] = temp_int >> 4;     //move to fit in register   
    30aa:	231e      	movs	r3, #30
    30ac:	18fb      	adds	r3, r7, r3
    30ae:	2200      	movs	r2, #0
    30b0:	5e9b      	ldrsh	r3, [r3, r2]
    30b2:	111b      	asrs	r3, r3, #4
    30b4:	b21b      	sxth	r3, r3
    30b6:	b2da      	uxtb	r2, r3
    30b8:	230c      	movs	r3, #12
    30ba:	18fb      	adds	r3, r7, r3
    30bc:	705a      	strb	r2, [r3, #1]
	buffer_temp_critical[2] = temp_int << 4;       //move to fit in register   
    30be:	231e      	movs	r3, #30
    30c0:	18fb      	adds	r3, r7, r3
    30c2:	881b      	ldrh	r3, [r3, #0]
    30c4:	b2db      	uxtb	r3, r3
    30c6:	011b      	lsls	r3, r3, #4
    30c8:	b2da      	uxtb	r2, r3
    30ca:	230c      	movs	r3, #12
    30cc:	18fb      	adds	r3, r7, r3
    30ce:	709a      	strb	r2, [r3, #2]
	
	temp_int = (temp_float-(int)temp_float)*100; //prepare data for resolution 
    30d0:	4b46      	ldr	r3, [pc, #280]	; (31ec <_mcp980x_set_critical+0x1c0>)
    30d2:	69b8      	ldr	r0, [r7, #24]
    30d4:	4798      	blx	r3
    30d6:	0002      	movs	r2, r0
    30d8:	4b45      	ldr	r3, [pc, #276]	; (31f0 <_mcp980x_set_critical+0x1c4>)
    30da:	0010      	movs	r0, r2
    30dc:	4798      	blx	r3
    30de:	1c02      	adds	r2, r0, #0
    30e0:	4b44      	ldr	r3, [pc, #272]	; (31f4 <_mcp980x_set_critical+0x1c8>)
    30e2:	1c11      	adds	r1, r2, #0
    30e4:	69b8      	ldr	r0, [r7, #24]
    30e6:	4798      	blx	r3
    30e8:	1c03      	adds	r3, r0, #0
    30ea:	1c1a      	adds	r2, r3, #0
    30ec:	4b42      	ldr	r3, [pc, #264]	; (31f8 <_mcp980x_set_critical+0x1cc>)
    30ee:	4943      	ldr	r1, [pc, #268]	; (31fc <_mcp980x_set_critical+0x1d0>)
    30f0:	1c10      	adds	r0, r2, #0
    30f2:	4798      	blx	r3
    30f4:	1c03      	adds	r3, r0, #0
    30f6:	1c1a      	adds	r2, r3, #0
    30f8:	231e      	movs	r3, #30
    30fa:	18fc      	adds	r4, r7, r3
    30fc:	4b3b      	ldr	r3, [pc, #236]	; (31ec <_mcp980x_set_critical+0x1c0>)
    30fe:	1c10      	adds	r0, r2, #0
    3100:	4798      	blx	r3
    3102:	0003      	movs	r3, r0
    3104:	8023      	strh	r3, [r4, #0]
	
	if (temp_int<87&&temp_int>62)
    3106:	231e      	movs	r3, #30
    3108:	18fb      	adds	r3, r7, r3
    310a:	2200      	movs	r2, #0
    310c:	5e9b      	ldrsh	r3, [r3, r2]
    310e:	2b56      	cmp	r3, #86	; 0x56
    3110:	dc0f      	bgt.n	3132 <_mcp980x_set_critical+0x106>
    3112:	231e      	movs	r3, #30
    3114:	18fb      	adds	r3, r7, r3
    3116:	2200      	movs	r2, #0
    3118:	5e9b      	ldrsh	r3, [r3, r2]
    311a:	2b3e      	cmp	r3, #62	; 0x3e
    311c:	dd09      	ble.n	3132 <_mcp980x_set_critical+0x106>
	{
		buffer_temp_critical[2]|=0b00001100;
    311e:	230c      	movs	r3, #12
    3120:	18fb      	adds	r3, r7, r3
    3122:	789b      	ldrb	r3, [r3, #2]
    3124:	220c      	movs	r2, #12
    3126:	4313      	orrs	r3, r2
    3128:	b2da      	uxtb	r2, r3
    312a:	230c      	movs	r3, #12
    312c:	18fb      	adds	r3, r7, r3
    312e:	709a      	strb	r2, [r3, #2]
    3130:	e02a      	b.n	3188 <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<62&&temp_int>48)
    3132:	231e      	movs	r3, #30
    3134:	18fb      	adds	r3, r7, r3
    3136:	2200      	movs	r2, #0
    3138:	5e9b      	ldrsh	r3, [r3, r2]
    313a:	2b3d      	cmp	r3, #61	; 0x3d
    313c:	dc0f      	bgt.n	315e <_mcp980x_set_critical+0x132>
    313e:	231e      	movs	r3, #30
    3140:	18fb      	adds	r3, r7, r3
    3142:	2200      	movs	r2, #0
    3144:	5e9b      	ldrsh	r3, [r3, r2]
    3146:	2b30      	cmp	r3, #48	; 0x30
    3148:	dd09      	ble.n	315e <_mcp980x_set_critical+0x132>
	{
		buffer_temp_critical[2]|=0b00001000;
    314a:	230c      	movs	r3, #12
    314c:	18fb      	adds	r3, r7, r3
    314e:	789b      	ldrb	r3, [r3, #2]
    3150:	2208      	movs	r2, #8
    3152:	4313      	orrs	r3, r2
    3154:	b2da      	uxtb	r2, r3
    3156:	230c      	movs	r3, #12
    3158:	18fb      	adds	r3, r7, r3
    315a:	709a      	strb	r2, [r3, #2]
    315c:	e014      	b.n	3188 <_mcp980x_set_critical+0x15c>
	}
	else if (temp_int<48&&temp_int>13)
    315e:	231e      	movs	r3, #30
    3160:	18fb      	adds	r3, r7, r3
    3162:	2200      	movs	r2, #0
    3164:	5e9b      	ldrsh	r3, [r3, r2]
    3166:	2b2f      	cmp	r3, #47	; 0x2f
    3168:	dc0e      	bgt.n	3188 <_mcp980x_set_critical+0x15c>
    316a:	231e      	movs	r3, #30
    316c:	18fb      	adds	r3, r7, r3
    316e:	2200      	movs	r2, #0
    3170:	5e9b      	ldrsh	r3, [r3, r2]
    3172:	2b0d      	cmp	r3, #13
    3174:	dd08      	ble.n	3188 <_mcp980x_set_critical+0x15c>
	{
		buffer_temp_critical[2]|=0b00000100;
    3176:	230c      	movs	r3, #12
    3178:	18fb      	adds	r3, r7, r3
    317a:	789b      	ldrb	r3, [r3, #2]
    317c:	2204      	movs	r2, #4
    317e:	4313      	orrs	r3, r2
    3180:	b2da      	uxtb	r2, r3
    3182:	230c      	movs	r3, #12
    3184:	18fb      	adds	r3, r7, r3
    3186:	709a      	strb	r2, [r3, #2]
	}
	
	io_write(&descr->io, buffer_temp_critical, 3);
    3188:	697b      	ldr	r3, [r7, #20]
    318a:	3314      	adds	r3, #20
    318c:	220c      	movs	r2, #12
    318e:	18b9      	adds	r1, r7, r2
    3190:	2203      	movs	r2, #3
    3192:	0018      	movs	r0, r3
    3194:	4b1a      	ldr	r3, [pc, #104]	; (3200 <_mcp980x_set_critical+0x1d4>)
    3196:	4798      	blx	r3
	
	io_write(&descr->io, buffer_temp_critical, 1);
    3198:	697b      	ldr	r3, [r7, #20]
    319a:	3314      	adds	r3, #20
    319c:	220c      	movs	r2, #12
    319e:	18b9      	adds	r1, r7, r2
    31a0:	2201      	movs	r2, #1
    31a2:	0018      	movs	r0, r3
    31a4:	4b16      	ldr	r3, [pc, #88]	; (3200 <_mcp980x_set_critical+0x1d4>)
    31a6:	4798      	blx	r3
	io_read(&descr->io, buffer_read, 2);
    31a8:	697b      	ldr	r3, [r7, #20]
    31aa:	3314      	adds	r3, #20
    31ac:	2210      	movs	r2, #16
    31ae:	18b9      	adds	r1, r7, r2
    31b0:	2202      	movs	r2, #2
    31b2:	0018      	movs	r0, r3
    31b4:	4b13      	ldr	r3, [pc, #76]	; (3204 <_mcp980x_set_critical+0x1d8>)
    31b6:	4798      	blx	r3
	if (buffer_temp_critical[1] != buffer_read[0] || buffer_temp_critical[2]!=buffer_read[1])
    31b8:	230c      	movs	r3, #12
    31ba:	18fb      	adds	r3, r7, r3
    31bc:	785a      	ldrb	r2, [r3, #1]
    31be:	2310      	movs	r3, #16
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	781b      	ldrb	r3, [r3, #0]
    31c4:	429a      	cmp	r2, r3
    31c6:	d107      	bne.n	31d8 <_mcp980x_set_critical+0x1ac>
    31c8:	230c      	movs	r3, #12
    31ca:	18fb      	adds	r3, r7, r3
    31cc:	789a      	ldrb	r2, [r3, #2]
    31ce:	2310      	movs	r3, #16
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	785b      	ldrb	r3, [r3, #1]
    31d4:	429a      	cmp	r2, r3
    31d6:	d002      	beq.n	31de <_mcp980x_set_critical+0x1b2>
	{
		return MCP980X_ERROR;
    31d8:	2301      	movs	r3, #1
    31da:	425b      	negs	r3, r3
    31dc:	e000      	b.n	31e0 <_mcp980x_set_critical+0x1b4>
	}
	return MCP980X_ERROR_NONE; 
    31de:	2300      	movs	r3, #0
}
    31e0:	0018      	movs	r0, r3
    31e2:	46bd      	mov	sp, r7
    31e4:	b009      	add	sp, #36	; 0x24
    31e6:	bd90      	pop	{r4, r7, pc}
    31e8:	000041ad 	.word	0x000041ad
    31ec:	000039b1 	.word	0x000039b1
    31f0:	000039f1 	.word	0x000039f1
    31f4:	00003679 	.word	0x00003679
    31f8:	00003439 	.word	0x00003439
    31fc:	42c80000 	.word	0x42c80000
    3200:	000009f1 	.word	0x000009f1
    3204:	00000a45 	.word	0x00000a45

00003208 <_mcp980x_set_resolution>:

int16_t _mcp980x_set_resolution(struct temperature_sensor *const me,struct tempereture_sensor_settings *temp_set){
    3208:	b580      	push	{r7, lr}
    320a:	b086      	sub	sp, #24
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
    3210:	6039      	str	r1, [r7, #0]
	struct i2c_m_sync_desc *descr = (struct i2c_m_sync_desc *)(me->io);
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	617b      	str	r3, [r7, #20]
	
	uint8_t buffer_read[2]; 
	uint8_t buffer_resolution[3]; 
	

	memset(buffer_resolution,0,sizeof(buffer_resolution));
    3218:	230c      	movs	r3, #12
    321a:	18fb      	adds	r3, r7, r3
    321c:	2203      	movs	r2, #3
    321e:	2100      	movs	r1, #0
    3220:	0018      	movs	r0, r3
    3222:	4b1e      	ldr	r3, [pc, #120]	; (329c <_mcp980x_set_resolution+0x94>)
    3224:	4798      	blx	r3

	buffer_resolution[0] = MCP980X_RESOLUTION_REG; 
    3226:	230c      	movs	r3, #12
    3228:	18fb      	adds	r3, r7, r3
    322a:	2208      	movs	r2, #8
    322c:	701a      	strb	r2, [r3, #0]
	buffer_resolution[2] = temp_set->mcp980x->mcp980x_resolution;
    322e:	683b      	ldr	r3, [r7, #0]
    3230:	681b      	ldr	r3, [r3, #0]
    3232:	7b9a      	ldrb	r2, [r3, #14]
    3234:	230c      	movs	r3, #12
    3236:	18fb      	adds	r3, r7, r3
    3238:	709a      	strb	r2, [r3, #2]
	 
	io_write(&descr->io, buffer_resolution, 3);
    323a:	697b      	ldr	r3, [r7, #20]
    323c:	3314      	adds	r3, #20
    323e:	220c      	movs	r2, #12
    3240:	18b9      	adds	r1, r7, r2
    3242:	2203      	movs	r2, #3
    3244:	0018      	movs	r0, r3
    3246:	4b16      	ldr	r3, [pc, #88]	; (32a0 <_mcp980x_set_resolution+0x98>)
    3248:	4798      	blx	r3
	
	io_write(&descr->io, buffer_resolution, 1);
    324a:	697b      	ldr	r3, [r7, #20]
    324c:	3314      	adds	r3, #20
    324e:	220c      	movs	r2, #12
    3250:	18b9      	adds	r1, r7, r2
    3252:	2201      	movs	r2, #1
    3254:	0018      	movs	r0, r3
    3256:	4b12      	ldr	r3, [pc, #72]	; (32a0 <_mcp980x_set_resolution+0x98>)
    3258:	4798      	blx	r3
	io_read(&descr->io, buffer_resolution, 2);
    325a:	697b      	ldr	r3, [r7, #20]
    325c:	3314      	adds	r3, #20
    325e:	220c      	movs	r2, #12
    3260:	18b9      	adds	r1, r7, r2
    3262:	2202      	movs	r2, #2
    3264:	0018      	movs	r0, r3
    3266:	4b0f      	ldr	r3, [pc, #60]	; (32a4 <_mcp980x_set_resolution+0x9c>)
    3268:	4798      	blx	r3
	if (buffer_resolution[1]!=buffer_read[0] || buffer_resolution[2]!=buffer_read[1])
    326a:	230c      	movs	r3, #12
    326c:	18fb      	adds	r3, r7, r3
    326e:	785a      	ldrb	r2, [r3, #1]
    3270:	2310      	movs	r3, #16
    3272:	18fb      	adds	r3, r7, r3
    3274:	781b      	ldrb	r3, [r3, #0]
    3276:	429a      	cmp	r2, r3
    3278:	d107      	bne.n	328a <_mcp980x_set_resolution+0x82>
    327a:	230c      	movs	r3, #12
    327c:	18fb      	adds	r3, r7, r3
    327e:	789a      	ldrb	r2, [r3, #2]
    3280:	2310      	movs	r3, #16
    3282:	18fb      	adds	r3, r7, r3
    3284:	785b      	ldrb	r3, [r3, #1]
    3286:	429a      	cmp	r2, r3
    3288:	d002      	beq.n	3290 <_mcp980x_set_resolution+0x88>
	{
		return MCP980X_ERROR;
    328a:	2301      	movs	r3, #1
    328c:	425b      	negs	r3, r3
    328e:	e000      	b.n	3292 <_mcp980x_set_resolution+0x8a>
	}
	return MCP980X_ERROR_NONE; 
    3290:	2300      	movs	r3, #0
    3292:	0018      	movs	r0, r3
    3294:	46bd      	mov	sp, r7
    3296:	b006      	add	sp, #24
    3298:	bd80      	pop	{r7, pc}
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	000041ad 	.word	0x000041ad
    32a0:	000009f1 	.word	0x000009f1
    32a4:	00000a45 	.word	0x00000a45

000032a8 <temperature_sensor_construct>:
/**
 * \brief Construct abstract temperature sensor
 */
struct temperature_sensor *temperature_sensor_construct(struct temperature_sensor *const me, void *const io,
                                                        const struct temperature_sensor_interface *const interface)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b084      	sub	sp, #16
    32ac:	af00      	add	r7, sp, #0
    32ae:	60f8      	str	r0, [r7, #12]
    32b0:	60b9      	str	r1, [r7, #8]
    32b2:	607a      	str	r2, [r7, #4]
	me->io        = io;
    32b4:	68fb      	ldr	r3, [r7, #12]
    32b6:	68ba      	ldr	r2, [r7, #8]
    32b8:	601a      	str	r2, [r3, #0]
	me->interface = interface;
    32ba:	68fb      	ldr	r3, [r7, #12]
    32bc:	687a      	ldr	r2, [r7, #4]
    32be:	605a      	str	r2, [r3, #4]

	return me;
    32c0:	68fb      	ldr	r3, [r7, #12]
}
    32c2:	0018      	movs	r0, r3
    32c4:	46bd      	mov	sp, r7
    32c6:	b004      	add	sp, #16
    32c8:	bd80      	pop	{r7, pc}

000032ca <temperature_sensor_read>:

/**
 * \brief Read temperature from the given sensor
 */
float temperature_sensor_read(const struct temperature_sensor *const me)
{
    32ca:	b580      	push	{r7, lr}
    32cc:	b082      	sub	sp, #8
    32ce:	af00      	add	r7, sp, #0
    32d0:	6078      	str	r0, [r7, #4]
	return me->interface->read(me);
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	685b      	ldr	r3, [r3, #4]
    32d6:	681b      	ldr	r3, [r3, #0]
    32d8:	687a      	ldr	r2, [r7, #4]
    32da:	0010      	movs	r0, r2
    32dc:	4798      	blx	r3
    32de:	1c03      	adds	r3, r0, #0
}
    32e0:	1c18      	adds	r0, r3, #0
    32e2:	46bd      	mov	sp, r7
    32e4:	b002      	add	sp, #8
    32e6:	bd80      	pop	{r7, pc}

000032e8 <temperature_sensors_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void temperature_sensors_init(void)
{
    32e8:	b580      	push	{r7, lr}
    32ea:	af00      	add	r7, sp, #0
	i2c_m_sync_enable(&I2C_0);
    32ec:	4b07      	ldr	r3, [pc, #28]	; (330c <temperature_sensors_init+0x24>)
    32ee:	0018      	movs	r0, r3
    32f0:	4b07      	ldr	r3, [pc, #28]	; (3310 <temperature_sensors_init+0x28>)
    32f2:	4798      	blx	r3
	TEMPERATURE_SENSOR = mcp980X_construct(&TEMPERATURE_SENSOR_descr.parent, &I2C_0, 0);
    32f4:	4905      	ldr	r1, [pc, #20]	; (330c <temperature_sensors_init+0x24>)
    32f6:	4b07      	ldr	r3, [pc, #28]	; (3314 <temperature_sensors_init+0x2c>)
    32f8:	2200      	movs	r2, #0
    32fa:	0018      	movs	r0, r3
    32fc:	4b06      	ldr	r3, [pc, #24]	; (3318 <temperature_sensors_init+0x30>)
    32fe:	4798      	blx	r3
    3300:	0002      	movs	r2, r0
    3302:	4b06      	ldr	r3, [pc, #24]	; (331c <temperature_sensors_init+0x34>)
    3304:	601a      	str	r2, [r3, #0]
}
    3306:	46c0      	nop			; (mov r8, r8)
    3308:	46bd      	mov	sp, r7
    330a:	bd80      	pop	{r7, pc}
    330c:	20000058 	.word	0x20000058
    3310:	00000991 	.word	0x00000991
    3314:	20000050 	.word	0x20000050
    3318:	00002905 	.word	0x00002905
    331c:	20000094 	.word	0x20000094

00003320 <__udivsi3>:
    3320:	2200      	movs	r2, #0
    3322:	0843      	lsrs	r3, r0, #1
    3324:	428b      	cmp	r3, r1
    3326:	d374      	bcc.n	3412 <__udivsi3+0xf2>
    3328:	0903      	lsrs	r3, r0, #4
    332a:	428b      	cmp	r3, r1
    332c:	d35f      	bcc.n	33ee <__udivsi3+0xce>
    332e:	0a03      	lsrs	r3, r0, #8
    3330:	428b      	cmp	r3, r1
    3332:	d344      	bcc.n	33be <__udivsi3+0x9e>
    3334:	0b03      	lsrs	r3, r0, #12
    3336:	428b      	cmp	r3, r1
    3338:	d328      	bcc.n	338c <__udivsi3+0x6c>
    333a:	0c03      	lsrs	r3, r0, #16
    333c:	428b      	cmp	r3, r1
    333e:	d30d      	bcc.n	335c <__udivsi3+0x3c>
    3340:	22ff      	movs	r2, #255	; 0xff
    3342:	0209      	lsls	r1, r1, #8
    3344:	ba12      	rev	r2, r2
    3346:	0c03      	lsrs	r3, r0, #16
    3348:	428b      	cmp	r3, r1
    334a:	d302      	bcc.n	3352 <__udivsi3+0x32>
    334c:	1212      	asrs	r2, r2, #8
    334e:	0209      	lsls	r1, r1, #8
    3350:	d065      	beq.n	341e <__udivsi3+0xfe>
    3352:	0b03      	lsrs	r3, r0, #12
    3354:	428b      	cmp	r3, r1
    3356:	d319      	bcc.n	338c <__udivsi3+0x6c>
    3358:	e000      	b.n	335c <__udivsi3+0x3c>
    335a:	0a09      	lsrs	r1, r1, #8
    335c:	0bc3      	lsrs	r3, r0, #15
    335e:	428b      	cmp	r3, r1
    3360:	d301      	bcc.n	3366 <__udivsi3+0x46>
    3362:	03cb      	lsls	r3, r1, #15
    3364:	1ac0      	subs	r0, r0, r3
    3366:	4152      	adcs	r2, r2
    3368:	0b83      	lsrs	r3, r0, #14
    336a:	428b      	cmp	r3, r1
    336c:	d301      	bcc.n	3372 <__udivsi3+0x52>
    336e:	038b      	lsls	r3, r1, #14
    3370:	1ac0      	subs	r0, r0, r3
    3372:	4152      	adcs	r2, r2
    3374:	0b43      	lsrs	r3, r0, #13
    3376:	428b      	cmp	r3, r1
    3378:	d301      	bcc.n	337e <__udivsi3+0x5e>
    337a:	034b      	lsls	r3, r1, #13
    337c:	1ac0      	subs	r0, r0, r3
    337e:	4152      	adcs	r2, r2
    3380:	0b03      	lsrs	r3, r0, #12
    3382:	428b      	cmp	r3, r1
    3384:	d301      	bcc.n	338a <__udivsi3+0x6a>
    3386:	030b      	lsls	r3, r1, #12
    3388:	1ac0      	subs	r0, r0, r3
    338a:	4152      	adcs	r2, r2
    338c:	0ac3      	lsrs	r3, r0, #11
    338e:	428b      	cmp	r3, r1
    3390:	d301      	bcc.n	3396 <__udivsi3+0x76>
    3392:	02cb      	lsls	r3, r1, #11
    3394:	1ac0      	subs	r0, r0, r3
    3396:	4152      	adcs	r2, r2
    3398:	0a83      	lsrs	r3, r0, #10
    339a:	428b      	cmp	r3, r1
    339c:	d301      	bcc.n	33a2 <__udivsi3+0x82>
    339e:	028b      	lsls	r3, r1, #10
    33a0:	1ac0      	subs	r0, r0, r3
    33a2:	4152      	adcs	r2, r2
    33a4:	0a43      	lsrs	r3, r0, #9
    33a6:	428b      	cmp	r3, r1
    33a8:	d301      	bcc.n	33ae <__udivsi3+0x8e>
    33aa:	024b      	lsls	r3, r1, #9
    33ac:	1ac0      	subs	r0, r0, r3
    33ae:	4152      	adcs	r2, r2
    33b0:	0a03      	lsrs	r3, r0, #8
    33b2:	428b      	cmp	r3, r1
    33b4:	d301      	bcc.n	33ba <__udivsi3+0x9a>
    33b6:	020b      	lsls	r3, r1, #8
    33b8:	1ac0      	subs	r0, r0, r3
    33ba:	4152      	adcs	r2, r2
    33bc:	d2cd      	bcs.n	335a <__udivsi3+0x3a>
    33be:	09c3      	lsrs	r3, r0, #7
    33c0:	428b      	cmp	r3, r1
    33c2:	d301      	bcc.n	33c8 <__udivsi3+0xa8>
    33c4:	01cb      	lsls	r3, r1, #7
    33c6:	1ac0      	subs	r0, r0, r3
    33c8:	4152      	adcs	r2, r2
    33ca:	0983      	lsrs	r3, r0, #6
    33cc:	428b      	cmp	r3, r1
    33ce:	d301      	bcc.n	33d4 <__udivsi3+0xb4>
    33d0:	018b      	lsls	r3, r1, #6
    33d2:	1ac0      	subs	r0, r0, r3
    33d4:	4152      	adcs	r2, r2
    33d6:	0943      	lsrs	r3, r0, #5
    33d8:	428b      	cmp	r3, r1
    33da:	d301      	bcc.n	33e0 <__udivsi3+0xc0>
    33dc:	014b      	lsls	r3, r1, #5
    33de:	1ac0      	subs	r0, r0, r3
    33e0:	4152      	adcs	r2, r2
    33e2:	0903      	lsrs	r3, r0, #4
    33e4:	428b      	cmp	r3, r1
    33e6:	d301      	bcc.n	33ec <__udivsi3+0xcc>
    33e8:	010b      	lsls	r3, r1, #4
    33ea:	1ac0      	subs	r0, r0, r3
    33ec:	4152      	adcs	r2, r2
    33ee:	08c3      	lsrs	r3, r0, #3
    33f0:	428b      	cmp	r3, r1
    33f2:	d301      	bcc.n	33f8 <__udivsi3+0xd8>
    33f4:	00cb      	lsls	r3, r1, #3
    33f6:	1ac0      	subs	r0, r0, r3
    33f8:	4152      	adcs	r2, r2
    33fa:	0883      	lsrs	r3, r0, #2
    33fc:	428b      	cmp	r3, r1
    33fe:	d301      	bcc.n	3404 <__udivsi3+0xe4>
    3400:	008b      	lsls	r3, r1, #2
    3402:	1ac0      	subs	r0, r0, r3
    3404:	4152      	adcs	r2, r2
    3406:	0843      	lsrs	r3, r0, #1
    3408:	428b      	cmp	r3, r1
    340a:	d301      	bcc.n	3410 <__udivsi3+0xf0>
    340c:	004b      	lsls	r3, r1, #1
    340e:	1ac0      	subs	r0, r0, r3
    3410:	4152      	adcs	r2, r2
    3412:	1a41      	subs	r1, r0, r1
    3414:	d200      	bcs.n	3418 <__udivsi3+0xf8>
    3416:	4601      	mov	r1, r0
    3418:	4152      	adcs	r2, r2
    341a:	4610      	mov	r0, r2
    341c:	4770      	bx	lr
    341e:	e7ff      	b.n	3420 <__udivsi3+0x100>
    3420:	b501      	push	{r0, lr}
    3422:	2000      	movs	r0, #0
    3424:	f000 f806 	bl	3434 <__aeabi_idiv0>
    3428:	bd02      	pop	{r1, pc}
    342a:	46c0      	nop			; (mov r8, r8)

0000342c <__aeabi_uidivmod>:
    342c:	2900      	cmp	r1, #0
    342e:	d0f7      	beq.n	3420 <__udivsi3+0x100>
    3430:	e776      	b.n	3320 <__udivsi3>
    3432:	4770      	bx	lr

00003434 <__aeabi_idiv0>:
    3434:	4770      	bx	lr
    3436:	46c0      	nop			; (mov r8, r8)

00003438 <__aeabi_fmul>:
    3438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    343a:	4657      	mov	r7, sl
    343c:	464e      	mov	r6, r9
    343e:	4645      	mov	r5, r8
    3440:	46de      	mov	lr, fp
    3442:	b5e0      	push	{r5, r6, r7, lr}
    3444:	0247      	lsls	r7, r0, #9
    3446:	0046      	lsls	r6, r0, #1
    3448:	4688      	mov	r8, r1
    344a:	0a7f      	lsrs	r7, r7, #9
    344c:	0e36      	lsrs	r6, r6, #24
    344e:	0fc4      	lsrs	r4, r0, #31
    3450:	2e00      	cmp	r6, #0
    3452:	d047      	beq.n	34e4 <__aeabi_fmul+0xac>
    3454:	2eff      	cmp	r6, #255	; 0xff
    3456:	d024      	beq.n	34a2 <__aeabi_fmul+0x6a>
    3458:	00fb      	lsls	r3, r7, #3
    345a:	2780      	movs	r7, #128	; 0x80
    345c:	04ff      	lsls	r7, r7, #19
    345e:	431f      	orrs	r7, r3
    3460:	2300      	movs	r3, #0
    3462:	4699      	mov	r9, r3
    3464:	469a      	mov	sl, r3
    3466:	3e7f      	subs	r6, #127	; 0x7f
    3468:	4643      	mov	r3, r8
    346a:	025d      	lsls	r5, r3, #9
    346c:	0058      	lsls	r0, r3, #1
    346e:	0fdb      	lsrs	r3, r3, #31
    3470:	0a6d      	lsrs	r5, r5, #9
    3472:	0e00      	lsrs	r0, r0, #24
    3474:	4698      	mov	r8, r3
    3476:	d043      	beq.n	3500 <__aeabi_fmul+0xc8>
    3478:	28ff      	cmp	r0, #255	; 0xff
    347a:	d03b      	beq.n	34f4 <__aeabi_fmul+0xbc>
    347c:	00eb      	lsls	r3, r5, #3
    347e:	2580      	movs	r5, #128	; 0x80
    3480:	2200      	movs	r2, #0
    3482:	04ed      	lsls	r5, r5, #19
    3484:	431d      	orrs	r5, r3
    3486:	387f      	subs	r0, #127	; 0x7f
    3488:	1836      	adds	r6, r6, r0
    348a:	1c73      	adds	r3, r6, #1
    348c:	4641      	mov	r1, r8
    348e:	469b      	mov	fp, r3
    3490:	464b      	mov	r3, r9
    3492:	4061      	eors	r1, r4
    3494:	4313      	orrs	r3, r2
    3496:	2b0f      	cmp	r3, #15
    3498:	d864      	bhi.n	3564 <__aeabi_fmul+0x12c>
    349a:	4875      	ldr	r0, [pc, #468]	; (3670 <__aeabi_fmul+0x238>)
    349c:	009b      	lsls	r3, r3, #2
    349e:	58c3      	ldr	r3, [r0, r3]
    34a0:	469f      	mov	pc, r3
    34a2:	2f00      	cmp	r7, #0
    34a4:	d142      	bne.n	352c <__aeabi_fmul+0xf4>
    34a6:	2308      	movs	r3, #8
    34a8:	4699      	mov	r9, r3
    34aa:	3b06      	subs	r3, #6
    34ac:	26ff      	movs	r6, #255	; 0xff
    34ae:	469a      	mov	sl, r3
    34b0:	e7da      	b.n	3468 <__aeabi_fmul+0x30>
    34b2:	4641      	mov	r1, r8
    34b4:	2a02      	cmp	r2, #2
    34b6:	d028      	beq.n	350a <__aeabi_fmul+0xd2>
    34b8:	2a03      	cmp	r2, #3
    34ba:	d100      	bne.n	34be <__aeabi_fmul+0x86>
    34bc:	e0ce      	b.n	365c <__aeabi_fmul+0x224>
    34be:	2a01      	cmp	r2, #1
    34c0:	d000      	beq.n	34c4 <__aeabi_fmul+0x8c>
    34c2:	e0ac      	b.n	361e <__aeabi_fmul+0x1e6>
    34c4:	4011      	ands	r1, r2
    34c6:	2000      	movs	r0, #0
    34c8:	2200      	movs	r2, #0
    34ca:	b2cc      	uxtb	r4, r1
    34cc:	0240      	lsls	r0, r0, #9
    34ce:	05d2      	lsls	r2, r2, #23
    34d0:	0a40      	lsrs	r0, r0, #9
    34d2:	07e4      	lsls	r4, r4, #31
    34d4:	4310      	orrs	r0, r2
    34d6:	4320      	orrs	r0, r4
    34d8:	bc3c      	pop	{r2, r3, r4, r5}
    34da:	4690      	mov	r8, r2
    34dc:	4699      	mov	r9, r3
    34de:	46a2      	mov	sl, r4
    34e0:	46ab      	mov	fp, r5
    34e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34e4:	2f00      	cmp	r7, #0
    34e6:	d115      	bne.n	3514 <__aeabi_fmul+0xdc>
    34e8:	2304      	movs	r3, #4
    34ea:	4699      	mov	r9, r3
    34ec:	3b03      	subs	r3, #3
    34ee:	2600      	movs	r6, #0
    34f0:	469a      	mov	sl, r3
    34f2:	e7b9      	b.n	3468 <__aeabi_fmul+0x30>
    34f4:	20ff      	movs	r0, #255	; 0xff
    34f6:	2202      	movs	r2, #2
    34f8:	2d00      	cmp	r5, #0
    34fa:	d0c5      	beq.n	3488 <__aeabi_fmul+0x50>
    34fc:	2203      	movs	r2, #3
    34fe:	e7c3      	b.n	3488 <__aeabi_fmul+0x50>
    3500:	2d00      	cmp	r5, #0
    3502:	d119      	bne.n	3538 <__aeabi_fmul+0x100>
    3504:	2000      	movs	r0, #0
    3506:	2201      	movs	r2, #1
    3508:	e7be      	b.n	3488 <__aeabi_fmul+0x50>
    350a:	2401      	movs	r4, #1
    350c:	22ff      	movs	r2, #255	; 0xff
    350e:	400c      	ands	r4, r1
    3510:	2000      	movs	r0, #0
    3512:	e7db      	b.n	34cc <__aeabi_fmul+0x94>
    3514:	0038      	movs	r0, r7
    3516:	f000 fe07 	bl	4128 <__clzsi2>
    351a:	2676      	movs	r6, #118	; 0x76
    351c:	1f43      	subs	r3, r0, #5
    351e:	409f      	lsls	r7, r3
    3520:	2300      	movs	r3, #0
    3522:	4276      	negs	r6, r6
    3524:	1a36      	subs	r6, r6, r0
    3526:	4699      	mov	r9, r3
    3528:	469a      	mov	sl, r3
    352a:	e79d      	b.n	3468 <__aeabi_fmul+0x30>
    352c:	230c      	movs	r3, #12
    352e:	4699      	mov	r9, r3
    3530:	3b09      	subs	r3, #9
    3532:	26ff      	movs	r6, #255	; 0xff
    3534:	469a      	mov	sl, r3
    3536:	e797      	b.n	3468 <__aeabi_fmul+0x30>
    3538:	0028      	movs	r0, r5
    353a:	f000 fdf5 	bl	4128 <__clzsi2>
    353e:	1f43      	subs	r3, r0, #5
    3540:	409d      	lsls	r5, r3
    3542:	2376      	movs	r3, #118	; 0x76
    3544:	425b      	negs	r3, r3
    3546:	1a18      	subs	r0, r3, r0
    3548:	2200      	movs	r2, #0
    354a:	e79d      	b.n	3488 <__aeabi_fmul+0x50>
    354c:	2080      	movs	r0, #128	; 0x80
    354e:	2400      	movs	r4, #0
    3550:	03c0      	lsls	r0, r0, #15
    3552:	22ff      	movs	r2, #255	; 0xff
    3554:	e7ba      	b.n	34cc <__aeabi_fmul+0x94>
    3556:	003d      	movs	r5, r7
    3558:	4652      	mov	r2, sl
    355a:	e7ab      	b.n	34b4 <__aeabi_fmul+0x7c>
    355c:	003d      	movs	r5, r7
    355e:	0021      	movs	r1, r4
    3560:	4652      	mov	r2, sl
    3562:	e7a7      	b.n	34b4 <__aeabi_fmul+0x7c>
    3564:	0c3b      	lsrs	r3, r7, #16
    3566:	469c      	mov	ip, r3
    3568:	042a      	lsls	r2, r5, #16
    356a:	0c12      	lsrs	r2, r2, #16
    356c:	0c2b      	lsrs	r3, r5, #16
    356e:	0014      	movs	r4, r2
    3570:	4660      	mov	r0, ip
    3572:	4665      	mov	r5, ip
    3574:	043f      	lsls	r7, r7, #16
    3576:	0c3f      	lsrs	r7, r7, #16
    3578:	437c      	muls	r4, r7
    357a:	4342      	muls	r2, r0
    357c:	435d      	muls	r5, r3
    357e:	437b      	muls	r3, r7
    3580:	0c27      	lsrs	r7, r4, #16
    3582:	189b      	adds	r3, r3, r2
    3584:	18ff      	adds	r7, r7, r3
    3586:	42ba      	cmp	r2, r7
    3588:	d903      	bls.n	3592 <__aeabi_fmul+0x15a>
    358a:	2380      	movs	r3, #128	; 0x80
    358c:	025b      	lsls	r3, r3, #9
    358e:	469c      	mov	ip, r3
    3590:	4465      	add	r5, ip
    3592:	0424      	lsls	r4, r4, #16
    3594:	043a      	lsls	r2, r7, #16
    3596:	0c24      	lsrs	r4, r4, #16
    3598:	1912      	adds	r2, r2, r4
    359a:	0193      	lsls	r3, r2, #6
    359c:	1e5c      	subs	r4, r3, #1
    359e:	41a3      	sbcs	r3, r4
    35a0:	0c3f      	lsrs	r7, r7, #16
    35a2:	0e92      	lsrs	r2, r2, #26
    35a4:	197d      	adds	r5, r7, r5
    35a6:	431a      	orrs	r2, r3
    35a8:	01ad      	lsls	r5, r5, #6
    35aa:	4315      	orrs	r5, r2
    35ac:	012b      	lsls	r3, r5, #4
    35ae:	d504      	bpl.n	35ba <__aeabi_fmul+0x182>
    35b0:	2301      	movs	r3, #1
    35b2:	465e      	mov	r6, fp
    35b4:	086a      	lsrs	r2, r5, #1
    35b6:	401d      	ands	r5, r3
    35b8:	4315      	orrs	r5, r2
    35ba:	0032      	movs	r2, r6
    35bc:	327f      	adds	r2, #127	; 0x7f
    35be:	2a00      	cmp	r2, #0
    35c0:	dd25      	ble.n	360e <__aeabi_fmul+0x1d6>
    35c2:	076b      	lsls	r3, r5, #29
    35c4:	d004      	beq.n	35d0 <__aeabi_fmul+0x198>
    35c6:	230f      	movs	r3, #15
    35c8:	402b      	ands	r3, r5
    35ca:	2b04      	cmp	r3, #4
    35cc:	d000      	beq.n	35d0 <__aeabi_fmul+0x198>
    35ce:	3504      	adds	r5, #4
    35d0:	012b      	lsls	r3, r5, #4
    35d2:	d503      	bpl.n	35dc <__aeabi_fmul+0x1a4>
    35d4:	0032      	movs	r2, r6
    35d6:	4b27      	ldr	r3, [pc, #156]	; (3674 <__aeabi_fmul+0x23c>)
    35d8:	3280      	adds	r2, #128	; 0x80
    35da:	401d      	ands	r5, r3
    35dc:	2afe      	cmp	r2, #254	; 0xfe
    35de:	dc94      	bgt.n	350a <__aeabi_fmul+0xd2>
    35e0:	2401      	movs	r4, #1
    35e2:	01a8      	lsls	r0, r5, #6
    35e4:	0a40      	lsrs	r0, r0, #9
    35e6:	b2d2      	uxtb	r2, r2
    35e8:	400c      	ands	r4, r1
    35ea:	e76f      	b.n	34cc <__aeabi_fmul+0x94>
    35ec:	2080      	movs	r0, #128	; 0x80
    35ee:	03c0      	lsls	r0, r0, #15
    35f0:	4207      	tst	r7, r0
    35f2:	d007      	beq.n	3604 <__aeabi_fmul+0x1cc>
    35f4:	4205      	tst	r5, r0
    35f6:	d105      	bne.n	3604 <__aeabi_fmul+0x1cc>
    35f8:	4328      	orrs	r0, r5
    35fa:	0240      	lsls	r0, r0, #9
    35fc:	0a40      	lsrs	r0, r0, #9
    35fe:	4644      	mov	r4, r8
    3600:	22ff      	movs	r2, #255	; 0xff
    3602:	e763      	b.n	34cc <__aeabi_fmul+0x94>
    3604:	4338      	orrs	r0, r7
    3606:	0240      	lsls	r0, r0, #9
    3608:	0a40      	lsrs	r0, r0, #9
    360a:	22ff      	movs	r2, #255	; 0xff
    360c:	e75e      	b.n	34cc <__aeabi_fmul+0x94>
    360e:	2401      	movs	r4, #1
    3610:	1aa3      	subs	r3, r4, r2
    3612:	2b1b      	cmp	r3, #27
    3614:	dd05      	ble.n	3622 <__aeabi_fmul+0x1ea>
    3616:	400c      	ands	r4, r1
    3618:	2200      	movs	r2, #0
    361a:	2000      	movs	r0, #0
    361c:	e756      	b.n	34cc <__aeabi_fmul+0x94>
    361e:	465e      	mov	r6, fp
    3620:	e7cb      	b.n	35ba <__aeabi_fmul+0x182>
    3622:	002a      	movs	r2, r5
    3624:	2020      	movs	r0, #32
    3626:	40da      	lsrs	r2, r3
    3628:	1ac3      	subs	r3, r0, r3
    362a:	409d      	lsls	r5, r3
    362c:	002b      	movs	r3, r5
    362e:	1e5d      	subs	r5, r3, #1
    3630:	41ab      	sbcs	r3, r5
    3632:	4313      	orrs	r3, r2
    3634:	075a      	lsls	r2, r3, #29
    3636:	d004      	beq.n	3642 <__aeabi_fmul+0x20a>
    3638:	220f      	movs	r2, #15
    363a:	401a      	ands	r2, r3
    363c:	2a04      	cmp	r2, #4
    363e:	d000      	beq.n	3642 <__aeabi_fmul+0x20a>
    3640:	3304      	adds	r3, #4
    3642:	015a      	lsls	r2, r3, #5
    3644:	d504      	bpl.n	3650 <__aeabi_fmul+0x218>
    3646:	2401      	movs	r4, #1
    3648:	2201      	movs	r2, #1
    364a:	400c      	ands	r4, r1
    364c:	2000      	movs	r0, #0
    364e:	e73d      	b.n	34cc <__aeabi_fmul+0x94>
    3650:	2401      	movs	r4, #1
    3652:	019b      	lsls	r3, r3, #6
    3654:	0a58      	lsrs	r0, r3, #9
    3656:	400c      	ands	r4, r1
    3658:	2200      	movs	r2, #0
    365a:	e737      	b.n	34cc <__aeabi_fmul+0x94>
    365c:	2080      	movs	r0, #128	; 0x80
    365e:	2401      	movs	r4, #1
    3660:	03c0      	lsls	r0, r0, #15
    3662:	4328      	orrs	r0, r5
    3664:	0240      	lsls	r0, r0, #9
    3666:	0a40      	lsrs	r0, r0, #9
    3668:	400c      	ands	r4, r1
    366a:	22ff      	movs	r2, #255	; 0xff
    366c:	e72e      	b.n	34cc <__aeabi_fmul+0x94>
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	000042d8 	.word	0x000042d8
    3674:	f7ffffff 	.word	0xf7ffffff

00003678 <__aeabi_fsub>:
    3678:	b5f0      	push	{r4, r5, r6, r7, lr}
    367a:	464f      	mov	r7, r9
    367c:	46d6      	mov	lr, sl
    367e:	4646      	mov	r6, r8
    3680:	0044      	lsls	r4, r0, #1
    3682:	b5c0      	push	{r6, r7, lr}
    3684:	0fc2      	lsrs	r2, r0, #31
    3686:	0247      	lsls	r7, r0, #9
    3688:	0248      	lsls	r0, r1, #9
    368a:	0a40      	lsrs	r0, r0, #9
    368c:	4684      	mov	ip, r0
    368e:	4666      	mov	r6, ip
    3690:	0a7b      	lsrs	r3, r7, #9
    3692:	0048      	lsls	r0, r1, #1
    3694:	0fc9      	lsrs	r1, r1, #31
    3696:	469a      	mov	sl, r3
    3698:	0e24      	lsrs	r4, r4, #24
    369a:	0015      	movs	r5, r2
    369c:	00db      	lsls	r3, r3, #3
    369e:	0e00      	lsrs	r0, r0, #24
    36a0:	4689      	mov	r9, r1
    36a2:	00f6      	lsls	r6, r6, #3
    36a4:	28ff      	cmp	r0, #255	; 0xff
    36a6:	d100      	bne.n	36aa <__aeabi_fsub+0x32>
    36a8:	e08f      	b.n	37ca <__aeabi_fsub+0x152>
    36aa:	2101      	movs	r1, #1
    36ac:	464f      	mov	r7, r9
    36ae:	404f      	eors	r7, r1
    36b0:	0039      	movs	r1, r7
    36b2:	4291      	cmp	r1, r2
    36b4:	d066      	beq.n	3784 <__aeabi_fsub+0x10c>
    36b6:	1a22      	subs	r2, r4, r0
    36b8:	2a00      	cmp	r2, #0
    36ba:	dc00      	bgt.n	36be <__aeabi_fsub+0x46>
    36bc:	e09d      	b.n	37fa <__aeabi_fsub+0x182>
    36be:	2800      	cmp	r0, #0
    36c0:	d13d      	bne.n	373e <__aeabi_fsub+0xc6>
    36c2:	2e00      	cmp	r6, #0
    36c4:	d100      	bne.n	36c8 <__aeabi_fsub+0x50>
    36c6:	e08b      	b.n	37e0 <__aeabi_fsub+0x168>
    36c8:	1e51      	subs	r1, r2, #1
    36ca:	2900      	cmp	r1, #0
    36cc:	d000      	beq.n	36d0 <__aeabi_fsub+0x58>
    36ce:	e0b5      	b.n	383c <__aeabi_fsub+0x1c4>
    36d0:	2401      	movs	r4, #1
    36d2:	1b9b      	subs	r3, r3, r6
    36d4:	015a      	lsls	r2, r3, #5
    36d6:	d544      	bpl.n	3762 <__aeabi_fsub+0xea>
    36d8:	019b      	lsls	r3, r3, #6
    36da:	099f      	lsrs	r7, r3, #6
    36dc:	0038      	movs	r0, r7
    36de:	f000 fd23 	bl	4128 <__clzsi2>
    36e2:	3805      	subs	r0, #5
    36e4:	4087      	lsls	r7, r0
    36e6:	4284      	cmp	r4, r0
    36e8:	dd00      	ble.n	36ec <__aeabi_fsub+0x74>
    36ea:	e096      	b.n	381a <__aeabi_fsub+0x1a2>
    36ec:	1b04      	subs	r4, r0, r4
    36ee:	003a      	movs	r2, r7
    36f0:	2020      	movs	r0, #32
    36f2:	3401      	adds	r4, #1
    36f4:	40e2      	lsrs	r2, r4
    36f6:	1b04      	subs	r4, r0, r4
    36f8:	40a7      	lsls	r7, r4
    36fa:	003b      	movs	r3, r7
    36fc:	1e5f      	subs	r7, r3, #1
    36fe:	41bb      	sbcs	r3, r7
    3700:	2400      	movs	r4, #0
    3702:	4313      	orrs	r3, r2
    3704:	075a      	lsls	r2, r3, #29
    3706:	d004      	beq.n	3712 <__aeabi_fsub+0x9a>
    3708:	220f      	movs	r2, #15
    370a:	401a      	ands	r2, r3
    370c:	2a04      	cmp	r2, #4
    370e:	d000      	beq.n	3712 <__aeabi_fsub+0x9a>
    3710:	3304      	adds	r3, #4
    3712:	015a      	lsls	r2, r3, #5
    3714:	d527      	bpl.n	3766 <__aeabi_fsub+0xee>
    3716:	3401      	adds	r4, #1
    3718:	2cff      	cmp	r4, #255	; 0xff
    371a:	d100      	bne.n	371e <__aeabi_fsub+0xa6>
    371c:	e079      	b.n	3812 <__aeabi_fsub+0x19a>
    371e:	2201      	movs	r2, #1
    3720:	019b      	lsls	r3, r3, #6
    3722:	0a5b      	lsrs	r3, r3, #9
    3724:	b2e4      	uxtb	r4, r4
    3726:	402a      	ands	r2, r5
    3728:	025b      	lsls	r3, r3, #9
    372a:	05e4      	lsls	r4, r4, #23
    372c:	0a58      	lsrs	r0, r3, #9
    372e:	07d2      	lsls	r2, r2, #31
    3730:	4320      	orrs	r0, r4
    3732:	4310      	orrs	r0, r2
    3734:	bc1c      	pop	{r2, r3, r4}
    3736:	4690      	mov	r8, r2
    3738:	4699      	mov	r9, r3
    373a:	46a2      	mov	sl, r4
    373c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    373e:	2cff      	cmp	r4, #255	; 0xff
    3740:	d0e0      	beq.n	3704 <__aeabi_fsub+0x8c>
    3742:	2180      	movs	r1, #128	; 0x80
    3744:	04c9      	lsls	r1, r1, #19
    3746:	430e      	orrs	r6, r1
    3748:	2a1b      	cmp	r2, #27
    374a:	dc7b      	bgt.n	3844 <__aeabi_fsub+0x1cc>
    374c:	0031      	movs	r1, r6
    374e:	2020      	movs	r0, #32
    3750:	40d1      	lsrs	r1, r2
    3752:	1a82      	subs	r2, r0, r2
    3754:	4096      	lsls	r6, r2
    3756:	1e72      	subs	r2, r6, #1
    3758:	4196      	sbcs	r6, r2
    375a:	430e      	orrs	r6, r1
    375c:	1b9b      	subs	r3, r3, r6
    375e:	015a      	lsls	r2, r3, #5
    3760:	d4ba      	bmi.n	36d8 <__aeabi_fsub+0x60>
    3762:	075a      	lsls	r2, r3, #29
    3764:	d1d0      	bne.n	3708 <__aeabi_fsub+0x90>
    3766:	2201      	movs	r2, #1
    3768:	08df      	lsrs	r7, r3, #3
    376a:	402a      	ands	r2, r5
    376c:	2cff      	cmp	r4, #255	; 0xff
    376e:	d133      	bne.n	37d8 <__aeabi_fsub+0x160>
    3770:	2f00      	cmp	r7, #0
    3772:	d100      	bne.n	3776 <__aeabi_fsub+0xfe>
    3774:	e0a8      	b.n	38c8 <__aeabi_fsub+0x250>
    3776:	2380      	movs	r3, #128	; 0x80
    3778:	03db      	lsls	r3, r3, #15
    377a:	433b      	orrs	r3, r7
    377c:	025b      	lsls	r3, r3, #9
    377e:	0a5b      	lsrs	r3, r3, #9
    3780:	24ff      	movs	r4, #255	; 0xff
    3782:	e7d1      	b.n	3728 <__aeabi_fsub+0xb0>
    3784:	1a21      	subs	r1, r4, r0
    3786:	2900      	cmp	r1, #0
    3788:	dd4c      	ble.n	3824 <__aeabi_fsub+0x1ac>
    378a:	2800      	cmp	r0, #0
    378c:	d02a      	beq.n	37e4 <__aeabi_fsub+0x16c>
    378e:	2cff      	cmp	r4, #255	; 0xff
    3790:	d0b8      	beq.n	3704 <__aeabi_fsub+0x8c>
    3792:	2080      	movs	r0, #128	; 0x80
    3794:	04c0      	lsls	r0, r0, #19
    3796:	4306      	orrs	r6, r0
    3798:	291b      	cmp	r1, #27
    379a:	dd00      	ble.n	379e <__aeabi_fsub+0x126>
    379c:	e0af      	b.n	38fe <__aeabi_fsub+0x286>
    379e:	0030      	movs	r0, r6
    37a0:	2720      	movs	r7, #32
    37a2:	40c8      	lsrs	r0, r1
    37a4:	1a79      	subs	r1, r7, r1
    37a6:	408e      	lsls	r6, r1
    37a8:	1e71      	subs	r1, r6, #1
    37aa:	418e      	sbcs	r6, r1
    37ac:	4306      	orrs	r6, r0
    37ae:	199b      	adds	r3, r3, r6
    37b0:	0159      	lsls	r1, r3, #5
    37b2:	d5d6      	bpl.n	3762 <__aeabi_fsub+0xea>
    37b4:	3401      	adds	r4, #1
    37b6:	2cff      	cmp	r4, #255	; 0xff
    37b8:	d100      	bne.n	37bc <__aeabi_fsub+0x144>
    37ba:	e085      	b.n	38c8 <__aeabi_fsub+0x250>
    37bc:	2201      	movs	r2, #1
    37be:	497a      	ldr	r1, [pc, #488]	; (39a8 <__aeabi_fsub+0x330>)
    37c0:	401a      	ands	r2, r3
    37c2:	085b      	lsrs	r3, r3, #1
    37c4:	400b      	ands	r3, r1
    37c6:	4313      	orrs	r3, r2
    37c8:	e79c      	b.n	3704 <__aeabi_fsub+0x8c>
    37ca:	2e00      	cmp	r6, #0
    37cc:	d000      	beq.n	37d0 <__aeabi_fsub+0x158>
    37ce:	e770      	b.n	36b2 <__aeabi_fsub+0x3a>
    37d0:	e76b      	b.n	36aa <__aeabi_fsub+0x32>
    37d2:	1e3b      	subs	r3, r7, #0
    37d4:	d1c5      	bne.n	3762 <__aeabi_fsub+0xea>
    37d6:	2200      	movs	r2, #0
    37d8:	027b      	lsls	r3, r7, #9
    37da:	0a5b      	lsrs	r3, r3, #9
    37dc:	b2e4      	uxtb	r4, r4
    37de:	e7a3      	b.n	3728 <__aeabi_fsub+0xb0>
    37e0:	0014      	movs	r4, r2
    37e2:	e78f      	b.n	3704 <__aeabi_fsub+0x8c>
    37e4:	2e00      	cmp	r6, #0
    37e6:	d04d      	beq.n	3884 <__aeabi_fsub+0x20c>
    37e8:	1e48      	subs	r0, r1, #1
    37ea:	2800      	cmp	r0, #0
    37ec:	d157      	bne.n	389e <__aeabi_fsub+0x226>
    37ee:	199b      	adds	r3, r3, r6
    37f0:	2401      	movs	r4, #1
    37f2:	015a      	lsls	r2, r3, #5
    37f4:	d5b5      	bpl.n	3762 <__aeabi_fsub+0xea>
    37f6:	2402      	movs	r4, #2
    37f8:	e7e0      	b.n	37bc <__aeabi_fsub+0x144>
    37fa:	2a00      	cmp	r2, #0
    37fc:	d125      	bne.n	384a <__aeabi_fsub+0x1d2>
    37fe:	1c62      	adds	r2, r4, #1
    3800:	b2d2      	uxtb	r2, r2
    3802:	2a01      	cmp	r2, #1
    3804:	dd72      	ble.n	38ec <__aeabi_fsub+0x274>
    3806:	1b9f      	subs	r7, r3, r6
    3808:	017a      	lsls	r2, r7, #5
    380a:	d535      	bpl.n	3878 <__aeabi_fsub+0x200>
    380c:	1af7      	subs	r7, r6, r3
    380e:	000d      	movs	r5, r1
    3810:	e764      	b.n	36dc <__aeabi_fsub+0x64>
    3812:	2201      	movs	r2, #1
    3814:	2300      	movs	r3, #0
    3816:	402a      	ands	r2, r5
    3818:	e786      	b.n	3728 <__aeabi_fsub+0xb0>
    381a:	003b      	movs	r3, r7
    381c:	4a63      	ldr	r2, [pc, #396]	; (39ac <__aeabi_fsub+0x334>)
    381e:	1a24      	subs	r4, r4, r0
    3820:	4013      	ands	r3, r2
    3822:	e76f      	b.n	3704 <__aeabi_fsub+0x8c>
    3824:	2900      	cmp	r1, #0
    3826:	d16c      	bne.n	3902 <__aeabi_fsub+0x28a>
    3828:	1c61      	adds	r1, r4, #1
    382a:	b2c8      	uxtb	r0, r1
    382c:	2801      	cmp	r0, #1
    382e:	dd4e      	ble.n	38ce <__aeabi_fsub+0x256>
    3830:	29ff      	cmp	r1, #255	; 0xff
    3832:	d049      	beq.n	38c8 <__aeabi_fsub+0x250>
    3834:	199b      	adds	r3, r3, r6
    3836:	085b      	lsrs	r3, r3, #1
    3838:	000c      	movs	r4, r1
    383a:	e763      	b.n	3704 <__aeabi_fsub+0x8c>
    383c:	2aff      	cmp	r2, #255	; 0xff
    383e:	d041      	beq.n	38c4 <__aeabi_fsub+0x24c>
    3840:	000a      	movs	r2, r1
    3842:	e781      	b.n	3748 <__aeabi_fsub+0xd0>
    3844:	2601      	movs	r6, #1
    3846:	1b9b      	subs	r3, r3, r6
    3848:	e789      	b.n	375e <__aeabi_fsub+0xe6>
    384a:	2c00      	cmp	r4, #0
    384c:	d01c      	beq.n	3888 <__aeabi_fsub+0x210>
    384e:	28ff      	cmp	r0, #255	; 0xff
    3850:	d021      	beq.n	3896 <__aeabi_fsub+0x21e>
    3852:	2480      	movs	r4, #128	; 0x80
    3854:	04e4      	lsls	r4, r4, #19
    3856:	4252      	negs	r2, r2
    3858:	4323      	orrs	r3, r4
    385a:	2a1b      	cmp	r2, #27
    385c:	dd00      	ble.n	3860 <__aeabi_fsub+0x1e8>
    385e:	e096      	b.n	398e <__aeabi_fsub+0x316>
    3860:	001c      	movs	r4, r3
    3862:	2520      	movs	r5, #32
    3864:	40d4      	lsrs	r4, r2
    3866:	1aaa      	subs	r2, r5, r2
    3868:	4093      	lsls	r3, r2
    386a:	1e5a      	subs	r2, r3, #1
    386c:	4193      	sbcs	r3, r2
    386e:	4323      	orrs	r3, r4
    3870:	1af3      	subs	r3, r6, r3
    3872:	0004      	movs	r4, r0
    3874:	000d      	movs	r5, r1
    3876:	e72d      	b.n	36d4 <__aeabi_fsub+0x5c>
    3878:	2f00      	cmp	r7, #0
    387a:	d000      	beq.n	387e <__aeabi_fsub+0x206>
    387c:	e72e      	b.n	36dc <__aeabi_fsub+0x64>
    387e:	2200      	movs	r2, #0
    3880:	2400      	movs	r4, #0
    3882:	e7a9      	b.n	37d8 <__aeabi_fsub+0x160>
    3884:	000c      	movs	r4, r1
    3886:	e73d      	b.n	3704 <__aeabi_fsub+0x8c>
    3888:	2b00      	cmp	r3, #0
    388a:	d058      	beq.n	393e <__aeabi_fsub+0x2c6>
    388c:	43d2      	mvns	r2, r2
    388e:	2a00      	cmp	r2, #0
    3890:	d0ee      	beq.n	3870 <__aeabi_fsub+0x1f8>
    3892:	28ff      	cmp	r0, #255	; 0xff
    3894:	d1e1      	bne.n	385a <__aeabi_fsub+0x1e2>
    3896:	0033      	movs	r3, r6
    3898:	24ff      	movs	r4, #255	; 0xff
    389a:	000d      	movs	r5, r1
    389c:	e732      	b.n	3704 <__aeabi_fsub+0x8c>
    389e:	29ff      	cmp	r1, #255	; 0xff
    38a0:	d010      	beq.n	38c4 <__aeabi_fsub+0x24c>
    38a2:	0001      	movs	r1, r0
    38a4:	e778      	b.n	3798 <__aeabi_fsub+0x120>
    38a6:	2b00      	cmp	r3, #0
    38a8:	d06e      	beq.n	3988 <__aeabi_fsub+0x310>
    38aa:	24ff      	movs	r4, #255	; 0xff
    38ac:	2e00      	cmp	r6, #0
    38ae:	d100      	bne.n	38b2 <__aeabi_fsub+0x23a>
    38b0:	e728      	b.n	3704 <__aeabi_fsub+0x8c>
    38b2:	2280      	movs	r2, #128	; 0x80
    38b4:	4651      	mov	r1, sl
    38b6:	03d2      	lsls	r2, r2, #15
    38b8:	4211      	tst	r1, r2
    38ba:	d003      	beq.n	38c4 <__aeabi_fsub+0x24c>
    38bc:	4661      	mov	r1, ip
    38be:	4211      	tst	r1, r2
    38c0:	d100      	bne.n	38c4 <__aeabi_fsub+0x24c>
    38c2:	0033      	movs	r3, r6
    38c4:	24ff      	movs	r4, #255	; 0xff
    38c6:	e71d      	b.n	3704 <__aeabi_fsub+0x8c>
    38c8:	24ff      	movs	r4, #255	; 0xff
    38ca:	2300      	movs	r3, #0
    38cc:	e72c      	b.n	3728 <__aeabi_fsub+0xb0>
    38ce:	2c00      	cmp	r4, #0
    38d0:	d1e9      	bne.n	38a6 <__aeabi_fsub+0x22e>
    38d2:	2b00      	cmp	r3, #0
    38d4:	d063      	beq.n	399e <__aeabi_fsub+0x326>
    38d6:	2e00      	cmp	r6, #0
    38d8:	d100      	bne.n	38dc <__aeabi_fsub+0x264>
    38da:	e713      	b.n	3704 <__aeabi_fsub+0x8c>
    38dc:	199b      	adds	r3, r3, r6
    38de:	015a      	lsls	r2, r3, #5
    38e0:	d400      	bmi.n	38e4 <__aeabi_fsub+0x26c>
    38e2:	e73e      	b.n	3762 <__aeabi_fsub+0xea>
    38e4:	4a31      	ldr	r2, [pc, #196]	; (39ac <__aeabi_fsub+0x334>)
    38e6:	000c      	movs	r4, r1
    38e8:	4013      	ands	r3, r2
    38ea:	e70b      	b.n	3704 <__aeabi_fsub+0x8c>
    38ec:	2c00      	cmp	r4, #0
    38ee:	d11e      	bne.n	392e <__aeabi_fsub+0x2b6>
    38f0:	2b00      	cmp	r3, #0
    38f2:	d12f      	bne.n	3954 <__aeabi_fsub+0x2dc>
    38f4:	2e00      	cmp	r6, #0
    38f6:	d04f      	beq.n	3998 <__aeabi_fsub+0x320>
    38f8:	0033      	movs	r3, r6
    38fa:	000d      	movs	r5, r1
    38fc:	e702      	b.n	3704 <__aeabi_fsub+0x8c>
    38fe:	2601      	movs	r6, #1
    3900:	e755      	b.n	37ae <__aeabi_fsub+0x136>
    3902:	2c00      	cmp	r4, #0
    3904:	d11f      	bne.n	3946 <__aeabi_fsub+0x2ce>
    3906:	2b00      	cmp	r3, #0
    3908:	d043      	beq.n	3992 <__aeabi_fsub+0x31a>
    390a:	43c9      	mvns	r1, r1
    390c:	2900      	cmp	r1, #0
    390e:	d00b      	beq.n	3928 <__aeabi_fsub+0x2b0>
    3910:	28ff      	cmp	r0, #255	; 0xff
    3912:	d039      	beq.n	3988 <__aeabi_fsub+0x310>
    3914:	291b      	cmp	r1, #27
    3916:	dc44      	bgt.n	39a2 <__aeabi_fsub+0x32a>
    3918:	001c      	movs	r4, r3
    391a:	2720      	movs	r7, #32
    391c:	40cc      	lsrs	r4, r1
    391e:	1a79      	subs	r1, r7, r1
    3920:	408b      	lsls	r3, r1
    3922:	1e59      	subs	r1, r3, #1
    3924:	418b      	sbcs	r3, r1
    3926:	4323      	orrs	r3, r4
    3928:	199b      	adds	r3, r3, r6
    392a:	0004      	movs	r4, r0
    392c:	e740      	b.n	37b0 <__aeabi_fsub+0x138>
    392e:	2b00      	cmp	r3, #0
    3930:	d11a      	bne.n	3968 <__aeabi_fsub+0x2f0>
    3932:	2e00      	cmp	r6, #0
    3934:	d124      	bne.n	3980 <__aeabi_fsub+0x308>
    3936:	2780      	movs	r7, #128	; 0x80
    3938:	2200      	movs	r2, #0
    393a:	03ff      	lsls	r7, r7, #15
    393c:	e71b      	b.n	3776 <__aeabi_fsub+0xfe>
    393e:	0033      	movs	r3, r6
    3940:	0004      	movs	r4, r0
    3942:	000d      	movs	r5, r1
    3944:	e6de      	b.n	3704 <__aeabi_fsub+0x8c>
    3946:	28ff      	cmp	r0, #255	; 0xff
    3948:	d01e      	beq.n	3988 <__aeabi_fsub+0x310>
    394a:	2480      	movs	r4, #128	; 0x80
    394c:	04e4      	lsls	r4, r4, #19
    394e:	4249      	negs	r1, r1
    3950:	4323      	orrs	r3, r4
    3952:	e7df      	b.n	3914 <__aeabi_fsub+0x29c>
    3954:	2e00      	cmp	r6, #0
    3956:	d100      	bne.n	395a <__aeabi_fsub+0x2e2>
    3958:	e6d4      	b.n	3704 <__aeabi_fsub+0x8c>
    395a:	1b9f      	subs	r7, r3, r6
    395c:	017a      	lsls	r2, r7, #5
    395e:	d400      	bmi.n	3962 <__aeabi_fsub+0x2ea>
    3960:	e737      	b.n	37d2 <__aeabi_fsub+0x15a>
    3962:	1af3      	subs	r3, r6, r3
    3964:	000d      	movs	r5, r1
    3966:	e6cd      	b.n	3704 <__aeabi_fsub+0x8c>
    3968:	24ff      	movs	r4, #255	; 0xff
    396a:	2e00      	cmp	r6, #0
    396c:	d100      	bne.n	3970 <__aeabi_fsub+0x2f8>
    396e:	e6c9      	b.n	3704 <__aeabi_fsub+0x8c>
    3970:	2280      	movs	r2, #128	; 0x80
    3972:	4650      	mov	r0, sl
    3974:	03d2      	lsls	r2, r2, #15
    3976:	4210      	tst	r0, r2
    3978:	d0a4      	beq.n	38c4 <__aeabi_fsub+0x24c>
    397a:	4660      	mov	r0, ip
    397c:	4210      	tst	r0, r2
    397e:	d1a1      	bne.n	38c4 <__aeabi_fsub+0x24c>
    3980:	0033      	movs	r3, r6
    3982:	000d      	movs	r5, r1
    3984:	24ff      	movs	r4, #255	; 0xff
    3986:	e6bd      	b.n	3704 <__aeabi_fsub+0x8c>
    3988:	0033      	movs	r3, r6
    398a:	24ff      	movs	r4, #255	; 0xff
    398c:	e6ba      	b.n	3704 <__aeabi_fsub+0x8c>
    398e:	2301      	movs	r3, #1
    3990:	e76e      	b.n	3870 <__aeabi_fsub+0x1f8>
    3992:	0033      	movs	r3, r6
    3994:	0004      	movs	r4, r0
    3996:	e6b5      	b.n	3704 <__aeabi_fsub+0x8c>
    3998:	2700      	movs	r7, #0
    399a:	2200      	movs	r2, #0
    399c:	e71c      	b.n	37d8 <__aeabi_fsub+0x160>
    399e:	0033      	movs	r3, r6
    39a0:	e6b0      	b.n	3704 <__aeabi_fsub+0x8c>
    39a2:	2301      	movs	r3, #1
    39a4:	e7c0      	b.n	3928 <__aeabi_fsub+0x2b0>
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	7dffffff 	.word	0x7dffffff
    39ac:	fbffffff 	.word	0xfbffffff

000039b0 <__aeabi_f2iz>:
    39b0:	0241      	lsls	r1, r0, #9
    39b2:	0043      	lsls	r3, r0, #1
    39b4:	0fc2      	lsrs	r2, r0, #31
    39b6:	0a49      	lsrs	r1, r1, #9
    39b8:	0e1b      	lsrs	r3, r3, #24
    39ba:	2000      	movs	r0, #0
    39bc:	2b7e      	cmp	r3, #126	; 0x7e
    39be:	dd0d      	ble.n	39dc <__aeabi_f2iz+0x2c>
    39c0:	2b9d      	cmp	r3, #157	; 0x9d
    39c2:	dc0c      	bgt.n	39de <__aeabi_f2iz+0x2e>
    39c4:	2080      	movs	r0, #128	; 0x80
    39c6:	0400      	lsls	r0, r0, #16
    39c8:	4301      	orrs	r1, r0
    39ca:	2b95      	cmp	r3, #149	; 0x95
    39cc:	dc0a      	bgt.n	39e4 <__aeabi_f2iz+0x34>
    39ce:	2096      	movs	r0, #150	; 0x96
    39d0:	1ac3      	subs	r3, r0, r3
    39d2:	40d9      	lsrs	r1, r3
    39d4:	4248      	negs	r0, r1
    39d6:	2a00      	cmp	r2, #0
    39d8:	d100      	bne.n	39dc <__aeabi_f2iz+0x2c>
    39da:	0008      	movs	r0, r1
    39dc:	4770      	bx	lr
    39de:	4b03      	ldr	r3, [pc, #12]	; (39ec <__aeabi_f2iz+0x3c>)
    39e0:	18d0      	adds	r0, r2, r3
    39e2:	e7fb      	b.n	39dc <__aeabi_f2iz+0x2c>
    39e4:	3b96      	subs	r3, #150	; 0x96
    39e6:	4099      	lsls	r1, r3
    39e8:	e7f4      	b.n	39d4 <__aeabi_f2iz+0x24>
    39ea:	46c0      	nop			; (mov r8, r8)
    39ec:	7fffffff 	.word	0x7fffffff

000039f0 <__aeabi_i2f>:
    39f0:	b570      	push	{r4, r5, r6, lr}
    39f2:	2800      	cmp	r0, #0
    39f4:	d030      	beq.n	3a58 <__aeabi_i2f+0x68>
    39f6:	17c3      	asrs	r3, r0, #31
    39f8:	18c4      	adds	r4, r0, r3
    39fa:	405c      	eors	r4, r3
    39fc:	0fc5      	lsrs	r5, r0, #31
    39fe:	0020      	movs	r0, r4
    3a00:	f000 fb92 	bl	4128 <__clzsi2>
    3a04:	239e      	movs	r3, #158	; 0x9e
    3a06:	1a1b      	subs	r3, r3, r0
    3a08:	2b96      	cmp	r3, #150	; 0x96
    3a0a:	dc0d      	bgt.n	3a28 <__aeabi_i2f+0x38>
    3a0c:	2296      	movs	r2, #150	; 0x96
    3a0e:	1ad2      	subs	r2, r2, r3
    3a10:	4094      	lsls	r4, r2
    3a12:	002a      	movs	r2, r5
    3a14:	0264      	lsls	r4, r4, #9
    3a16:	0a64      	lsrs	r4, r4, #9
    3a18:	b2db      	uxtb	r3, r3
    3a1a:	0264      	lsls	r4, r4, #9
    3a1c:	05db      	lsls	r3, r3, #23
    3a1e:	0a60      	lsrs	r0, r4, #9
    3a20:	07d2      	lsls	r2, r2, #31
    3a22:	4318      	orrs	r0, r3
    3a24:	4310      	orrs	r0, r2
    3a26:	bd70      	pop	{r4, r5, r6, pc}
    3a28:	2b99      	cmp	r3, #153	; 0x99
    3a2a:	dc19      	bgt.n	3a60 <__aeabi_i2f+0x70>
    3a2c:	2299      	movs	r2, #153	; 0x99
    3a2e:	1ad2      	subs	r2, r2, r3
    3a30:	2a00      	cmp	r2, #0
    3a32:	dd29      	ble.n	3a88 <__aeabi_i2f+0x98>
    3a34:	4094      	lsls	r4, r2
    3a36:	0022      	movs	r2, r4
    3a38:	4c14      	ldr	r4, [pc, #80]	; (3a8c <__aeabi_i2f+0x9c>)
    3a3a:	4014      	ands	r4, r2
    3a3c:	0751      	lsls	r1, r2, #29
    3a3e:	d004      	beq.n	3a4a <__aeabi_i2f+0x5a>
    3a40:	210f      	movs	r1, #15
    3a42:	400a      	ands	r2, r1
    3a44:	2a04      	cmp	r2, #4
    3a46:	d000      	beq.n	3a4a <__aeabi_i2f+0x5a>
    3a48:	3404      	adds	r4, #4
    3a4a:	0162      	lsls	r2, r4, #5
    3a4c:	d413      	bmi.n	3a76 <__aeabi_i2f+0x86>
    3a4e:	01a4      	lsls	r4, r4, #6
    3a50:	0a64      	lsrs	r4, r4, #9
    3a52:	b2db      	uxtb	r3, r3
    3a54:	002a      	movs	r2, r5
    3a56:	e7e0      	b.n	3a1a <__aeabi_i2f+0x2a>
    3a58:	2200      	movs	r2, #0
    3a5a:	2300      	movs	r3, #0
    3a5c:	2400      	movs	r4, #0
    3a5e:	e7dc      	b.n	3a1a <__aeabi_i2f+0x2a>
    3a60:	2205      	movs	r2, #5
    3a62:	0021      	movs	r1, r4
    3a64:	1a12      	subs	r2, r2, r0
    3a66:	40d1      	lsrs	r1, r2
    3a68:	22b9      	movs	r2, #185	; 0xb9
    3a6a:	1ad2      	subs	r2, r2, r3
    3a6c:	4094      	lsls	r4, r2
    3a6e:	1e62      	subs	r2, r4, #1
    3a70:	4194      	sbcs	r4, r2
    3a72:	430c      	orrs	r4, r1
    3a74:	e7da      	b.n	3a2c <__aeabi_i2f+0x3c>
    3a76:	4b05      	ldr	r3, [pc, #20]	; (3a8c <__aeabi_i2f+0x9c>)
    3a78:	002a      	movs	r2, r5
    3a7a:	401c      	ands	r4, r3
    3a7c:	239f      	movs	r3, #159	; 0x9f
    3a7e:	01a4      	lsls	r4, r4, #6
    3a80:	1a1b      	subs	r3, r3, r0
    3a82:	0a64      	lsrs	r4, r4, #9
    3a84:	b2db      	uxtb	r3, r3
    3a86:	e7c8      	b.n	3a1a <__aeabi_i2f+0x2a>
    3a88:	0022      	movs	r2, r4
    3a8a:	e7d5      	b.n	3a38 <__aeabi_i2f+0x48>
    3a8c:	fbffffff 	.word	0xfbffffff

00003a90 <__aeabi_dmul>:
    3a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a92:	4657      	mov	r7, sl
    3a94:	4645      	mov	r5, r8
    3a96:	46de      	mov	lr, fp
    3a98:	464e      	mov	r6, r9
    3a9a:	b5e0      	push	{r5, r6, r7, lr}
    3a9c:	030c      	lsls	r4, r1, #12
    3a9e:	4698      	mov	r8, r3
    3aa0:	004e      	lsls	r6, r1, #1
    3aa2:	0b23      	lsrs	r3, r4, #12
    3aa4:	b087      	sub	sp, #28
    3aa6:	0007      	movs	r7, r0
    3aa8:	4692      	mov	sl, r2
    3aaa:	469b      	mov	fp, r3
    3aac:	0d76      	lsrs	r6, r6, #21
    3aae:	0fcd      	lsrs	r5, r1, #31
    3ab0:	2e00      	cmp	r6, #0
    3ab2:	d06b      	beq.n	3b8c <__aeabi_dmul+0xfc>
    3ab4:	4b6d      	ldr	r3, [pc, #436]	; (3c6c <__aeabi_dmul+0x1dc>)
    3ab6:	429e      	cmp	r6, r3
    3ab8:	d035      	beq.n	3b26 <__aeabi_dmul+0x96>
    3aba:	2480      	movs	r4, #128	; 0x80
    3abc:	465b      	mov	r3, fp
    3abe:	0f42      	lsrs	r2, r0, #29
    3ac0:	0424      	lsls	r4, r4, #16
    3ac2:	00db      	lsls	r3, r3, #3
    3ac4:	4314      	orrs	r4, r2
    3ac6:	431c      	orrs	r4, r3
    3ac8:	00c3      	lsls	r3, r0, #3
    3aca:	4699      	mov	r9, r3
    3acc:	4b68      	ldr	r3, [pc, #416]	; (3c70 <__aeabi_dmul+0x1e0>)
    3ace:	46a3      	mov	fp, r4
    3ad0:	469c      	mov	ip, r3
    3ad2:	2300      	movs	r3, #0
    3ad4:	2700      	movs	r7, #0
    3ad6:	4466      	add	r6, ip
    3ad8:	9302      	str	r3, [sp, #8]
    3ada:	4643      	mov	r3, r8
    3adc:	031c      	lsls	r4, r3, #12
    3ade:	005a      	lsls	r2, r3, #1
    3ae0:	0fdb      	lsrs	r3, r3, #31
    3ae2:	4650      	mov	r0, sl
    3ae4:	0b24      	lsrs	r4, r4, #12
    3ae6:	0d52      	lsrs	r2, r2, #21
    3ae8:	4698      	mov	r8, r3
    3aea:	d100      	bne.n	3aee <__aeabi_dmul+0x5e>
    3aec:	e076      	b.n	3bdc <__aeabi_dmul+0x14c>
    3aee:	4b5f      	ldr	r3, [pc, #380]	; (3c6c <__aeabi_dmul+0x1dc>)
    3af0:	429a      	cmp	r2, r3
    3af2:	d06d      	beq.n	3bd0 <__aeabi_dmul+0x140>
    3af4:	2380      	movs	r3, #128	; 0x80
    3af6:	0f41      	lsrs	r1, r0, #29
    3af8:	041b      	lsls	r3, r3, #16
    3afa:	430b      	orrs	r3, r1
    3afc:	495c      	ldr	r1, [pc, #368]	; (3c70 <__aeabi_dmul+0x1e0>)
    3afe:	00e4      	lsls	r4, r4, #3
    3b00:	468c      	mov	ip, r1
    3b02:	431c      	orrs	r4, r3
    3b04:	00c3      	lsls	r3, r0, #3
    3b06:	2000      	movs	r0, #0
    3b08:	4462      	add	r2, ip
    3b0a:	4641      	mov	r1, r8
    3b0c:	18b6      	adds	r6, r6, r2
    3b0e:	4069      	eors	r1, r5
    3b10:	1c72      	adds	r2, r6, #1
    3b12:	9101      	str	r1, [sp, #4]
    3b14:	4694      	mov	ip, r2
    3b16:	4307      	orrs	r7, r0
    3b18:	2f0f      	cmp	r7, #15
    3b1a:	d900      	bls.n	3b1e <__aeabi_dmul+0x8e>
    3b1c:	e0b0      	b.n	3c80 <__aeabi_dmul+0x1f0>
    3b1e:	4a55      	ldr	r2, [pc, #340]	; (3c74 <__aeabi_dmul+0x1e4>)
    3b20:	00bf      	lsls	r7, r7, #2
    3b22:	59d2      	ldr	r2, [r2, r7]
    3b24:	4697      	mov	pc, r2
    3b26:	465b      	mov	r3, fp
    3b28:	4303      	orrs	r3, r0
    3b2a:	4699      	mov	r9, r3
    3b2c:	d000      	beq.n	3b30 <__aeabi_dmul+0xa0>
    3b2e:	e087      	b.n	3c40 <__aeabi_dmul+0x1b0>
    3b30:	2300      	movs	r3, #0
    3b32:	469b      	mov	fp, r3
    3b34:	3302      	adds	r3, #2
    3b36:	2708      	movs	r7, #8
    3b38:	9302      	str	r3, [sp, #8]
    3b3a:	e7ce      	b.n	3ada <__aeabi_dmul+0x4a>
    3b3c:	4642      	mov	r2, r8
    3b3e:	9201      	str	r2, [sp, #4]
    3b40:	2802      	cmp	r0, #2
    3b42:	d067      	beq.n	3c14 <__aeabi_dmul+0x184>
    3b44:	2803      	cmp	r0, #3
    3b46:	d100      	bne.n	3b4a <__aeabi_dmul+0xba>
    3b48:	e20e      	b.n	3f68 <__aeabi_dmul+0x4d8>
    3b4a:	2801      	cmp	r0, #1
    3b4c:	d000      	beq.n	3b50 <__aeabi_dmul+0xc0>
    3b4e:	e162      	b.n	3e16 <__aeabi_dmul+0x386>
    3b50:	2300      	movs	r3, #0
    3b52:	2400      	movs	r4, #0
    3b54:	2200      	movs	r2, #0
    3b56:	4699      	mov	r9, r3
    3b58:	9901      	ldr	r1, [sp, #4]
    3b5a:	4001      	ands	r1, r0
    3b5c:	b2cd      	uxtb	r5, r1
    3b5e:	2100      	movs	r1, #0
    3b60:	0312      	lsls	r2, r2, #12
    3b62:	0d0b      	lsrs	r3, r1, #20
    3b64:	0b12      	lsrs	r2, r2, #12
    3b66:	051b      	lsls	r3, r3, #20
    3b68:	4313      	orrs	r3, r2
    3b6a:	4a43      	ldr	r2, [pc, #268]	; (3c78 <__aeabi_dmul+0x1e8>)
    3b6c:	0524      	lsls	r4, r4, #20
    3b6e:	4013      	ands	r3, r2
    3b70:	431c      	orrs	r4, r3
    3b72:	0064      	lsls	r4, r4, #1
    3b74:	07ed      	lsls	r5, r5, #31
    3b76:	0864      	lsrs	r4, r4, #1
    3b78:	432c      	orrs	r4, r5
    3b7a:	4648      	mov	r0, r9
    3b7c:	0021      	movs	r1, r4
    3b7e:	b007      	add	sp, #28
    3b80:	bc3c      	pop	{r2, r3, r4, r5}
    3b82:	4690      	mov	r8, r2
    3b84:	4699      	mov	r9, r3
    3b86:	46a2      	mov	sl, r4
    3b88:	46ab      	mov	fp, r5
    3b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b8c:	4303      	orrs	r3, r0
    3b8e:	4699      	mov	r9, r3
    3b90:	d04f      	beq.n	3c32 <__aeabi_dmul+0x1a2>
    3b92:	465b      	mov	r3, fp
    3b94:	2b00      	cmp	r3, #0
    3b96:	d100      	bne.n	3b9a <__aeabi_dmul+0x10a>
    3b98:	e189      	b.n	3eae <__aeabi_dmul+0x41e>
    3b9a:	4658      	mov	r0, fp
    3b9c:	f000 fac4 	bl	4128 <__clzsi2>
    3ba0:	0003      	movs	r3, r0
    3ba2:	3b0b      	subs	r3, #11
    3ba4:	2b1c      	cmp	r3, #28
    3ba6:	dd00      	ble.n	3baa <__aeabi_dmul+0x11a>
    3ba8:	e17a      	b.n	3ea0 <__aeabi_dmul+0x410>
    3baa:	221d      	movs	r2, #29
    3bac:	1ad3      	subs	r3, r2, r3
    3bae:	003a      	movs	r2, r7
    3bb0:	0001      	movs	r1, r0
    3bb2:	465c      	mov	r4, fp
    3bb4:	40da      	lsrs	r2, r3
    3bb6:	3908      	subs	r1, #8
    3bb8:	408c      	lsls	r4, r1
    3bba:	0013      	movs	r3, r2
    3bbc:	408f      	lsls	r7, r1
    3bbe:	4323      	orrs	r3, r4
    3bc0:	469b      	mov	fp, r3
    3bc2:	46b9      	mov	r9, r7
    3bc4:	2300      	movs	r3, #0
    3bc6:	4e2d      	ldr	r6, [pc, #180]	; (3c7c <__aeabi_dmul+0x1ec>)
    3bc8:	2700      	movs	r7, #0
    3bca:	1a36      	subs	r6, r6, r0
    3bcc:	9302      	str	r3, [sp, #8]
    3bce:	e784      	b.n	3ada <__aeabi_dmul+0x4a>
    3bd0:	4653      	mov	r3, sl
    3bd2:	4323      	orrs	r3, r4
    3bd4:	d12a      	bne.n	3c2c <__aeabi_dmul+0x19c>
    3bd6:	2400      	movs	r4, #0
    3bd8:	2002      	movs	r0, #2
    3bda:	e796      	b.n	3b0a <__aeabi_dmul+0x7a>
    3bdc:	4653      	mov	r3, sl
    3bde:	4323      	orrs	r3, r4
    3be0:	d020      	beq.n	3c24 <__aeabi_dmul+0x194>
    3be2:	2c00      	cmp	r4, #0
    3be4:	d100      	bne.n	3be8 <__aeabi_dmul+0x158>
    3be6:	e157      	b.n	3e98 <__aeabi_dmul+0x408>
    3be8:	0020      	movs	r0, r4
    3bea:	f000 fa9d 	bl	4128 <__clzsi2>
    3bee:	0003      	movs	r3, r0
    3bf0:	3b0b      	subs	r3, #11
    3bf2:	2b1c      	cmp	r3, #28
    3bf4:	dd00      	ble.n	3bf8 <__aeabi_dmul+0x168>
    3bf6:	e149      	b.n	3e8c <__aeabi_dmul+0x3fc>
    3bf8:	211d      	movs	r1, #29
    3bfa:	1acb      	subs	r3, r1, r3
    3bfc:	4651      	mov	r1, sl
    3bfe:	0002      	movs	r2, r0
    3c00:	40d9      	lsrs	r1, r3
    3c02:	4653      	mov	r3, sl
    3c04:	3a08      	subs	r2, #8
    3c06:	4094      	lsls	r4, r2
    3c08:	4093      	lsls	r3, r2
    3c0a:	430c      	orrs	r4, r1
    3c0c:	4a1b      	ldr	r2, [pc, #108]	; (3c7c <__aeabi_dmul+0x1ec>)
    3c0e:	1a12      	subs	r2, r2, r0
    3c10:	2000      	movs	r0, #0
    3c12:	e77a      	b.n	3b0a <__aeabi_dmul+0x7a>
    3c14:	2501      	movs	r5, #1
    3c16:	9b01      	ldr	r3, [sp, #4]
    3c18:	4c14      	ldr	r4, [pc, #80]	; (3c6c <__aeabi_dmul+0x1dc>)
    3c1a:	401d      	ands	r5, r3
    3c1c:	2300      	movs	r3, #0
    3c1e:	2200      	movs	r2, #0
    3c20:	4699      	mov	r9, r3
    3c22:	e79c      	b.n	3b5e <__aeabi_dmul+0xce>
    3c24:	2400      	movs	r4, #0
    3c26:	2200      	movs	r2, #0
    3c28:	2001      	movs	r0, #1
    3c2a:	e76e      	b.n	3b0a <__aeabi_dmul+0x7a>
    3c2c:	4653      	mov	r3, sl
    3c2e:	2003      	movs	r0, #3
    3c30:	e76b      	b.n	3b0a <__aeabi_dmul+0x7a>
    3c32:	2300      	movs	r3, #0
    3c34:	469b      	mov	fp, r3
    3c36:	3301      	adds	r3, #1
    3c38:	2704      	movs	r7, #4
    3c3a:	2600      	movs	r6, #0
    3c3c:	9302      	str	r3, [sp, #8]
    3c3e:	e74c      	b.n	3ada <__aeabi_dmul+0x4a>
    3c40:	2303      	movs	r3, #3
    3c42:	4681      	mov	r9, r0
    3c44:	270c      	movs	r7, #12
    3c46:	9302      	str	r3, [sp, #8]
    3c48:	e747      	b.n	3ada <__aeabi_dmul+0x4a>
    3c4a:	2280      	movs	r2, #128	; 0x80
    3c4c:	2300      	movs	r3, #0
    3c4e:	2500      	movs	r5, #0
    3c50:	0312      	lsls	r2, r2, #12
    3c52:	4699      	mov	r9, r3
    3c54:	4c05      	ldr	r4, [pc, #20]	; (3c6c <__aeabi_dmul+0x1dc>)
    3c56:	e782      	b.n	3b5e <__aeabi_dmul+0xce>
    3c58:	465c      	mov	r4, fp
    3c5a:	464b      	mov	r3, r9
    3c5c:	9802      	ldr	r0, [sp, #8]
    3c5e:	e76f      	b.n	3b40 <__aeabi_dmul+0xb0>
    3c60:	465c      	mov	r4, fp
    3c62:	464b      	mov	r3, r9
    3c64:	9501      	str	r5, [sp, #4]
    3c66:	9802      	ldr	r0, [sp, #8]
    3c68:	e76a      	b.n	3b40 <__aeabi_dmul+0xb0>
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	000007ff 	.word	0x000007ff
    3c70:	fffffc01 	.word	0xfffffc01
    3c74:	00004318 	.word	0x00004318
    3c78:	800fffff 	.word	0x800fffff
    3c7c:	fffffc0d 	.word	0xfffffc0d
    3c80:	464a      	mov	r2, r9
    3c82:	4649      	mov	r1, r9
    3c84:	0c17      	lsrs	r7, r2, #16
    3c86:	0c1a      	lsrs	r2, r3, #16
    3c88:	041b      	lsls	r3, r3, #16
    3c8a:	0c1b      	lsrs	r3, r3, #16
    3c8c:	0408      	lsls	r0, r1, #16
    3c8e:	0019      	movs	r1, r3
    3c90:	0c00      	lsrs	r0, r0, #16
    3c92:	4341      	muls	r1, r0
    3c94:	0015      	movs	r5, r2
    3c96:	4688      	mov	r8, r1
    3c98:	0019      	movs	r1, r3
    3c9a:	437d      	muls	r5, r7
    3c9c:	4379      	muls	r1, r7
    3c9e:	9503      	str	r5, [sp, #12]
    3ca0:	4689      	mov	r9, r1
    3ca2:	0029      	movs	r1, r5
    3ca4:	0015      	movs	r5, r2
    3ca6:	4345      	muls	r5, r0
    3ca8:	444d      	add	r5, r9
    3caa:	9502      	str	r5, [sp, #8]
    3cac:	4645      	mov	r5, r8
    3cae:	0c2d      	lsrs	r5, r5, #16
    3cb0:	46aa      	mov	sl, r5
    3cb2:	9d02      	ldr	r5, [sp, #8]
    3cb4:	4455      	add	r5, sl
    3cb6:	45a9      	cmp	r9, r5
    3cb8:	d906      	bls.n	3cc8 <__aeabi_dmul+0x238>
    3cba:	468a      	mov	sl, r1
    3cbc:	2180      	movs	r1, #128	; 0x80
    3cbe:	0249      	lsls	r1, r1, #9
    3cc0:	4689      	mov	r9, r1
    3cc2:	44ca      	add	sl, r9
    3cc4:	4651      	mov	r1, sl
    3cc6:	9103      	str	r1, [sp, #12]
    3cc8:	0c29      	lsrs	r1, r5, #16
    3cca:	9104      	str	r1, [sp, #16]
    3ccc:	4641      	mov	r1, r8
    3cce:	0409      	lsls	r1, r1, #16
    3cd0:	042d      	lsls	r5, r5, #16
    3cd2:	0c09      	lsrs	r1, r1, #16
    3cd4:	4688      	mov	r8, r1
    3cd6:	0029      	movs	r1, r5
    3cd8:	0c25      	lsrs	r5, r4, #16
    3cda:	0424      	lsls	r4, r4, #16
    3cdc:	4441      	add	r1, r8
    3cde:	0c24      	lsrs	r4, r4, #16
    3ce0:	9105      	str	r1, [sp, #20]
    3ce2:	0021      	movs	r1, r4
    3ce4:	4341      	muls	r1, r0
    3ce6:	4688      	mov	r8, r1
    3ce8:	0021      	movs	r1, r4
    3cea:	4379      	muls	r1, r7
    3cec:	468a      	mov	sl, r1
    3cee:	4368      	muls	r0, r5
    3cf0:	4641      	mov	r1, r8
    3cf2:	4450      	add	r0, sl
    3cf4:	4681      	mov	r9, r0
    3cf6:	0c08      	lsrs	r0, r1, #16
    3cf8:	4448      	add	r0, r9
    3cfa:	436f      	muls	r7, r5
    3cfc:	4582      	cmp	sl, r0
    3cfe:	d903      	bls.n	3d08 <__aeabi_dmul+0x278>
    3d00:	2180      	movs	r1, #128	; 0x80
    3d02:	0249      	lsls	r1, r1, #9
    3d04:	4689      	mov	r9, r1
    3d06:	444f      	add	r7, r9
    3d08:	0c01      	lsrs	r1, r0, #16
    3d0a:	4689      	mov	r9, r1
    3d0c:	0039      	movs	r1, r7
    3d0e:	4449      	add	r1, r9
    3d10:	9102      	str	r1, [sp, #8]
    3d12:	4641      	mov	r1, r8
    3d14:	040f      	lsls	r7, r1, #16
    3d16:	9904      	ldr	r1, [sp, #16]
    3d18:	0c3f      	lsrs	r7, r7, #16
    3d1a:	4688      	mov	r8, r1
    3d1c:	0400      	lsls	r0, r0, #16
    3d1e:	19c0      	adds	r0, r0, r7
    3d20:	4480      	add	r8, r0
    3d22:	4641      	mov	r1, r8
    3d24:	9104      	str	r1, [sp, #16]
    3d26:	4659      	mov	r1, fp
    3d28:	0c0f      	lsrs	r7, r1, #16
    3d2a:	0409      	lsls	r1, r1, #16
    3d2c:	0c09      	lsrs	r1, r1, #16
    3d2e:	4688      	mov	r8, r1
    3d30:	4359      	muls	r1, r3
    3d32:	468a      	mov	sl, r1
    3d34:	0039      	movs	r1, r7
    3d36:	4351      	muls	r1, r2
    3d38:	4689      	mov	r9, r1
    3d3a:	4641      	mov	r1, r8
    3d3c:	434a      	muls	r2, r1
    3d3e:	4651      	mov	r1, sl
    3d40:	0c09      	lsrs	r1, r1, #16
    3d42:	468b      	mov	fp, r1
    3d44:	437b      	muls	r3, r7
    3d46:	18d2      	adds	r2, r2, r3
    3d48:	445a      	add	r2, fp
    3d4a:	4293      	cmp	r3, r2
    3d4c:	d903      	bls.n	3d56 <__aeabi_dmul+0x2c6>
    3d4e:	2380      	movs	r3, #128	; 0x80
    3d50:	025b      	lsls	r3, r3, #9
    3d52:	469b      	mov	fp, r3
    3d54:	44d9      	add	r9, fp
    3d56:	4651      	mov	r1, sl
    3d58:	0409      	lsls	r1, r1, #16
    3d5a:	0c09      	lsrs	r1, r1, #16
    3d5c:	468a      	mov	sl, r1
    3d5e:	4641      	mov	r1, r8
    3d60:	4361      	muls	r1, r4
    3d62:	437c      	muls	r4, r7
    3d64:	0c13      	lsrs	r3, r2, #16
    3d66:	0412      	lsls	r2, r2, #16
    3d68:	444b      	add	r3, r9
    3d6a:	4452      	add	r2, sl
    3d6c:	46a1      	mov	r9, r4
    3d6e:	468a      	mov	sl, r1
    3d70:	003c      	movs	r4, r7
    3d72:	4641      	mov	r1, r8
    3d74:	436c      	muls	r4, r5
    3d76:	434d      	muls	r5, r1
    3d78:	4651      	mov	r1, sl
    3d7a:	444d      	add	r5, r9
    3d7c:	0c0f      	lsrs	r7, r1, #16
    3d7e:	197d      	adds	r5, r7, r5
    3d80:	45a9      	cmp	r9, r5
    3d82:	d903      	bls.n	3d8c <__aeabi_dmul+0x2fc>
    3d84:	2180      	movs	r1, #128	; 0x80
    3d86:	0249      	lsls	r1, r1, #9
    3d88:	4688      	mov	r8, r1
    3d8a:	4444      	add	r4, r8
    3d8c:	9f04      	ldr	r7, [sp, #16]
    3d8e:	9903      	ldr	r1, [sp, #12]
    3d90:	46b8      	mov	r8, r7
    3d92:	4441      	add	r1, r8
    3d94:	468b      	mov	fp, r1
    3d96:	4583      	cmp	fp, r0
    3d98:	4180      	sbcs	r0, r0
    3d9a:	4241      	negs	r1, r0
    3d9c:	4688      	mov	r8, r1
    3d9e:	4651      	mov	r1, sl
    3da0:	0408      	lsls	r0, r1, #16
    3da2:	042f      	lsls	r7, r5, #16
    3da4:	0c00      	lsrs	r0, r0, #16
    3da6:	183f      	adds	r7, r7, r0
    3da8:	4658      	mov	r0, fp
    3daa:	9902      	ldr	r1, [sp, #8]
    3dac:	1810      	adds	r0, r2, r0
    3dae:	4689      	mov	r9, r1
    3db0:	4290      	cmp	r0, r2
    3db2:	4192      	sbcs	r2, r2
    3db4:	444f      	add	r7, r9
    3db6:	46ba      	mov	sl, r7
    3db8:	4252      	negs	r2, r2
    3dba:	4699      	mov	r9, r3
    3dbc:	4693      	mov	fp, r2
    3dbe:	44c2      	add	sl, r8
    3dc0:	44d1      	add	r9, sl
    3dc2:	44cb      	add	fp, r9
    3dc4:	428f      	cmp	r7, r1
    3dc6:	41bf      	sbcs	r7, r7
    3dc8:	45c2      	cmp	sl, r8
    3dca:	4189      	sbcs	r1, r1
    3dcc:	4599      	cmp	r9, r3
    3dce:	419b      	sbcs	r3, r3
    3dd0:	4593      	cmp	fp, r2
    3dd2:	4192      	sbcs	r2, r2
    3dd4:	427f      	negs	r7, r7
    3dd6:	4249      	negs	r1, r1
    3dd8:	0c2d      	lsrs	r5, r5, #16
    3dda:	4252      	negs	r2, r2
    3ddc:	430f      	orrs	r7, r1
    3dde:	425b      	negs	r3, r3
    3de0:	4313      	orrs	r3, r2
    3de2:	197f      	adds	r7, r7, r5
    3de4:	18ff      	adds	r7, r7, r3
    3de6:	465b      	mov	r3, fp
    3de8:	193c      	adds	r4, r7, r4
    3dea:	0ddb      	lsrs	r3, r3, #23
    3dec:	9a05      	ldr	r2, [sp, #20]
    3dee:	0264      	lsls	r4, r4, #9
    3df0:	431c      	orrs	r4, r3
    3df2:	0243      	lsls	r3, r0, #9
    3df4:	4313      	orrs	r3, r2
    3df6:	1e5d      	subs	r5, r3, #1
    3df8:	41ab      	sbcs	r3, r5
    3dfa:	465a      	mov	r2, fp
    3dfc:	0dc0      	lsrs	r0, r0, #23
    3dfe:	4303      	orrs	r3, r0
    3e00:	0252      	lsls	r2, r2, #9
    3e02:	4313      	orrs	r3, r2
    3e04:	01e2      	lsls	r2, r4, #7
    3e06:	d556      	bpl.n	3eb6 <__aeabi_dmul+0x426>
    3e08:	2001      	movs	r0, #1
    3e0a:	085a      	lsrs	r2, r3, #1
    3e0c:	4003      	ands	r3, r0
    3e0e:	4313      	orrs	r3, r2
    3e10:	07e2      	lsls	r2, r4, #31
    3e12:	4313      	orrs	r3, r2
    3e14:	0864      	lsrs	r4, r4, #1
    3e16:	485a      	ldr	r0, [pc, #360]	; (3f80 <__aeabi_dmul+0x4f0>)
    3e18:	4460      	add	r0, ip
    3e1a:	2800      	cmp	r0, #0
    3e1c:	dd4d      	ble.n	3eba <__aeabi_dmul+0x42a>
    3e1e:	075a      	lsls	r2, r3, #29
    3e20:	d009      	beq.n	3e36 <__aeabi_dmul+0x3a6>
    3e22:	220f      	movs	r2, #15
    3e24:	401a      	ands	r2, r3
    3e26:	2a04      	cmp	r2, #4
    3e28:	d005      	beq.n	3e36 <__aeabi_dmul+0x3a6>
    3e2a:	1d1a      	adds	r2, r3, #4
    3e2c:	429a      	cmp	r2, r3
    3e2e:	419b      	sbcs	r3, r3
    3e30:	425b      	negs	r3, r3
    3e32:	18e4      	adds	r4, r4, r3
    3e34:	0013      	movs	r3, r2
    3e36:	01e2      	lsls	r2, r4, #7
    3e38:	d504      	bpl.n	3e44 <__aeabi_dmul+0x3b4>
    3e3a:	2080      	movs	r0, #128	; 0x80
    3e3c:	4a51      	ldr	r2, [pc, #324]	; (3f84 <__aeabi_dmul+0x4f4>)
    3e3e:	00c0      	lsls	r0, r0, #3
    3e40:	4014      	ands	r4, r2
    3e42:	4460      	add	r0, ip
    3e44:	4a50      	ldr	r2, [pc, #320]	; (3f88 <__aeabi_dmul+0x4f8>)
    3e46:	4290      	cmp	r0, r2
    3e48:	dd00      	ble.n	3e4c <__aeabi_dmul+0x3bc>
    3e4a:	e6e3      	b.n	3c14 <__aeabi_dmul+0x184>
    3e4c:	2501      	movs	r5, #1
    3e4e:	08db      	lsrs	r3, r3, #3
    3e50:	0762      	lsls	r2, r4, #29
    3e52:	431a      	orrs	r2, r3
    3e54:	0264      	lsls	r4, r4, #9
    3e56:	9b01      	ldr	r3, [sp, #4]
    3e58:	4691      	mov	r9, r2
    3e5a:	0b22      	lsrs	r2, r4, #12
    3e5c:	0544      	lsls	r4, r0, #21
    3e5e:	0d64      	lsrs	r4, r4, #21
    3e60:	401d      	ands	r5, r3
    3e62:	e67c      	b.n	3b5e <__aeabi_dmul+0xce>
    3e64:	2280      	movs	r2, #128	; 0x80
    3e66:	4659      	mov	r1, fp
    3e68:	0312      	lsls	r2, r2, #12
    3e6a:	4211      	tst	r1, r2
    3e6c:	d008      	beq.n	3e80 <__aeabi_dmul+0x3f0>
    3e6e:	4214      	tst	r4, r2
    3e70:	d106      	bne.n	3e80 <__aeabi_dmul+0x3f0>
    3e72:	4322      	orrs	r2, r4
    3e74:	0312      	lsls	r2, r2, #12
    3e76:	0b12      	lsrs	r2, r2, #12
    3e78:	4645      	mov	r5, r8
    3e7a:	4699      	mov	r9, r3
    3e7c:	4c43      	ldr	r4, [pc, #268]	; (3f8c <__aeabi_dmul+0x4fc>)
    3e7e:	e66e      	b.n	3b5e <__aeabi_dmul+0xce>
    3e80:	465b      	mov	r3, fp
    3e82:	431a      	orrs	r2, r3
    3e84:	0312      	lsls	r2, r2, #12
    3e86:	0b12      	lsrs	r2, r2, #12
    3e88:	4c40      	ldr	r4, [pc, #256]	; (3f8c <__aeabi_dmul+0x4fc>)
    3e8a:	e668      	b.n	3b5e <__aeabi_dmul+0xce>
    3e8c:	0003      	movs	r3, r0
    3e8e:	4654      	mov	r4, sl
    3e90:	3b28      	subs	r3, #40	; 0x28
    3e92:	409c      	lsls	r4, r3
    3e94:	2300      	movs	r3, #0
    3e96:	e6b9      	b.n	3c0c <__aeabi_dmul+0x17c>
    3e98:	f000 f946 	bl	4128 <__clzsi2>
    3e9c:	3020      	adds	r0, #32
    3e9e:	e6a6      	b.n	3bee <__aeabi_dmul+0x15e>
    3ea0:	0003      	movs	r3, r0
    3ea2:	3b28      	subs	r3, #40	; 0x28
    3ea4:	409f      	lsls	r7, r3
    3ea6:	2300      	movs	r3, #0
    3ea8:	46bb      	mov	fp, r7
    3eaa:	4699      	mov	r9, r3
    3eac:	e68a      	b.n	3bc4 <__aeabi_dmul+0x134>
    3eae:	f000 f93b 	bl	4128 <__clzsi2>
    3eb2:	3020      	adds	r0, #32
    3eb4:	e674      	b.n	3ba0 <__aeabi_dmul+0x110>
    3eb6:	46b4      	mov	ip, r6
    3eb8:	e7ad      	b.n	3e16 <__aeabi_dmul+0x386>
    3eba:	2501      	movs	r5, #1
    3ebc:	1a2a      	subs	r2, r5, r0
    3ebe:	2a38      	cmp	r2, #56	; 0x38
    3ec0:	dd06      	ble.n	3ed0 <__aeabi_dmul+0x440>
    3ec2:	9b01      	ldr	r3, [sp, #4]
    3ec4:	2400      	movs	r4, #0
    3ec6:	401d      	ands	r5, r3
    3ec8:	2300      	movs	r3, #0
    3eca:	2200      	movs	r2, #0
    3ecc:	4699      	mov	r9, r3
    3ece:	e646      	b.n	3b5e <__aeabi_dmul+0xce>
    3ed0:	2a1f      	cmp	r2, #31
    3ed2:	dc21      	bgt.n	3f18 <__aeabi_dmul+0x488>
    3ed4:	2520      	movs	r5, #32
    3ed6:	0020      	movs	r0, r4
    3ed8:	1aad      	subs	r5, r5, r2
    3eda:	001e      	movs	r6, r3
    3edc:	40ab      	lsls	r3, r5
    3ede:	40a8      	lsls	r0, r5
    3ee0:	40d6      	lsrs	r6, r2
    3ee2:	1e5d      	subs	r5, r3, #1
    3ee4:	41ab      	sbcs	r3, r5
    3ee6:	4330      	orrs	r0, r6
    3ee8:	4318      	orrs	r0, r3
    3eea:	40d4      	lsrs	r4, r2
    3eec:	0743      	lsls	r3, r0, #29
    3eee:	d009      	beq.n	3f04 <__aeabi_dmul+0x474>
    3ef0:	230f      	movs	r3, #15
    3ef2:	4003      	ands	r3, r0
    3ef4:	2b04      	cmp	r3, #4
    3ef6:	d005      	beq.n	3f04 <__aeabi_dmul+0x474>
    3ef8:	0003      	movs	r3, r0
    3efa:	1d18      	adds	r0, r3, #4
    3efc:	4298      	cmp	r0, r3
    3efe:	419b      	sbcs	r3, r3
    3f00:	425b      	negs	r3, r3
    3f02:	18e4      	adds	r4, r4, r3
    3f04:	0223      	lsls	r3, r4, #8
    3f06:	d521      	bpl.n	3f4c <__aeabi_dmul+0x4bc>
    3f08:	2501      	movs	r5, #1
    3f0a:	9b01      	ldr	r3, [sp, #4]
    3f0c:	2401      	movs	r4, #1
    3f0e:	401d      	ands	r5, r3
    3f10:	2300      	movs	r3, #0
    3f12:	2200      	movs	r2, #0
    3f14:	4699      	mov	r9, r3
    3f16:	e622      	b.n	3b5e <__aeabi_dmul+0xce>
    3f18:	251f      	movs	r5, #31
    3f1a:	0021      	movs	r1, r4
    3f1c:	426d      	negs	r5, r5
    3f1e:	1a28      	subs	r0, r5, r0
    3f20:	40c1      	lsrs	r1, r0
    3f22:	0008      	movs	r0, r1
    3f24:	2a20      	cmp	r2, #32
    3f26:	d01d      	beq.n	3f64 <__aeabi_dmul+0x4d4>
    3f28:	355f      	adds	r5, #95	; 0x5f
    3f2a:	1aaa      	subs	r2, r5, r2
    3f2c:	4094      	lsls	r4, r2
    3f2e:	4323      	orrs	r3, r4
    3f30:	1e5c      	subs	r4, r3, #1
    3f32:	41a3      	sbcs	r3, r4
    3f34:	2507      	movs	r5, #7
    3f36:	4303      	orrs	r3, r0
    3f38:	401d      	ands	r5, r3
    3f3a:	2200      	movs	r2, #0
    3f3c:	2d00      	cmp	r5, #0
    3f3e:	d009      	beq.n	3f54 <__aeabi_dmul+0x4c4>
    3f40:	220f      	movs	r2, #15
    3f42:	2400      	movs	r4, #0
    3f44:	401a      	ands	r2, r3
    3f46:	0018      	movs	r0, r3
    3f48:	2a04      	cmp	r2, #4
    3f4a:	d1d6      	bne.n	3efa <__aeabi_dmul+0x46a>
    3f4c:	0003      	movs	r3, r0
    3f4e:	0765      	lsls	r5, r4, #29
    3f50:	0264      	lsls	r4, r4, #9
    3f52:	0b22      	lsrs	r2, r4, #12
    3f54:	08db      	lsrs	r3, r3, #3
    3f56:	432b      	orrs	r3, r5
    3f58:	2501      	movs	r5, #1
    3f5a:	4699      	mov	r9, r3
    3f5c:	9b01      	ldr	r3, [sp, #4]
    3f5e:	2400      	movs	r4, #0
    3f60:	401d      	ands	r5, r3
    3f62:	e5fc      	b.n	3b5e <__aeabi_dmul+0xce>
    3f64:	2400      	movs	r4, #0
    3f66:	e7e2      	b.n	3f2e <__aeabi_dmul+0x49e>
    3f68:	2280      	movs	r2, #128	; 0x80
    3f6a:	2501      	movs	r5, #1
    3f6c:	0312      	lsls	r2, r2, #12
    3f6e:	4322      	orrs	r2, r4
    3f70:	9901      	ldr	r1, [sp, #4]
    3f72:	0312      	lsls	r2, r2, #12
    3f74:	0b12      	lsrs	r2, r2, #12
    3f76:	400d      	ands	r5, r1
    3f78:	4699      	mov	r9, r3
    3f7a:	4c04      	ldr	r4, [pc, #16]	; (3f8c <__aeabi_dmul+0x4fc>)
    3f7c:	e5ef      	b.n	3b5e <__aeabi_dmul+0xce>
    3f7e:	46c0      	nop			; (mov r8, r8)
    3f80:	000003ff 	.word	0x000003ff
    3f84:	feffffff 	.word	0xfeffffff
    3f88:	000007fe 	.word	0x000007fe
    3f8c:	000007ff 	.word	0x000007ff

00003f90 <__aeabi_i2d>:
    3f90:	b570      	push	{r4, r5, r6, lr}
    3f92:	2800      	cmp	r0, #0
    3f94:	d030      	beq.n	3ff8 <__aeabi_i2d+0x68>
    3f96:	17c3      	asrs	r3, r0, #31
    3f98:	18c4      	adds	r4, r0, r3
    3f9a:	405c      	eors	r4, r3
    3f9c:	0fc5      	lsrs	r5, r0, #31
    3f9e:	0020      	movs	r0, r4
    3fa0:	f000 f8c2 	bl	4128 <__clzsi2>
    3fa4:	4b17      	ldr	r3, [pc, #92]	; (4004 <__aeabi_i2d+0x74>)
    3fa6:	4a18      	ldr	r2, [pc, #96]	; (4008 <__aeabi_i2d+0x78>)
    3fa8:	1a1b      	subs	r3, r3, r0
    3faa:	1ad2      	subs	r2, r2, r3
    3fac:	2a1f      	cmp	r2, #31
    3fae:	dd18      	ble.n	3fe2 <__aeabi_i2d+0x52>
    3fb0:	4a16      	ldr	r2, [pc, #88]	; (400c <__aeabi_i2d+0x7c>)
    3fb2:	1ad2      	subs	r2, r2, r3
    3fb4:	4094      	lsls	r4, r2
    3fb6:	2200      	movs	r2, #0
    3fb8:	0324      	lsls	r4, r4, #12
    3fba:	055b      	lsls	r3, r3, #21
    3fbc:	0b24      	lsrs	r4, r4, #12
    3fbe:	0d5b      	lsrs	r3, r3, #21
    3fc0:	2100      	movs	r1, #0
    3fc2:	0010      	movs	r0, r2
    3fc4:	0324      	lsls	r4, r4, #12
    3fc6:	0d0a      	lsrs	r2, r1, #20
    3fc8:	0b24      	lsrs	r4, r4, #12
    3fca:	0512      	lsls	r2, r2, #20
    3fcc:	4322      	orrs	r2, r4
    3fce:	4c10      	ldr	r4, [pc, #64]	; (4010 <__aeabi_i2d+0x80>)
    3fd0:	051b      	lsls	r3, r3, #20
    3fd2:	4022      	ands	r2, r4
    3fd4:	4313      	orrs	r3, r2
    3fd6:	005b      	lsls	r3, r3, #1
    3fd8:	07ed      	lsls	r5, r5, #31
    3fda:	085b      	lsrs	r3, r3, #1
    3fdc:	432b      	orrs	r3, r5
    3fde:	0019      	movs	r1, r3
    3fe0:	bd70      	pop	{r4, r5, r6, pc}
    3fe2:	0021      	movs	r1, r4
    3fe4:	4091      	lsls	r1, r2
    3fe6:	000a      	movs	r2, r1
    3fe8:	210b      	movs	r1, #11
    3fea:	1a08      	subs	r0, r1, r0
    3fec:	40c4      	lsrs	r4, r0
    3fee:	055b      	lsls	r3, r3, #21
    3ff0:	0324      	lsls	r4, r4, #12
    3ff2:	0b24      	lsrs	r4, r4, #12
    3ff4:	0d5b      	lsrs	r3, r3, #21
    3ff6:	e7e3      	b.n	3fc0 <__aeabi_i2d+0x30>
    3ff8:	2500      	movs	r5, #0
    3ffa:	2300      	movs	r3, #0
    3ffc:	2400      	movs	r4, #0
    3ffe:	2200      	movs	r2, #0
    4000:	e7de      	b.n	3fc0 <__aeabi_i2d+0x30>
    4002:	46c0      	nop			; (mov r8, r8)
    4004:	0000041e 	.word	0x0000041e
    4008:	00000433 	.word	0x00000433
    400c:	00000413 	.word	0x00000413
    4010:	800fffff 	.word	0x800fffff

00004014 <__aeabi_d2f>:
    4014:	b5f0      	push	{r4, r5, r6, r7, lr}
    4016:	004c      	lsls	r4, r1, #1
    4018:	0d64      	lsrs	r4, r4, #21
    401a:	030b      	lsls	r3, r1, #12
    401c:	1c62      	adds	r2, r4, #1
    401e:	0f45      	lsrs	r5, r0, #29
    4020:	0a5b      	lsrs	r3, r3, #9
    4022:	0552      	lsls	r2, r2, #21
    4024:	432b      	orrs	r3, r5
    4026:	0fc9      	lsrs	r1, r1, #31
    4028:	00c5      	lsls	r5, r0, #3
    402a:	0d52      	lsrs	r2, r2, #21
    402c:	2a01      	cmp	r2, #1
    402e:	dd28      	ble.n	4082 <__aeabi_d2f+0x6e>
    4030:	4a3a      	ldr	r2, [pc, #232]	; (411c <__aeabi_d2f+0x108>)
    4032:	18a6      	adds	r6, r4, r2
    4034:	2efe      	cmp	r6, #254	; 0xfe
    4036:	dc1b      	bgt.n	4070 <__aeabi_d2f+0x5c>
    4038:	2e00      	cmp	r6, #0
    403a:	dd3e      	ble.n	40ba <__aeabi_d2f+0xa6>
    403c:	0180      	lsls	r0, r0, #6
    403e:	0002      	movs	r2, r0
    4040:	1e50      	subs	r0, r2, #1
    4042:	4182      	sbcs	r2, r0
    4044:	0f6d      	lsrs	r5, r5, #29
    4046:	432a      	orrs	r2, r5
    4048:	00db      	lsls	r3, r3, #3
    404a:	4313      	orrs	r3, r2
    404c:	075a      	lsls	r2, r3, #29
    404e:	d004      	beq.n	405a <__aeabi_d2f+0x46>
    4050:	220f      	movs	r2, #15
    4052:	401a      	ands	r2, r3
    4054:	2a04      	cmp	r2, #4
    4056:	d000      	beq.n	405a <__aeabi_d2f+0x46>
    4058:	3304      	adds	r3, #4
    405a:	2280      	movs	r2, #128	; 0x80
    405c:	04d2      	lsls	r2, r2, #19
    405e:	401a      	ands	r2, r3
    4060:	d05a      	beq.n	4118 <__aeabi_d2f+0x104>
    4062:	3601      	adds	r6, #1
    4064:	2eff      	cmp	r6, #255	; 0xff
    4066:	d003      	beq.n	4070 <__aeabi_d2f+0x5c>
    4068:	019b      	lsls	r3, r3, #6
    406a:	0a5b      	lsrs	r3, r3, #9
    406c:	b2f4      	uxtb	r4, r6
    406e:	e001      	b.n	4074 <__aeabi_d2f+0x60>
    4070:	24ff      	movs	r4, #255	; 0xff
    4072:	2300      	movs	r3, #0
    4074:	0258      	lsls	r0, r3, #9
    4076:	05e4      	lsls	r4, r4, #23
    4078:	0a40      	lsrs	r0, r0, #9
    407a:	07c9      	lsls	r1, r1, #31
    407c:	4320      	orrs	r0, r4
    407e:	4308      	orrs	r0, r1
    4080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4082:	2c00      	cmp	r4, #0
    4084:	d007      	beq.n	4096 <__aeabi_d2f+0x82>
    4086:	431d      	orrs	r5, r3
    4088:	d0f2      	beq.n	4070 <__aeabi_d2f+0x5c>
    408a:	2080      	movs	r0, #128	; 0x80
    408c:	00db      	lsls	r3, r3, #3
    408e:	0480      	lsls	r0, r0, #18
    4090:	4303      	orrs	r3, r0
    4092:	26ff      	movs	r6, #255	; 0xff
    4094:	e7da      	b.n	404c <__aeabi_d2f+0x38>
    4096:	432b      	orrs	r3, r5
    4098:	d003      	beq.n	40a2 <__aeabi_d2f+0x8e>
    409a:	2305      	movs	r3, #5
    409c:	08db      	lsrs	r3, r3, #3
    409e:	2cff      	cmp	r4, #255	; 0xff
    40a0:	d003      	beq.n	40aa <__aeabi_d2f+0x96>
    40a2:	025b      	lsls	r3, r3, #9
    40a4:	0a5b      	lsrs	r3, r3, #9
    40a6:	b2e4      	uxtb	r4, r4
    40a8:	e7e4      	b.n	4074 <__aeabi_d2f+0x60>
    40aa:	2b00      	cmp	r3, #0
    40ac:	d032      	beq.n	4114 <__aeabi_d2f+0x100>
    40ae:	2080      	movs	r0, #128	; 0x80
    40b0:	03c0      	lsls	r0, r0, #15
    40b2:	4303      	orrs	r3, r0
    40b4:	025b      	lsls	r3, r3, #9
    40b6:	0a5b      	lsrs	r3, r3, #9
    40b8:	e7dc      	b.n	4074 <__aeabi_d2f+0x60>
    40ba:	0032      	movs	r2, r6
    40bc:	3217      	adds	r2, #23
    40be:	db14      	blt.n	40ea <__aeabi_d2f+0xd6>
    40c0:	2280      	movs	r2, #128	; 0x80
    40c2:	271e      	movs	r7, #30
    40c4:	0412      	lsls	r2, r2, #16
    40c6:	4313      	orrs	r3, r2
    40c8:	1bbf      	subs	r7, r7, r6
    40ca:	2f1f      	cmp	r7, #31
    40cc:	dc0f      	bgt.n	40ee <__aeabi_d2f+0xda>
    40ce:	4a14      	ldr	r2, [pc, #80]	; (4120 <__aeabi_d2f+0x10c>)
    40d0:	4694      	mov	ip, r2
    40d2:	4464      	add	r4, ip
    40d4:	002a      	movs	r2, r5
    40d6:	40a5      	lsls	r5, r4
    40d8:	002e      	movs	r6, r5
    40da:	40a3      	lsls	r3, r4
    40dc:	1e75      	subs	r5, r6, #1
    40de:	41ae      	sbcs	r6, r5
    40e0:	40fa      	lsrs	r2, r7
    40e2:	4333      	orrs	r3, r6
    40e4:	4313      	orrs	r3, r2
    40e6:	2600      	movs	r6, #0
    40e8:	e7b0      	b.n	404c <__aeabi_d2f+0x38>
    40ea:	2400      	movs	r4, #0
    40ec:	e7d5      	b.n	409a <__aeabi_d2f+0x86>
    40ee:	2202      	movs	r2, #2
    40f0:	4252      	negs	r2, r2
    40f2:	1b96      	subs	r6, r2, r6
    40f4:	001a      	movs	r2, r3
    40f6:	40f2      	lsrs	r2, r6
    40f8:	2f20      	cmp	r7, #32
    40fa:	d009      	beq.n	4110 <__aeabi_d2f+0xfc>
    40fc:	4809      	ldr	r0, [pc, #36]	; (4124 <__aeabi_d2f+0x110>)
    40fe:	4684      	mov	ip, r0
    4100:	4464      	add	r4, ip
    4102:	40a3      	lsls	r3, r4
    4104:	432b      	orrs	r3, r5
    4106:	1e5d      	subs	r5, r3, #1
    4108:	41ab      	sbcs	r3, r5
    410a:	2600      	movs	r6, #0
    410c:	4313      	orrs	r3, r2
    410e:	e79d      	b.n	404c <__aeabi_d2f+0x38>
    4110:	2300      	movs	r3, #0
    4112:	e7f7      	b.n	4104 <__aeabi_d2f+0xf0>
    4114:	2300      	movs	r3, #0
    4116:	e7ad      	b.n	4074 <__aeabi_d2f+0x60>
    4118:	0034      	movs	r4, r6
    411a:	e7bf      	b.n	409c <__aeabi_d2f+0x88>
    411c:	fffffc80 	.word	0xfffffc80
    4120:	fffffc82 	.word	0xfffffc82
    4124:	fffffca2 	.word	0xfffffca2

00004128 <__clzsi2>:
    4128:	211c      	movs	r1, #28
    412a:	2301      	movs	r3, #1
    412c:	041b      	lsls	r3, r3, #16
    412e:	4298      	cmp	r0, r3
    4130:	d301      	bcc.n	4136 <__clzsi2+0xe>
    4132:	0c00      	lsrs	r0, r0, #16
    4134:	3910      	subs	r1, #16
    4136:	0a1b      	lsrs	r3, r3, #8
    4138:	4298      	cmp	r0, r3
    413a:	d301      	bcc.n	4140 <__clzsi2+0x18>
    413c:	0a00      	lsrs	r0, r0, #8
    413e:	3908      	subs	r1, #8
    4140:	091b      	lsrs	r3, r3, #4
    4142:	4298      	cmp	r0, r3
    4144:	d301      	bcc.n	414a <__clzsi2+0x22>
    4146:	0900      	lsrs	r0, r0, #4
    4148:	3904      	subs	r1, #4
    414a:	a202      	add	r2, pc, #8	; (adr r2, 4154 <__clzsi2+0x2c>)
    414c:	5c10      	ldrb	r0, [r2, r0]
    414e:	1840      	adds	r0, r0, r1
    4150:	4770      	bx	lr
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	02020304 	.word	0x02020304
    4158:	01010101 	.word	0x01010101
	...

00004164 <__libc_init_array>:
    4164:	b570      	push	{r4, r5, r6, lr}
    4166:	2600      	movs	r6, #0
    4168:	4d0c      	ldr	r5, [pc, #48]	; (419c <__libc_init_array+0x38>)
    416a:	4c0d      	ldr	r4, [pc, #52]	; (41a0 <__libc_init_array+0x3c>)
    416c:	1b64      	subs	r4, r4, r5
    416e:	10a4      	asrs	r4, r4, #2
    4170:	42a6      	cmp	r6, r4
    4172:	d109      	bne.n	4188 <__libc_init_array+0x24>
    4174:	2600      	movs	r6, #0
    4176:	f000 f8ef 	bl	4358 <_init>
    417a:	4d0a      	ldr	r5, [pc, #40]	; (41a4 <__libc_init_array+0x40>)
    417c:	4c0a      	ldr	r4, [pc, #40]	; (41a8 <__libc_init_array+0x44>)
    417e:	1b64      	subs	r4, r4, r5
    4180:	10a4      	asrs	r4, r4, #2
    4182:	42a6      	cmp	r6, r4
    4184:	d105      	bne.n	4192 <__libc_init_array+0x2e>
    4186:	bd70      	pop	{r4, r5, r6, pc}
    4188:	00b3      	lsls	r3, r6, #2
    418a:	58eb      	ldr	r3, [r5, r3]
    418c:	4798      	blx	r3
    418e:	3601      	adds	r6, #1
    4190:	e7ee      	b.n	4170 <__libc_init_array+0xc>
    4192:	00b3      	lsls	r3, r6, #2
    4194:	58eb      	ldr	r3, [r5, r3]
    4196:	4798      	blx	r3
    4198:	3601      	adds	r6, #1
    419a:	e7f2      	b.n	4182 <__libc_init_array+0x1e>
    419c:	00004364 	.word	0x00004364
    41a0:	00004364 	.word	0x00004364
    41a4:	00004364 	.word	0x00004364
    41a8:	00004368 	.word	0x00004368

000041ac <memset>:
    41ac:	0003      	movs	r3, r0
    41ae:	1882      	adds	r2, r0, r2
    41b0:	4293      	cmp	r3, r2
    41b2:	d100      	bne.n	41b6 <memset+0xa>
    41b4:	4770      	bx	lr
    41b6:	7019      	strb	r1, [r3, #0]
    41b8:	3301      	adds	r3, #1
    41ba:	e7f9      	b.n	41b0 <memset+0x4>
    41bc:	682f2e2e 	.word	0x682f2e2e
    41c0:	702f6c70 	.word	0x702f6c70
    41c4:	2f74726f 	.word	0x2f74726f
    41c8:	5f6c7068 	.word	0x5f6c7068
    41cc:	6f697067 	.word	0x6f697067
    41d0:	7361625f 	.word	0x7361625f
    41d4:	00682e65 	.word	0x00682e65
    41d8:	682f2e2e 	.word	0x682f2e2e
    41dc:	732f6c61 	.word	0x732f6c61
    41e0:	682f6372 	.word	0x682f6372
    41e4:	695f6c61 	.word	0x695f6c61
    41e8:	6d5f6332 	.word	0x6d5f6332
    41ec:	6e79735f 	.word	0x6e79735f
    41f0:	00632e63 	.word	0x00632e63
    41f4:	682f2e2e 	.word	0x682f2e2e
    41f8:	732f6c61 	.word	0x732f6c61
    41fc:	682f6372 	.word	0x682f6372
    4200:	695f6c61 	.word	0x695f6c61
    4204:	00632e6f 	.word	0x00632e6f
    4208:	682f2e2e 	.word	0x682f2e2e
    420c:	732f6c61 	.word	0x732f6c61
    4210:	682f6372 	.word	0x682f6372
    4214:	745f6c61 	.word	0x745f6c61
    4218:	72656d69 	.word	0x72656d69
    421c:	0000632e 	.word	0x0000632e
    4220:	682f2e2e 	.word	0x682f2e2e
    4224:	752f6c61 	.word	0x752f6c61
    4228:	736c6974 	.word	0x736c6974
    422c:	6372732f 	.word	0x6372732f
    4230:	6974752f 	.word	0x6974752f
    4234:	6c5f736c 	.word	0x6c5f736c
    4238:	2e747369 	.word	0x2e747369
    423c:	00000063 	.word	0x00000063
    4240:	682f2e2e 	.word	0x682f2e2e
    4244:	632f6c70 	.word	0x632f6c70
    4248:	2f65726f 	.word	0x2f65726f
    424c:	5f6c7068 	.word	0x5f6c7068
    4250:	65726f63 	.word	0x65726f63
    4254:	70306d5f 	.word	0x70306d5f
    4258:	5f73756c 	.word	0x5f73756c
    425c:	65736162 	.word	0x65736162
    4260:	0000632e 	.word	0x0000632e
    4264:	00000e74 	.word	0x00000e74
    4268:	00000e52 	.word	0x00000e52
    426c:	00000e30 	.word	0x00000e30
    4270:	00000e0c 	.word	0x00000e0c
    4274:	00000dea 	.word	0x00000dea
    4278:	00000fa0 	.word	0x00000fa0
    427c:	00000f7e 	.word	0x00000f7e
    4280:	00000f5e 	.word	0x00000f5e
    4284:	00000f34 	.word	0x00000f34
    4288:	00000f0e 	.word	0x00000f0e
    428c:	682f2e2e 	.word	0x682f2e2e
    4290:	732f6c70 	.word	0x732f6c70
    4294:	6f637265 	.word	0x6f637265
    4298:	70682f6d 	.word	0x70682f6d
    429c:	65735f6c 	.word	0x65735f6c
    42a0:	6d6f6372 	.word	0x6d6f6372
    42a4:	0000632e 	.word	0x0000632e

000042a8 <sercomspi_regs>:
	...
    42bc:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    42cc:	0000632e                                .c..

000042d0 <mcp980x_interface>:
    42d0:	0000294d 00002a15 00003564 000034b4     M)...*..d5...4..
    42e0:	000034b4 000034b2 00003556 00003556     .4...4..V5..V5..
    42f0:	0000354c 000034b2 00003556 0000354c     L5...4..V5..L5..
    4300:	00003556 000034b2 0000355c 0000355c     V5...4..\5..\5..
    4310:	0000355c 000035ec 00003c80 00003b40     \5...5...<..@;..
    4320:	00003b40 00003b3c 00003c58 00003c58     @;..<;..X<..X<..
    4330:	00003c4a 00003b3c 00003c58 00003c4a     J<..<;..X<..J<..
    4340:	00003c58 00003b3c 00003c60 00003c60     X<..<;..`<..`<..
    4350:	00003c60 00003e64                       `<..d>..

00004358 <_init>:
    4358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    435e:	bc08      	pop	{r3}
    4360:	469e      	mov	lr, r3
    4362:	4770      	bx	lr

00004364 <__init_array_start>:
    4364:	000000dd 	.word	0x000000dd

00004368 <_fini>:
    4368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    436a:	46c0      	nop			; (mov r8, r8)
    436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    436e:	bc08      	pop	{r3}
    4370:	469e      	mov	lr, r3
    4372:	4770      	bx	lr

00004374 <__fini_array_start>:
    4374:	000000b5 	.word	0x000000b5
